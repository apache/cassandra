/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.fqltool.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-05-22")
public class QueryOptions implements org.apache.thrift.TBase<QueryOptions, QueryOptions._Fields>, java.io.Serializable, Cloneable, Comparable<QueryOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryOptions");

  private static final org.apache.thrift.protocol.TField CONSISTENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERIAL_CONSISTENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("serialConsistency", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryOptionsTupleSchemeFactory());
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public ConsistencyLevel consistency; // optional
  /**
   * 
   * @see ConsistencyLevel
   */
  public ConsistencyLevel serialConsistency; // optional
  public long timestamp; // optional
  public int pageSize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ConsistencyLevel
     */
    CONSISTENCY((short)1, "consistency"),
    /**
     * 
     * @see ConsistencyLevel
     */
    SERIAL_CONSISTENCY((short)2, "serialConsistency"),
    TIMESTAMP((short)3, "timestamp"),
    PAGE_SIZE((short)4, "pageSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSISTENCY
          return CONSISTENCY;
        case 2: // SERIAL_CONSISTENCY
          return SERIAL_CONSISTENCY;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // PAGE_SIZE
          return PAGE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONSISTENCY,_Fields.SERIAL_CONSISTENCY,_Fields.TIMESTAMP,_Fields.PAGE_SIZE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSISTENCY, new org.apache.thrift.meta_data.FieldMetaData("consistency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
    tmpMap.put(_Fields.SERIAL_CONSISTENCY, new org.apache.thrift.meta_data.FieldMetaData("serialConsistency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryOptions.class, metaDataMap);
  }

  public QueryOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryOptions(QueryOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConsistency()) {
      this.consistency = other.consistency;
    }
    if (other.isSetSerialConsistency()) {
      this.serialConsistency = other.serialConsistency;
    }
    this.timestamp = other.timestamp;
    this.pageSize = other.pageSize;
  }

  public QueryOptions deepCopy() {
    return new QueryOptions(this);
  }

  @Override
  public void clear() {
    this.consistency = null;
    this.serialConsistency = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public ConsistencyLevel getConsistency() {
    return this.consistency;
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public QueryOptions setConsistency(ConsistencyLevel consistency) {
    this.consistency = consistency;
    return this;
  }

  public void unsetConsistency() {
    this.consistency = null;
  }

  /** Returns true if field consistency is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistency() {
    return this.consistency != null;
  }

  public void setConsistencyIsSet(boolean value) {
    if (!value) {
      this.consistency = null;
    }
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public ConsistencyLevel getSerialConsistency() {
    return this.serialConsistency;
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public QueryOptions setSerialConsistency(ConsistencyLevel serialConsistency) {
    this.serialConsistency = serialConsistency;
    return this;
  }

  public void unsetSerialConsistency() {
    this.serialConsistency = null;
  }

  /** Returns true if field serialConsistency is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialConsistency() {
    return this.serialConsistency != null;
  }

  public void setSerialConsistencyIsSet(boolean value) {
    if (!value) {
      this.serialConsistency = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public QueryOptions setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public QueryOptions setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSISTENCY:
      if (value == null) {
        unsetConsistency();
      } else {
        setConsistency((ConsistencyLevel)value);
      }
      break;

    case SERIAL_CONSISTENCY:
      if (value == null) {
        unsetSerialConsistency();
      } else {
        setSerialConsistency((ConsistencyLevel)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSISTENCY:
      return getConsistency();

    case SERIAL_CONSISTENCY:
      return getSerialConsistency();

    case TIMESTAMP:
      return getTimestamp();

    case PAGE_SIZE:
      return getPageSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSISTENCY:
      return isSetConsistency();
    case SERIAL_CONSISTENCY:
      return isSetSerialConsistency();
    case TIMESTAMP:
      return isSetTimestamp();
    case PAGE_SIZE:
      return isSetPageSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryOptions)
      return this.equals((QueryOptions)that);
    return false;
  }

  public boolean equals(QueryOptions that) {
    if (that == null)
      return false;

    boolean this_present_consistency = true && this.isSetConsistency();
    boolean that_present_consistency = true && that.isSetConsistency();
    if (this_present_consistency || that_present_consistency) {
      if (!(this_present_consistency && that_present_consistency))
        return false;
      if (!this.consistency.equals(that.consistency))
        return false;
    }

    boolean this_present_serialConsistency = true && this.isSetSerialConsistency();
    boolean that_present_serialConsistency = true && that.isSetSerialConsistency();
    if (this_present_serialConsistency || that_present_serialConsistency) {
      if (!(this_present_serialConsistency && that_present_serialConsistency))
        return false;
      if (!this.serialConsistency.equals(that.serialConsistency))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_consistency = true && (isSetConsistency());
    list.add(present_consistency);
    if (present_consistency)
      list.add(consistency.getValue());

    boolean present_serialConsistency = true && (isSetSerialConsistency());
    list.add(present_serialConsistency);
    if (present_serialConsistency)
      list.add(serialConsistency.getValue());

    boolean present_timestamp = true && (isSetTimestamp());
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_pageSize = true && (isSetPageSize());
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConsistency()).compareTo(other.isSetConsistency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency, other.consistency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialConsistency()).compareTo(other.isSetSerialConsistency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialConsistency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialConsistency, other.serialConsistency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryOptions(");
    boolean first = true;

    if (isSetConsistency()) {
      sb.append("consistency:");
      if (this.consistency == null) {
        sb.append("null");
      } else {
        sb.append(this.consistency);
      }
      first = false;
    }
    if (isSetSerialConsistency()) {
      if (!first) sb.append(", ");
      sb.append("serialConsistency:");
      if (this.serialConsistency == null) {
        sb.append("null");
      } else {
        sb.append(this.serialConsistency);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryOptionsStandardSchemeFactory implements SchemeFactory {
    public QueryOptionsStandardScheme getScheme() {
      return new QueryOptionsStandardScheme();
    }
  }

  private static class QueryOptionsStandardScheme extends StandardScheme<QueryOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSISTENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consistency = org.apache.cassandra.fql.thrift.ConsistencyLevel.findByValue(iprot.readI32());
              struct.setConsistencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERIAL_CONSISTENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serialConsistency = org.apache.cassandra.fql.thrift.ConsistencyLevel.findByValue(iprot.readI32());
              struct.setSerialConsistencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.consistency != null) {
        if (struct.isSetConsistency()) {
          oprot.writeFieldBegin(CONSISTENCY_FIELD_DESC);
          oprot.writeI32(struct.consistency.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.serialConsistency != null) {
        if (struct.isSetSerialConsistency()) {
          oprot.writeFieldBegin(SERIAL_CONSISTENCY_FIELD_DESC);
          oprot.writeI32(struct.serialConsistency.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryOptionsTupleSchemeFactory implements SchemeFactory {
    public QueryOptionsTupleScheme getScheme() {
      return new QueryOptionsTupleScheme();
    }
  }

  private static class QueryOptionsTupleScheme extends TupleScheme<QueryOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConsistency()) {
        optionals.set(0);
      }
      if (struct.isSetSerialConsistency()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetPageSize()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetConsistency()) {
        oprot.writeI32(struct.consistency.getValue());
      }
      if (struct.isSetSerialConsistency()) {
        oprot.writeI32(struct.serialConsistency.getValue());
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.consistency = org.apache.cassandra.fql.thrift.ConsistencyLevel.findByValue(iprot.readI32());
        struct.setConsistencyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serialConsistency = org.apache.cassandra.fql.thrift.ConsistencyLevel.findByValue(iprot.readI32());
        struct.setSerialConsistencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
    }
  }

}

