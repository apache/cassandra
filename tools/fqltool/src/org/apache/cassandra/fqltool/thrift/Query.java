/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.fqltool.thrift;

import org.apache.thrift.TBaseHelper;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-05-22")
public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, java.io.Serializable, Cloneable, Comparable<Query> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Query");

  private static final org.apache.thrift.protocol.TField QUERY_STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStatement", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORIGINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("original", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DETERMINISTIC_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("deterministicQuery", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTupleSchemeFactory());
  }

  /**
   * 
   * @see QueryStatement
   */
  public QueryStatement queryStatement; // required
  public String original; // required
  public String deterministicQuery; // optional
  public List<ByteBuffer> values; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see QueryStatement
     */
    QUERY_STATEMENT((short)1, "queryStatement"),
    ORIGINAL((short)2, "original"),
    DETERMINISTIC_QUERY((short)3, "deterministicQuery"),
    VALUES((short)4, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_STATEMENT
          return QUERY_STATEMENT;
        case 2: // ORIGINAL
          return ORIGINAL;
        case 3: // DETERMINISTIC_QUERY
          return DETERMINISTIC_QUERY;
        case 4: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DETERMINISTIC_QUERY,_Fields.VALUES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("queryStatement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, QueryStatement.class)));
    tmpMap.put(_Fields.ORIGINAL, new org.apache.thrift.meta_data.FieldMetaData("original", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETERMINISTIC_QUERY, new org.apache.thrift.meta_data.FieldMetaData("deterministicQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Query.class, metaDataMap);
  }

  public Query() {
  }

  public Query(
    QueryStatement queryStatement,
    String original)
  {
    this();
    this.queryStatement = queryStatement;
    this.original = original;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Query(Query other) {
    if (other.isSetQueryStatement()) {
      this.queryStatement = other.queryStatement;
    }
    if (other.isSetOriginal()) {
      this.original = other.original;
    }
    if (other.isSetDeterministicQuery()) {
      this.deterministicQuery = other.deterministicQuery;
    }
    if (other.isSetValues()) {
      List<ByteBuffer> __this__values = new ArrayList<ByteBuffer>(other.values);
      this.values = __this__values;
    }
  }

  public Query deepCopy() {
    return new Query(this);
  }

  @Override
  public void clear() {
    this.queryStatement = null;
    this.original = null;
    this.deterministicQuery = null;
    this.values = null;
  }

  /**
   * 
   * @see QueryStatement
   */
  public QueryStatement getQueryStatement() {
    return this.queryStatement;
  }

  /**
   * 
   * @see QueryStatement
   */
  public Query setQueryStatement(QueryStatement queryStatement) {
    this.queryStatement = queryStatement;
    return this;
  }

  public void unsetQueryStatement() {
    this.queryStatement = null;
  }

  /** Returns true if field queryStatement is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStatement() {
    return this.queryStatement != null;
  }

  public void setQueryStatementIsSet(boolean value) {
    if (!value) {
      this.queryStatement = null;
    }
  }

  public String getOriginal() {
    return this.original;
  }

  public Query setOriginal(String original) {
    this.original = original;
    return this;
  }

  public void unsetOriginal() {
    this.original = null;
  }

  /** Returns true if field original is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal() {
    return this.original != null;
  }

  public void setOriginalIsSet(boolean value) {
    if (!value) {
      this.original = null;
    }
  }

  public String getDeterministicQuery() {
    return this.deterministicQuery;
  }

  public Query setDeterministicQuery(String deterministicQuery) {
    this.deterministicQuery = deterministicQuery;
    return this;
  }

  public void unsetDeterministicQuery() {
    this.deterministicQuery = null;
  }

  /** Returns true if field deterministicQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetDeterministicQuery() {
    return this.deterministicQuery != null;
  }

  public void setDeterministicQueryIsSet(boolean value) {
    if (!value) {
      this.deterministicQuery = null;
    }
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<ByteBuffer> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(ByteBuffer elem) {
    if (this.values == null) {
      this.values = new ArrayList<ByteBuffer>();
    }
    this.values.add(elem);
  }

  public List<ByteBuffer> getValues() {
    return this.values;
  }

  public Query setValues(List<ByteBuffer> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_STATEMENT:
      if (value == null) {
        unsetQueryStatement();
      } else {
        setQueryStatement((QueryStatement)value);
      }
      break;

    case ORIGINAL:
      if (value == null) {
        unsetOriginal();
      } else {
        setOriginal((String)value);
      }
      break;

    case DETERMINISTIC_QUERY:
      if (value == null) {
        unsetDeterministicQuery();
      } else {
        setDeterministicQuery((String)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_STATEMENT:
      return getQueryStatement();

    case ORIGINAL:
      return getOriginal();

    case DETERMINISTIC_QUERY:
      return getDeterministicQuery();

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_STATEMENT:
      return isSetQueryStatement();
    case ORIGINAL:
      return isSetOriginal();
    case DETERMINISTIC_QUERY:
      return isSetDeterministicQuery();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Query)
      return this.equals((Query)that);
    return false;
  }

  public boolean equals(Query that) {
    if (that == null)
      return false;

    boolean this_present_queryStatement = true && this.isSetQueryStatement();
    boolean that_present_queryStatement = true && that.isSetQueryStatement();
    if (this_present_queryStatement || that_present_queryStatement) {
      if (!(this_present_queryStatement && that_present_queryStatement))
        return false;
      if (!this.queryStatement.equals(that.queryStatement))
        return false;
    }

    boolean this_present_original = true && this.isSetOriginal();
    boolean that_present_original = true && that.isSetOriginal();
    if (this_present_original || that_present_original) {
      if (!(this_present_original && that_present_original))
        return false;
      if (!this.original.equals(that.original))
        return false;
    }

    boolean this_present_deterministicQuery = true && this.isSetDeterministicQuery();
    boolean that_present_deterministicQuery = true && that.isSetDeterministicQuery();
    if (this_present_deterministicQuery || that_present_deterministicQuery) {
      if (!(this_present_deterministicQuery && that_present_deterministicQuery))
        return false;
      if (!this.deterministicQuery.equals(that.deterministicQuery))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_queryStatement = true && (isSetQueryStatement());
    list.add(present_queryStatement);
    if (present_queryStatement)
      list.add(queryStatement.getValue());

    boolean present_original = true && (isSetOriginal());
    list.add(present_original);
    if (present_original)
      list.add(original);

    boolean present_deterministicQuery = true && (isSetDeterministicQuery());
    list.add(present_deterministicQuery);
    if (present_deterministicQuery)
      list.add(deterministicQuery);

    boolean present_values = true && (isSetValues());
    list.add(present_values);
    if (present_values)
      list.add(values);

    return list.hashCode();
  }

  @Override
  public int compareTo(Query other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQueryStatement()).compareTo(other.isSetQueryStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStatement, other.queryStatement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal()).compareTo(other.isSetOriginal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original, other.original);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeterministicQuery()).compareTo(other.isSetDeterministicQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeterministicQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deterministicQuery, other.deterministicQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Query(");
    boolean first = true;

    sb.append("queryStatement:");
    if (this.queryStatement == null) {
      sb.append("null");
    } else {
      sb.append(this.queryStatement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("original:");
    if (this.original == null) {
      sb.append("null");
    } else {
      sb.append(this.original);
    }
    first = false;
    if (isSetDeterministicQuery()) {
      if (!first) sb.append(", ");
      sb.append("deterministicQuery:");
      if (this.deterministicQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.deterministicQuery);
      }
      first = false;
    }
    if (isSetValues()) {
      if (!first) sb.append(", ");
      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append("[");
        for (ByteBuffer v : values) {
          TBaseHelper.toString(v, sb);
          sb.append(", ");
        }
        if (!values.isEmpty()) {
          sb.setLength(sb.length() - 2);
        }
        sb.append("]");
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (queryStatement == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'queryStatement' was not present! Struct: " + toString());
    }
    if (original == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'original' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStandardSchemeFactory implements SchemeFactory {
    public QueryStandardScheme getScheme() {
      return new QueryStandardScheme();
    }
  }

  private static class QueryStandardScheme extends StandardScheme<Query> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryStatement = org.apache.cassandra.fql.thrift.QueryStatement.findByValue(iprot.readI32());
              struct.setQueryStatementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORIGINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original = iprot.readString();
              struct.setOriginalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DETERMINISTIC_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deterministicQuery = iprot.readString();
              struct.setDeterministicQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.values = new ArrayList<ByteBuffer>(_list0.size);
                ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.values.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Query struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queryStatement != null) {
        oprot.writeFieldBegin(QUERY_STATEMENT_FIELD_DESC);
        oprot.writeI32(struct.queryStatement.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.original != null) {
        oprot.writeFieldBegin(ORIGINAL_FIELD_DESC);
        oprot.writeString(struct.original);
        oprot.writeFieldEnd();
      }
      if (struct.deterministicQuery != null) {
        if (struct.isSetDeterministicQuery()) {
          oprot.writeFieldBegin(DETERMINISTIC_QUERY_FIELD_DESC);
          oprot.writeString(struct.deterministicQuery);
          oprot.writeFieldEnd();
        }
      }
      if (struct.values != null) {
        if (struct.isSetValues()) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.values.size()));
            for (ByteBuffer _iter3 : struct.values)
            {
              oprot.writeBinary(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTupleSchemeFactory implements SchemeFactory {
    public QueryTupleScheme getScheme() {
      return new QueryTupleScheme();
    }
  }

  private static class QueryTupleScheme extends TupleScheme<Query> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.queryStatement.getValue());
      oprot.writeString(struct.original);
      BitSet optionals = new BitSet();
      if (struct.isSetDeterministicQuery()) {
        optionals.set(0);
      }
      if (struct.isSetValues()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDeterministicQuery()) {
        oprot.writeString(struct.deterministicQuery);
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (ByteBuffer _iter4 : struct.values)
          {
            oprot.writeBinary(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.queryStatement = org.apache.cassandra.fql.thrift.QueryStatement.findByValue(iprot.readI32());
      struct.setQueryStatementIsSet(true);
      struct.original = iprot.readString();
      struct.setOriginalIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.deterministicQuery = iprot.readString();
        struct.setDeterministicQueryIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.values = new ArrayList<ByteBuffer>(_list5.size);
          ByteBuffer _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readBinary();
            struct.values.add(_elem6);
          }
        }
        struct.setValuesIsSet(true);
      }
    }
  }

}

