--- a/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java
+++ b/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java
@@ -224,7 +224,6 @@
      */
     SCHEMA_PULL_BACKOFF_DELAY_MS("cassandra.schema_pull_backoff_delay_ms", "3000"),
 
-<<<<<<<
     /** When enabled, recursive directory deletion will be executed using a unix command `rm -rf` instead of traversing
      * and removing individual files. This is now used only tests, but eventually we will make it true by default.*/
     USE_NIX_RECURSIVE_DELETE("cassandra.use_nix_recursive_delete"),
@@ -255,11 +254,8 @@
      */
     GOSSIP_SETTLE_POLL_SUCCESSES_REQUIRED("cassandra.gossip_settle_poll_success_required", "3"),
 
-    ;
-=======
     /** Which class to use for failure detection */
     CUSTOM_FAILURE_DETECTOR_PROPERTY("cassandra.custom_failure_detector_class");
->>>>>>>
 
     CassandraRelevantProperties(String key, String defaultVal)
     {
--- a/test/unit/org/apache/cassandra/service/StorageServiceTest.java
+++ b/test/unit/org/apache/cassandra/service/StorageServiceTest.java
@@ -58,6 +58,7 @@
 
 import org.apache.cassandra.service.StorageService.LeavingReplica;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -183,7 +184,6 @@
     }
 
     @Test
-<<<<<<<
     public void testRebuildFailOnNonExistingDatacenter()
     {
         String nonExistentDC = "NON_EXISTENT_DC";
@@ -234,7 +234,8 @@
         Mockito.when(spiedMetadata.cloneOnlyTokenMap()).thenReturn(spiedMetadata);
 
         return spiedStorageService;
-=======
+    }
+    @Test
     public void testSourceReplicasIsEmptyWithDeadNodes()
     {
         RandomPartitioner partitioner = new RandomPartitioner();
@@ -281,6 +282,5 @@
         EndpointsForRange result = StorageService.getStreamCandidates(endpoints);
         assertTrue("Live node should be in replica list", result.contains(liveReplica));
         assertFalse("Dead node should not be in replica list", result.contains(deadReplica));
->>>>>>>
     }
 }
