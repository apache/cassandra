--- a/src/java/org/apache/cassandra/metrics/BufferPoolMetrics.java
+++ b/src/java/org/apache/cassandra/metrics/BufferPoolMetrics.java
@@ -22,51 +22,11 @@
 
 public interface BufferPoolMetrics
 {
-<<<<<<<
-    /** Total number of hits */
-    public final Meter hits;
-
-    /** Total number of misses */
-    public final Meter misses;
-
-    /** Total threshold for a certain type of buffer pool*/
-    public final Gauge<Long> capacity;
-
-    /** Total size of buffer pools, in bytes, including overflow allocation */
-    public final Gauge<Long> size;
-
-    /** Total size, in bytes, of active buffered being used from the pool currently + overflow */
-    public final Gauge<Long> usedSize;
-
-    /**
-     * Total size, in bytes, of direct or heap buffers allocated by the pool but not part of the pool
-     * either because they are too large to fit or because the pool has exceeded its maximum limit or because it's
-     * on-heap allocation.
-     */
-    public final Gauge<Long> overflowSize;
-
-    public BufferPoolMetrics(String scope, BufferPool bufferPool)
-    {
-        MetricNameFactory factory = new DefaultNameFactory("BufferPool", scope);
-
-        hits = Metrics.meter(factory.createMetricName("Hits"));
-
-        misses = Metrics.meter(factory.createMetricName("Misses"));
-
-        capacity = Metrics.register(factory.createMetricName("Capacity"), bufferPool::memoryUsageThreshold);
-
-        overflowSize = Metrics.register(factory.createMetricName("OverflowSize"), bufferPool::overflowMemoryInBytes);
-
-        usedSize = Metrics.register(factory.createMetricName("UsedSize"), bufferPool::usedSizeInBytes);
-
-        size = Metrics.register(factory.createMetricName("Size"), bufferPool::sizeInBytes);
-=======
     static BufferPoolMetrics create(String name, BufferPool bufferPool)
     {
         return CassandraRelevantProperties.USE_MICROMETER.getBoolean()
                ? new MicrometerBufferPoolMetrics(name, bufferPool)
                : new CodahaleBufferPoolMetrics(name, bufferPool);
->>>>>>>
     }
 
     void markHit();
