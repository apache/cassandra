/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.teknek.arizona;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransformRequest implements org.apache.thrift.TBase<TransformRequest, TransformRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TransformRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformRequest");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("column_family", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("function_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FUNCTION_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("function_properties", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SERIAL_CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("serial_consistency_level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COMMIT_CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_consistency_level", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("predicate", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransformRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransformRequestTupleSchemeFactory());
  }

  public ByteBuffer key; // optional
  public String column_family; // optional
  public String function_name; // optional
  public Map<ByteBuffer,ByteBuffer> function_properties; // optional
  /**
   * 
   * @see org.apache.cassandra.thrift.ConsistencyLevel
   */
  public org.apache.cassandra.thrift.ConsistencyLevel serial_consistency_level; // optional
  /**
   * 
   * @see org.apache.cassandra.thrift.ConsistencyLevel
   */
  public org.apache.cassandra.thrift.ConsistencyLevel commit_consistency_level; // optional
  public org.apache.cassandra.thrift.SlicePredicate predicate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    COLUMN_FAMILY((short)2, "column_family"),
    FUNCTION_NAME((short)3, "function_name"),
    FUNCTION_PROPERTIES((short)4, "function_properties"),
    /**
     * 
     * @see org.apache.cassandra.thrift.ConsistencyLevel
     */
    SERIAL_CONSISTENCY_LEVEL((short)5, "serial_consistency_level"),
    /**
     * 
     * @see org.apache.cassandra.thrift.ConsistencyLevel
     */
    COMMIT_CONSISTENCY_LEVEL((short)6, "commit_consistency_level"),
    PREDICATE((short)7, "predicate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // COLUMN_FAMILY
          return COLUMN_FAMILY;
        case 3: // FUNCTION_NAME
          return FUNCTION_NAME;
        case 4: // FUNCTION_PROPERTIES
          return FUNCTION_PROPERTIES;
        case 5: // SERIAL_CONSISTENCY_LEVEL
          return SERIAL_CONSISTENCY_LEVEL;
        case 6: // COMMIT_CONSISTENCY_LEVEL
          return COMMIT_CONSISTENCY_LEVEL;
        case 7: // PREDICATE
          return PREDICATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.KEY,_Fields.COLUMN_FAMILY,_Fields.FUNCTION_NAME,_Fields.FUNCTION_PROPERTIES,_Fields.SERIAL_CONSISTENCY_LEVEL,_Fields.COMMIT_CONSISTENCY_LEVEL,_Fields.PREDICATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COLUMN_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("column_family", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("function_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNCTION_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("function_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.SERIAL_CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("serial_consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.cassandra.thrift.ConsistencyLevel.class)));
    tmpMap.put(_Fields.COMMIT_CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("commit_consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.cassandra.thrift.ConsistencyLevel.class)));
    tmpMap.put(_Fields.PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.cassandra.thrift.SlicePredicate.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformRequest.class, metaDataMap);
  }

  public TransformRequest() {
    this.serial_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.SERIAL;

    this.commit_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.QUORUM;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransformRequest(TransformRequest other) {
    if (other.isSetKey()) {
      this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
;
    }
    if (other.isSetColumn_family()) {
      this.column_family = other.column_family;
    }
    if (other.isSetFunction_name()) {
      this.function_name = other.function_name;
    }
    if (other.isSetFunction_properties()) {
      Map<ByteBuffer,ByteBuffer> __this__function_properties = new HashMap<ByteBuffer,ByteBuffer>(other.function_properties);
      this.function_properties = __this__function_properties;
    }
    if (other.isSetSerial_consistency_level()) {
      this.serial_consistency_level = other.serial_consistency_level;
    }
    if (other.isSetCommit_consistency_level()) {
      this.commit_consistency_level = other.commit_consistency_level;
    }
    if (other.isSetPredicate()) {
      this.predicate = new org.apache.cassandra.thrift.SlicePredicate(other.predicate);
    }
  }

  public TransformRequest deepCopy() {
    return new TransformRequest(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.column_family = null;
    this.function_name = null;
    this.function_properties = null;
    this.serial_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.SERIAL;

    this.commit_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.QUORUM;

    this.predicate = null;
  }

  public byte[] getKey() {
    setKey(org.apache.thrift.TBaseHelper.rightSize(key));
    return key == null ? null : key.array();
  }

  public ByteBuffer bufferForKey() {
    return key;
  }

  public TransformRequest setKey(byte[] key) {
    setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
    return this;
  }

  public TransformRequest setKey(ByteBuffer key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public String getColumn_family() {
    return this.column_family;
  }

  public TransformRequest setColumn_family(String column_family) {
    this.column_family = column_family;
    return this;
  }

  public void unsetColumn_family() {
    this.column_family = null;
  }

  /** Returns true if field column_family is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_family() {
    return this.column_family != null;
  }

  public void setColumn_familyIsSet(boolean value) {
    if (!value) {
      this.column_family = null;
    }
  }

  public String getFunction_name() {
    return this.function_name;
  }

  public TransformRequest setFunction_name(String function_name) {
    this.function_name = function_name;
    return this;
  }

  public void unsetFunction_name() {
    this.function_name = null;
  }

  /** Returns true if field function_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFunction_name() {
    return this.function_name != null;
  }

  public void setFunction_nameIsSet(boolean value) {
    if (!value) {
      this.function_name = null;
    }
  }

  public int getFunction_propertiesSize() {
    return (this.function_properties == null) ? 0 : this.function_properties.size();
  }

  public void putToFunction_properties(ByteBuffer key, ByteBuffer val) {
    if (this.function_properties == null) {
      this.function_properties = new HashMap<ByteBuffer,ByteBuffer>();
    }
    this.function_properties.put(key, val);
  }

  public Map<ByteBuffer,ByteBuffer> getFunction_properties() {
    return this.function_properties;
  }

  public TransformRequest setFunction_properties(Map<ByteBuffer,ByteBuffer> function_properties) {
    this.function_properties = function_properties;
    return this;
  }

  public void unsetFunction_properties() {
    this.function_properties = null;
  }

  /** Returns true if field function_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetFunction_properties() {
    return this.function_properties != null;
  }

  public void setFunction_propertiesIsSet(boolean value) {
    if (!value) {
      this.function_properties = null;
    }
  }

  /**
   * 
   * @see org.apache.cassandra.thrift.ConsistencyLevel
   */
  public org.apache.cassandra.thrift.ConsistencyLevel getSerial_consistency_level() {
    return this.serial_consistency_level;
  }

  /**
   * 
   * @see org.apache.cassandra.thrift.ConsistencyLevel
   */
  public TransformRequest setSerial_consistency_level(org.apache.cassandra.thrift.ConsistencyLevel serial_consistency_level) {
    this.serial_consistency_level = serial_consistency_level;
    return this;
  }

  public void unsetSerial_consistency_level() {
    this.serial_consistency_level = null;
  }

  /** Returns true if field serial_consistency_level is set (has been assigned a value) and false otherwise */
  public boolean isSetSerial_consistency_level() {
    return this.serial_consistency_level != null;
  }

  public void setSerial_consistency_levelIsSet(boolean value) {
    if (!value) {
      this.serial_consistency_level = null;
    }
  }

  /**
   * 
   * @see org.apache.cassandra.thrift.ConsistencyLevel
   */
  public org.apache.cassandra.thrift.ConsistencyLevel getCommit_consistency_level() {
    return this.commit_consistency_level;
  }

  /**
   * 
   * @see org.apache.cassandra.thrift.ConsistencyLevel
   */
  public TransformRequest setCommit_consistency_level(org.apache.cassandra.thrift.ConsistencyLevel commit_consistency_level) {
    this.commit_consistency_level = commit_consistency_level;
    return this;
  }

  public void unsetCommit_consistency_level() {
    this.commit_consistency_level = null;
  }

  /** Returns true if field commit_consistency_level is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_consistency_level() {
    return this.commit_consistency_level != null;
  }

  public void setCommit_consistency_levelIsSet(boolean value) {
    if (!value) {
      this.commit_consistency_level = null;
    }
  }

  public org.apache.cassandra.thrift.SlicePredicate getPredicate() {
    return this.predicate;
  }

  public TransformRequest setPredicate(org.apache.cassandra.thrift.SlicePredicate predicate) {
    this.predicate = predicate;
    return this;
  }

  public void unsetPredicate() {
    this.predicate = null;
  }

  /** Returns true if field predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetPredicate() {
    return this.predicate != null;
  }

  public void setPredicateIsSet(boolean value) {
    if (!value) {
      this.predicate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((ByteBuffer)value);
      }
      break;

    case COLUMN_FAMILY:
      if (value == null) {
        unsetColumn_family();
      } else {
        setColumn_family((String)value);
      }
      break;

    case FUNCTION_NAME:
      if (value == null) {
        unsetFunction_name();
      } else {
        setFunction_name((String)value);
      }
      break;

    case FUNCTION_PROPERTIES:
      if (value == null) {
        unsetFunction_properties();
      } else {
        setFunction_properties((Map<ByteBuffer,ByteBuffer>)value);
      }
      break;

    case SERIAL_CONSISTENCY_LEVEL:
      if (value == null) {
        unsetSerial_consistency_level();
      } else {
        setSerial_consistency_level((org.apache.cassandra.thrift.ConsistencyLevel)value);
      }
      break;

    case COMMIT_CONSISTENCY_LEVEL:
      if (value == null) {
        unsetCommit_consistency_level();
      } else {
        setCommit_consistency_level((org.apache.cassandra.thrift.ConsistencyLevel)value);
      }
      break;

    case PREDICATE:
      if (value == null) {
        unsetPredicate();
      } else {
        setPredicate((org.apache.cassandra.thrift.SlicePredicate)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case COLUMN_FAMILY:
      return getColumn_family();

    case FUNCTION_NAME:
      return getFunction_name();

    case FUNCTION_PROPERTIES:
      return getFunction_properties();

    case SERIAL_CONSISTENCY_LEVEL:
      return getSerial_consistency_level();

    case COMMIT_CONSISTENCY_LEVEL:
      return getCommit_consistency_level();

    case PREDICATE:
      return getPredicate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case COLUMN_FAMILY:
      return isSetColumn_family();
    case FUNCTION_NAME:
      return isSetFunction_name();
    case FUNCTION_PROPERTIES:
      return isSetFunction_properties();
    case SERIAL_CONSISTENCY_LEVEL:
      return isSetSerial_consistency_level();
    case COMMIT_CONSISTENCY_LEVEL:
      return isSetCommit_consistency_level();
    case PREDICATE:
      return isSetPredicate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransformRequest)
      return this.equals((TransformRequest)that);
    return false;
  }

  public boolean equals(TransformRequest that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_column_family = true && this.isSetColumn_family();
    boolean that_present_column_family = true && that.isSetColumn_family();
    if (this_present_column_family || that_present_column_family) {
      if (!(this_present_column_family && that_present_column_family))
        return false;
      if (!this.column_family.equals(that.column_family))
        return false;
    }

    boolean this_present_function_name = true && this.isSetFunction_name();
    boolean that_present_function_name = true && that.isSetFunction_name();
    if (this_present_function_name || that_present_function_name) {
      if (!(this_present_function_name && that_present_function_name))
        return false;
      if (!this.function_name.equals(that.function_name))
        return false;
    }

    boolean this_present_function_properties = true && this.isSetFunction_properties();
    boolean that_present_function_properties = true && that.isSetFunction_properties();
    if (this_present_function_properties || that_present_function_properties) {
      if (!(this_present_function_properties && that_present_function_properties))
        return false;
      if (!this.function_properties.equals(that.function_properties))
        return false;
    }

    boolean this_present_serial_consistency_level = true && this.isSetSerial_consistency_level();
    boolean that_present_serial_consistency_level = true && that.isSetSerial_consistency_level();
    if (this_present_serial_consistency_level || that_present_serial_consistency_level) {
      if (!(this_present_serial_consistency_level && that_present_serial_consistency_level))
        return false;
      if (!this.serial_consistency_level.equals(that.serial_consistency_level))
        return false;
    }

    boolean this_present_commit_consistency_level = true && this.isSetCommit_consistency_level();
    boolean that_present_commit_consistency_level = true && that.isSetCommit_consistency_level();
    if (this_present_commit_consistency_level || that_present_commit_consistency_level) {
      if (!(this_present_commit_consistency_level && that_present_commit_consistency_level))
        return false;
      if (!this.commit_consistency_level.equals(that.commit_consistency_level))
        return false;
    }

    boolean this_present_predicate = true && this.isSetPredicate();
    boolean that_present_predicate = true && that.isSetPredicate();
    if (this_present_predicate || that_present_predicate) {
      if (!(this_present_predicate && that_present_predicate))
        return false;
      if (!this.predicate.equals(that.predicate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_key = true && (isSetKey());
    builder.append(present_key);
    if (present_key)
      builder.append(key);

    boolean present_column_family = true && (isSetColumn_family());
    builder.append(present_column_family);
    if (present_column_family)
      builder.append(column_family);

    boolean present_function_name = true && (isSetFunction_name());
    builder.append(present_function_name);
    if (present_function_name)
      builder.append(function_name);

    boolean present_function_properties = true && (isSetFunction_properties());
    builder.append(present_function_properties);
    if (present_function_properties)
      builder.append(function_properties);

    boolean present_serial_consistency_level = true && (isSetSerial_consistency_level());
    builder.append(present_serial_consistency_level);
    if (present_serial_consistency_level)
      builder.append(serial_consistency_level.getValue());

    boolean present_commit_consistency_level = true && (isSetCommit_consistency_level());
    builder.append(present_commit_consistency_level);
    if (present_commit_consistency_level)
      builder.append(commit_consistency_level.getValue());

    boolean present_predicate = true && (isSetPredicate());
    builder.append(present_predicate);
    if (present_predicate)
      builder.append(predicate);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TransformRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(other.isSetColumn_family());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_family()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_family, other.column_family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunction_name()).compareTo(other.isSetFunction_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunction_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.function_name, other.function_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunction_properties()).compareTo(other.isSetFunction_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunction_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.function_properties, other.function_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerial_consistency_level()).compareTo(other.isSetSerial_consistency_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial_consistency_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serial_consistency_level, other.serial_consistency_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommit_consistency_level()).compareTo(other.isSetCommit_consistency_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_consistency_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_consistency_level, other.commit_consistency_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(other.isSetPredicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicate, other.predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransformRequest(");
    boolean first = true;

    if (isSetKey()) {
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key, sb);
      }
      first = false;
    }
    if (isSetColumn_family()) {
      if (!first) sb.append(", ");
      sb.append("column_family:");
      if (this.column_family == null) {
        sb.append("null");
      } else {
        sb.append(this.column_family);
      }
      first = false;
    }
    if (isSetFunction_name()) {
      if (!first) sb.append(", ");
      sb.append("function_name:");
      if (this.function_name == null) {
        sb.append("null");
      } else {
        sb.append(this.function_name);
      }
      first = false;
    }
    if (isSetFunction_properties()) {
      if (!first) sb.append(", ");
      sb.append("function_properties:");
      if (this.function_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.function_properties);
      }
      first = false;
    }
    if (isSetSerial_consistency_level()) {
      if (!first) sb.append(", ");
      sb.append("serial_consistency_level:");
      if (this.serial_consistency_level == null) {
        sb.append("null");
      } else {
        sb.append(this.serial_consistency_level);
      }
      first = false;
    }
    if (isSetCommit_consistency_level()) {
      if (!first) sb.append(", ");
      sb.append("commit_consistency_level:");
      if (this.commit_consistency_level == null) {
        sb.append("null");
      } else {
        sb.append(this.commit_consistency_level);
      }
      first = false;
    }
    if (isSetPredicate()) {
      if (!first) sb.append(", ");
      sb.append("predicate:");
      if (this.predicate == null) {
        sb.append("null");
      } else {
        sb.append(this.predicate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (predicate != null) {
      predicate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransformRequestStandardSchemeFactory implements SchemeFactory {
    public TransformRequestStandardScheme getScheme() {
      return new TransformRequestStandardScheme();
    }
  }

  private static class TransformRequestStandardScheme extends StandardScheme<TransformRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransformRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readBinary();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_family = iprot.readString();
              struct.setColumn_familyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUNCTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.function_name = iprot.readString();
              struct.setFunction_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FUNCTION_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.function_properties = new HashMap<ByteBuffer,ByteBuffer>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  ByteBuffer _key2;
                  ByteBuffer _val3;
                  _key2 = iprot.readBinary();
                  _val3 = iprot.readBinary();
                  struct.function_properties.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setFunction_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERIAL_CONSISTENCY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serial_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.findByValue(iprot.readI32());
              struct.setSerial_consistency_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMIT_CONSISTENCY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commit_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.findByValue(iprot.readI32());
              struct.setCommit_consistency_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.predicate = new org.apache.cassandra.thrift.SlicePredicate();
              struct.predicate.read(iprot);
              struct.setPredicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransformRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        if (struct.isSetKey()) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeBinary(struct.key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_family != null) {
        if (struct.isSetColumn_family()) {
          oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
          oprot.writeString(struct.column_family);
          oprot.writeFieldEnd();
        }
      }
      if (struct.function_name != null) {
        if (struct.isSetFunction_name()) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.function_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.function_properties != null) {
        if (struct.isSetFunction_properties()) {
          oprot.writeFieldBegin(FUNCTION_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.function_properties.size()));
            for (Map.Entry<ByteBuffer, ByteBuffer> _iter4 : struct.function_properties.entrySet())
            {
              oprot.writeBinary(_iter4.getKey());
              oprot.writeBinary(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.serial_consistency_level != null) {
        if (struct.isSetSerial_consistency_level()) {
          oprot.writeFieldBegin(SERIAL_CONSISTENCY_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.serial_consistency_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commit_consistency_level != null) {
        if (struct.isSetCommit_consistency_level()) {
          oprot.writeFieldBegin(COMMIT_CONSISTENCY_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.commit_consistency_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.predicate != null) {
        if (struct.isSetPredicate()) {
          oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
          struct.predicate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransformRequestTupleSchemeFactory implements SchemeFactory {
    public TransformRequestTupleScheme getScheme() {
      return new TransformRequestTupleScheme();
    }
  }

  private static class TransformRequestTupleScheme extends TupleScheme<TransformRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransformRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetColumn_family()) {
        optionals.set(1);
      }
      if (struct.isSetFunction_name()) {
        optionals.set(2);
      }
      if (struct.isSetFunction_properties()) {
        optionals.set(3);
      }
      if (struct.isSetSerial_consistency_level()) {
        optionals.set(4);
      }
      if (struct.isSetCommit_consistency_level()) {
        optionals.set(5);
      }
      if (struct.isSetPredicate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetKey()) {
        oprot.writeBinary(struct.key);
      }
      if (struct.isSetColumn_family()) {
        oprot.writeString(struct.column_family);
      }
      if (struct.isSetFunction_name()) {
        oprot.writeString(struct.function_name);
      }
      if (struct.isSetFunction_properties()) {
        {
          oprot.writeI32(struct.function_properties.size());
          for (Map.Entry<ByteBuffer, ByteBuffer> _iter5 : struct.function_properties.entrySet())
          {
            oprot.writeBinary(_iter5.getKey());
            oprot.writeBinary(_iter5.getValue());
          }
        }
      }
      if (struct.isSetSerial_consistency_level()) {
        oprot.writeI32(struct.serial_consistency_level.getValue());
      }
      if (struct.isSetCommit_consistency_level()) {
        oprot.writeI32(struct.commit_consistency_level.getValue());
      }
      if (struct.isSetPredicate()) {
        struct.predicate.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransformRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.key = iprot.readBinary();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.column_family = iprot.readString();
        struct.setColumn_familyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.function_name = iprot.readString();
        struct.setFunction_nameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.function_properties = new HashMap<ByteBuffer,ByteBuffer>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            ByteBuffer _key8;
            ByteBuffer _val9;
            _key8 = iprot.readBinary();
            _val9 = iprot.readBinary();
            struct.function_properties.put(_key8, _val9);
          }
        }
        struct.setFunction_propertiesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.serial_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.findByValue(iprot.readI32());
        struct.setSerial_consistency_levelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commit_consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.findByValue(iprot.readI32());
        struct.setCommit_consistency_levelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.predicate = new org.apache.cassandra.thrift.SlicePredicate();
        struct.predicate.read(iprot);
        struct.setPredicateIsSet(true);
      }
    }
  }

}

