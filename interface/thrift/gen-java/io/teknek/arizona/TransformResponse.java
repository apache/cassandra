/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.teknek.arizona;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransformResponse implements org.apache.thrift.TBase<TransformResponse, TransformResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TransformResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformResponse");

  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("current_value", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransformResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransformResponseTupleSchemeFactory());
  }

  public boolean success; // required
  public List<org.apache.cassandra.thrift.Column> current_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUCCESS((short)1, "success"),
    CURRENT_VALUE((short)2, "current_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUCCESS
          return SUCCESS;
        case 2: // CURRENT_VALUE
          return CURRENT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CURRENT_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CURRENT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("current_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.cassandra.thrift.Column.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformResponse.class, metaDataMap);
  }

  public TransformResponse() {
  }

  public TransformResponse(
    boolean success)
  {
    this();
    this.success = success;
    setSuccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransformResponse(TransformResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.success = other.success;
    if (other.isSetCurrent_value()) {
      List<org.apache.cassandra.thrift.Column> __this__current_value = new ArrayList<org.apache.cassandra.thrift.Column>(other.current_value.size());
      for (org.apache.cassandra.thrift.Column other_element : other.current_value) {
        __this__current_value.add(new org.apache.cassandra.thrift.Column(other_element));
      }
      this.current_value = __this__current_value;
    }
  }

  public TransformResponse deepCopy() {
    return new TransformResponse(this);
  }

  @Override
  public void clear() {
    setSuccessIsSet(false);
    this.success = false;
    this.current_value = null;
  }

  public boolean isSuccess() {
    return this.success;
  }

  public TransformResponse setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public int getCurrent_valueSize() {
    return (this.current_value == null) ? 0 : this.current_value.size();
  }

  public java.util.Iterator<org.apache.cassandra.thrift.Column> getCurrent_valueIterator() {
    return (this.current_value == null) ? null : this.current_value.iterator();
  }

  public void addToCurrent_value(org.apache.cassandra.thrift.Column elem) {
    if (this.current_value == null) {
      this.current_value = new ArrayList<org.apache.cassandra.thrift.Column>();
    }
    this.current_value.add(elem);
  }

  public List<org.apache.cassandra.thrift.Column> getCurrent_value() {
    return this.current_value;
  }

  public TransformResponse setCurrent_value(List<org.apache.cassandra.thrift.Column> current_value) {
    this.current_value = current_value;
    return this;
  }

  public void unsetCurrent_value() {
    this.current_value = null;
  }

  /** Returns true if field current_value is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_value() {
    return this.current_value != null;
  }

  public void setCurrent_valueIsSet(boolean value) {
    if (!value) {
      this.current_value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Boolean)value);
      }
      break;

    case CURRENT_VALUE:
      if (value == null) {
        unsetCurrent_value();
      } else {
        setCurrent_value((List<org.apache.cassandra.thrift.Column>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return Boolean.valueOf(isSuccess());

    case CURRENT_VALUE:
      return getCurrent_value();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    case CURRENT_VALUE:
      return isSetCurrent_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransformResponse)
      return this.equals((TransformResponse)that);
    return false;
  }

  public boolean equals(TransformResponse that) {
    if (that == null)
      return false;

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_current_value = true && this.isSetCurrent_value();
    boolean that_present_current_value = true && that.isSetCurrent_value();
    if (this_present_current_value || that_present_current_value) {
      if (!(this_present_current_value && that_present_current_value))
        return false;
      if (!this.current_value.equals(that.current_value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_success = true;
    builder.append(present_success);
    if (present_success)
      builder.append(success);

    boolean present_current_value = true && (isSetCurrent_value());
    builder.append(present_current_value);
    if (present_current_value)
      builder.append(current_value);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TransformResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_value()).compareTo(other.isSetCurrent_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_value, other.current_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransformResponse(");
    boolean first = true;

    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (isSetCurrent_value()) {
      if (!first) sb.append(", ");
      sb.append("current_value:");
      if (this.current_value == null) {
        sb.append("null");
      } else {
        sb.append(this.current_value);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransformResponseStandardSchemeFactory implements SchemeFactory {
    public TransformResponseStandardScheme getScheme() {
      return new TransformResponseStandardScheme();
    }
  }

  private static class TransformResponseStandardScheme extends StandardScheme<TransformResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransformResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.current_value = new ArrayList<org.apache.cassandra.thrift.Column>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  org.apache.cassandra.thrift.Column _elem12;
                  _elem12 = new org.apache.cassandra.thrift.Column();
                  _elem12.read(iprot);
                  struct.current_value.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setCurrent_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSuccess()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransformResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.success);
      oprot.writeFieldEnd();
      if (struct.current_value != null) {
        if (struct.isSetCurrent_value()) {
          oprot.writeFieldBegin(CURRENT_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.current_value.size()));
            for (org.apache.cassandra.thrift.Column _iter13 : struct.current_value)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransformResponseTupleSchemeFactory implements SchemeFactory {
    public TransformResponseTupleScheme getScheme() {
      return new TransformResponseTupleScheme();
    }
  }

  private static class TransformResponseTupleScheme extends TupleScheme<TransformResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransformResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.success);
      BitSet optionals = new BitSet();
      if (struct.isSetCurrent_value()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCurrent_value()) {
        {
          oprot.writeI32(struct.current_value.size());
          for (org.apache.cassandra.thrift.Column _iter14 : struct.current_value)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransformResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.success = iprot.readBool();
      struct.setSuccessIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.current_value = new ArrayList<org.apache.cassandra.thrift.Column>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            org.apache.cassandra.thrift.Column _elem17;
            _elem17 = new org.apache.cassandra.thrift.Column();
            _elem17.read(iprot);
            struct.current_value.add(_elem17);
          }
        }
        struct.setCurrent_valueIsSet(true);
      }
    }
  }

}

