Apache Cassandra
-----------------

Apache Cassandra is a highly-scalable partitioned row store. Rows are organized into tables with a required primary key.

https://cwiki.apache.org/confluence/display/CASSANDRA2/Partitioners[Partitioning] means that Cassandra can distribute your data across multiple machines in an application-transparent matter. Cassandra will automatically repartition as machines are added and removed from the cluster.

https://cwiki.apache.org/confluence/display/CASSANDRA2/DataModel[Row store] means that like relational databases, Cassandra organizes data by rows and columns. The Cassandra Query Language (CQL) is a close relative of SQL.

For more information, see http://cassandra.apache.org/[the Apache Cassandra web site].

Issues should be reported on https://issues.apache.org/jira/projects/CASSANDRA/issues/[The Cassandra Jira].

Please refer to the <<quick-start-development-guide,Quick Start Development Guide>> for development instructions.

Requirements
------------
. Java >= 1.8 (OpenJDK and Oracle JVMS have been tested)
. Python 3.6+ (for cqlsh)

Running Cassandra
-----------------

This short guide will walk you through getting a basic one node cluster up
and running, and demonstrate some simple reads and writes. For a more complete guide, please see the Apache Cassandra website's http://cassandra.apache.org/doc/latest/getting_started/[Getting Started Guide].

First, we'll unpack our archive:

  $ tar -zxvf apache-cassandra-$VERSION.tar.gz
  $ cd apache-cassandra-$VERSION

After that we start the server. Running the startup script with the -f argument will cause
Cassandra to remain in the foreground and log to standard out; it can be stopped with ctrl-C.

  $ bin/cassandra -f

Now let's try to read and write some data using the Cassandra Query Language:

  $ bin/cqlsh

The command line client is interactive so if everything worked you should
be sitting in front of a prompt:

----
Connected to Test Cluster at localhost:9160.
[cqlsh 6.2.0 | Cassandra 4.2-SNAPSHOT | CQL spec 3.4.6 | Native protocol v5]
Use HELP for help.
cqlsh>
----

As the banner says, you can use 'help;' or '?' to see what CQL has to
offer, and 'quit;' or 'exit;' when you've had enough fun. But lets try
something slightly more interesting:

----
cqlsh> CREATE KEYSPACE schema1
       WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
cqlsh> USE schema1;
cqlsh:Schema1> CREATE TABLE users (
                 user_id varchar PRIMARY KEY,
                 first varchar,
                 last varchar,
                 age int
               );
cqlsh:Schema1> INSERT INTO users (user_id, first, last, age)
               VALUES ('jsmith', 'John', 'Smith', 42);
cqlsh:Schema1> SELECT * FROM users;
 user_id | age | first | last
---------+-----+-------+-------
  jsmith |  42 |  john | smith
cqlsh:Schema1>
----


If your session looks similar to what's above, congrats, your single node
cluster is operational!

For more on what commands are supported by CQL, see
http://cassandra.apache.org/doc/latest/cql/[the CQL reference]. A
reasonable way to think of it is as, "SQL minus joins and subqueries, plus collections."

Quick Start Development Guide
-----------------------------

This short guide will walk you through basic steps of setting up a local development environment and testing local changes in a Docker container. For more detailed guidelines on Cassandra Development, please refer to the Apache Cassandra website's https://cassandra.apache.org/_/development/index.html[Contributing to Cassandra] section.

Installing Pre-requisites
~~~~~~~~~~~~~~~~~~~~~~~~~

The following dependencies are required to build Cassandra locally:

. Java 11
. Apache Ant >= 1.10

These packages are available via most modern package systems (ie. deb/rpm/brew).

Use the instruction below to install Java and Ant in Debian/Ubuntu Linux or macOS.

Debian-based Linux
^^^^^^^^^^^^^^^^^^

On debian-based sytems (ie. Ubuntu), use the following command to install Java and Ant:

  $ sudo apt-get install openjdk-11-jdk-headless ant

macOS
^^^^^

On macOS systems with https://brew.sh/[Homebrew] package manager, use the following command to install Java and Ant:

  $ brew install openjdk@11 ant

After the previous step, it's necessary to symlink the brew JDK with the command below to allow other programs such as the Java IDE to easily find this JDK:

  $ sudo ln -sfn $(brew --prefix)/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

If you have trouble building Cassandra in the next step, it may be needed to export the JAVA_HOME variable to point to the newly installed JDK:

  $ export JAVA_HOME=`/usr/libexec/java_home -v 11`;

Building Cassandra
^^^^^^^^^^^^^^^^^^

Before building Cassandra, please verify that the correct versions of Java (11) and Ant (>1.10) are available in your environment:
----
$ java -version
openjdk version "11.0.16" 2022-07-19
OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04)
OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing)

$ ant -version
Apache Ant(TM) version 1.10.7 compiled on October 24 2019
----

Use the following command to build Cassandra and verify the project is correctly configured:

-----
$ cd /path/to/cassandra
/path/to/cassandra$ export CASSANDRA_USE_JDK11=true # Required for JDK11
/path/to/cassandra$ ant build

[...]
BUILD SUCCESSFUL
Total time: 35 seconds
-----

If you see anything other than `BUILD SUCCESSFUL`, you might need additional steps to fix it. Please reach out on https://cassandra.apache.org/_/community.html#discussions[Community Forums] such as mailing list or slack with the description of any issues you might encounter.

Setting up IDE
~~~~~~~~~~~~~~

Use the instructions below to configure Cassandra on IntelliJ IDEA. Setup instructions for other IDEs (ie. NetBeans/Eclipse) can be found in the Apache Cassandra website's https://cassandra.apache.org/_/development/ide.html[Building and IDE Integration] section.

1. If Intellij IDEA Community Edition is not installed in your system, please install it according to the platform-specific installation instructions from the https://www.jetbrains.com/help/idea/installation-guide.html[official documentation].

2. Create the IntelliJ IDEA project configuration files with:
-----
/path/to/cassandra$ ant generate-idea-files

generate-idea-files:
    [mkdir] Created dir: /path/to/cassandra/.idea
    [mkdir] Created dir: /path/to/cassandra/.idea/libraries
     [copy] Copying 9 files to /path/to/cassandra/.idea
     [copy] Copying 1 file to /path/to/cassandra

_maybe_update_idea_to_java11:

BUILD SUCCESSFUL
Total time: 5 seconds
-----

[start=2]
2. On IntelliJ IDEA startup screen, open the the directory of your Cassandra project (/path/to/cassandra). It may take a little bit until the IDE loads all dependencies and indexes the project. Please refer to the troubleshooting items below if you face any issues when loading Cassandra on IntelliJ IDEA:

* âš  Make sure to choose the option `Open existing project` and not `Create New Project`.
* âš  Reject or skip any prompts to load the project as a `Maven Project`, otherwise the project will not load correctly. If you accept this prompt by mistake, please remove the `.idea` directory and `cassandra.iml` files and run `ant generate-idea-files` again before re-opening the project on Intellij IDEA.
* â›” If a `JDK11 is missing` error message pops up, click `configure` > `Add new JDK` and point to the installed JDK, usually located in `/usr/lib/jvm/<jdk>` in Debian-based systems or `/Library/Java/JavaVirtualMachines/<jdk>` on macOS.

[start=3]
3. In order to check that the project is loaded orrectly, open the test class https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/test/RepairTest.java[test/distributed/org/apache/cassandra/distributed/test/RepairTest.java] and attempt to run this test suite by right-clicking in the test class name (`RepairTest`) and selecting the option `Run RepairTest` or using the shortcut `Ctrl+Shift+F10` after clicking on the class name.

* ðŸ’¡ It's possible to navigate to a specific file in IntelliJ IDEA via the shortcut `Ctrl+Shift+N` on Windows/Linux or `Cmd+Shift+O` on macOS.
* â›” If you get an error message similar to `org.apache.cassandra.exceptions.ConfigurationException: failed to bind to: /127.0.0.2:17012` when running the test, please create loopback aliases for 127.0.0.1 to fix this failing unit test:
+
-----
sudo ifconfig lo0 alias 127.0.0.2 up
sudo ifconfig lo0 alias 127.0.0.3 up
...
-----

If you face a problem not described above, you might need additional steps to fix it. Please reach out on https://cassandra.apache.org/_/community.html#discussions[Community Forums] such as mailing list or slack with the description of other issues you might encounter.

Running a local Cassandra build in Docker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This guide assumes Docker Engine is installed and running in your system. Please find platform-specific installation instructions for Docker on the https://docs.docker.com/engine/install/[official documentation].

Once Docker Engine is installed, it's possible to verify if the Docker service is running with the `docker info` command. If no errors come up in the output of this command, it means the docker service is up and runing.

After verifying that Docker Engine is running, follow the steps below to build and spin up a test Cassandra Docker container with the latest local changes.

Building cassandra-test image
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the following command to build a Cassandra test image with local changes:

----
/path/to/cassandra$ ant docker-build
Buildfile: /path/to/cassandra/build.xml

[...]
     [exec] Successfully built d9df864e4cf6
     [exec] Successfully tagged apache/cassandra-test:latest
   [delete] Deleting: /path/to/cassandra/build/Dockerfile
   [delete] Deleting: /path/to/cassandra/build/docker-entrypoint.sh
     [echo] cassandra-test image built, start it with 'ant docker-start'.

BUILD SUCCESSFUL
Total time: 29 seconds
----

Starting cassandra-test image
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After the image is built in the previous step, start a `cassandra-test` container with:

----
$ ant docker-start
Buildfile: /path/to/cassandra/build.xml

docker-start:
     [exec] Waiting for cassandra-test container e62283096514fc23ebfaed2415b351538e56a6b0027f1423824ca4bd1fe03700 to start.
     [exec] Waiting for cassandra-test container e62283096514fc23ebfaed2415b351538e56a6b0027f1423824ca4bd1fe03700 to start.
     [exec] cassandra-test container started with id e62283096514fc23ebfaed2415b351538e56a6b0027f1423824ca4bd1fe03700
     [exec]
     [exec] Use 'docker-exec -it cassandra-test <CMD>' to execute commands on this container.
     [exec] ie. docker exec -it cassandra-test nodetool status
     [exec] ie. docker exec -it cassandra-test cqlsh

BUILD SUCCESSFUL
Total time: 1 minute 2 seconds
----

Once the image is up and running, use the following commands to interact with the `cassandra-test` container:

* Run the https://cassandra.apache.org/doc/latest/cassandra/tools/nodetool/nodetool.html[nodetool] utility with:
----
$ docker exec -it cassandra-test nodetool status
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load        Tokens  Owns (effective)  Host ID                               Rack
UN  172.18.0.2  105.72 KiB  16      100.0%            9061600f-9fd3-4651-ac33-3bbeea5c2051  rack1
----

* Run the https://cassandra.apache.org/doc/latest/cassandra/tools/cqlsh.html[cqlsh] utility with:
----
$ docker exec -it cassandra-test cqlsh
Connected to Test Cluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 4.2-SNAPSHOT | CQL spec 3.4.6 | Native protocol v5]
Use HELP for help.
cqlsh> exit
----

Stopping cassandra-test image
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the following command to stop the `cassandra-test` container:

----
$ ant docker-stop
Buildfile: /path/to/cassandra/build.xml

docker-stop:
     [exec] Stopped and removed container 'cassandra-test'

BUILD SUCCESSFUL
Total time: 0 seconds
----

Testing local changes with Docker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the following steps to log "Hello World" during Cassandra initialization and verify this change in a local cassandra-test container.

1. On your preferred IDE, open the file https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java[src/java/org/apache/cassandra/service/CassandraDaemon.java] - on IntelliJ IDEA this can be done via the shortcut `Ctrl+Shift+N` on Windows/Linux or `Cmd+Shift+O` on macOS.

2. On the https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java[CassandraDaemon] class, navigate to the `logSystemInfo` method - on IntelliJ IDEA this can be done via the `Shift+Shift` or `Ctrl+F12` shortcuts.

3. Add the following log statement to any position in the `logSystemInfo` method:
----
logger.info("Hello World!");
----

[start=4]
4. Rebuild and re-run the cassandra-test container with:
----
/path/to/cassandra$ ant docker-build
/path/to/cassandra$ ant docker-stop
/path/to/cassandra$ ant docker-start
----

[start=5]
5. Verify that the "Hello World" log is being print during node initialization:
----
/path/to/cassandra$ docker logs cassandra-test | grep "Hello World"
INFO  [main] 2022-09-15 22:09:34,075 CassandraDaemon.java:634 - Hello World!
----

Please refer to the https://cassandra.apache.org/_/development/index.html[Contributing to Cassandra] section to find more details and instructions on how to submit patches for review.

Useful links
------------

  * Join us in #cassandra on the https://s.apache.org/slack-invite[ASF Slack] and ask questions.
  * Subscribe to the Users mailing list by sending a mail to
    user-subscribe@cassandra.apache.org.
  * Subscribe to the Developer mailing list by sending a mail to
    dev-subscribe@cassandra.apache.org.
  * Visit the http://cassandra.apache.org/community/[community section] of the Cassandra website for more information on getting involved.
  * Visit the http://cassandra.apache.org/doc/latest/development/index.html[development section] of the Cassandra website for more information on how to contribute.
