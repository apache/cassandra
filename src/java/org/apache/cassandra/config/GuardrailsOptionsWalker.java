/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.cassandra.config;

import java.lang.String;
import java.util.Map;
import java.util.Set;
import org.apache.cassandra.audit.AuditLogOptions;
import org.apache.cassandra.config.registry.PropertyAccessorsWalker;
import org.apache.cassandra.db.ConsistencyLevel;
import org.apache.cassandra.fql.FullQueryLoggerOptions;

/**
* This class is generated by {@link org.apache.cassandra.utils.AccessorWalkerGenerateUtil} on given {@link GuardrailsOptions} source class.
* It contains all the configuration property setters and getters that match the yaml property names in the {@code Config}
* and the type of the property fields. For example, a yaml property and its corresponding Config field has the name "cdc_block_writes"
* and the type - boolean, then we will look up for the setter method named setCdcBlockWrites to be in the given source class.
 * @see org.apache.cassandra.utils.AccessorWalkerGenerateUtil
 * @see org.apache.cassandra.config.GuardrailsOptions
 */
public class GuardrailsOptionsWalker implements PropertyAccessorsWalker
{
    private final GuardrailsOptions source;

    public GuardrailsOptionsWalker(GuardrailsOptions source)
    {
        this.source = source;
    }

    @Override
    public void walk(PropertyAccessorsVisitor visitor)
    {
        visitor.visit(ConfigFields.ALLOW_FILTERING_ENABLED, Boolean.TYPE, source::setAllowFilteringEnabled, source::getAllowFilteringEnabled);
        visitor.visit(ConfigFields.ALTER_TABLE_ENABLED, Boolean.TYPE, source::setAlterTableEnabled, source::getAlterTableEnabled);
        visitor.visit(ConfigFields.COLLECTION_SIZE_FAIL_THRESHOLD, DataStorageSpec.LongBytesBound.class, null, source::getCollectionSizeFailThreshold);
        visitor.visit(ConfigFields.COLLECTION_SIZE_WARN_THRESHOLD, DataStorageSpec.LongBytesBound.class, null, source::getCollectionSizeWarnThreshold);
        visitor.visit(ConfigFields.COLUMNS_PER_TABLE_FAIL_THRESHOLD, Integer.TYPE, null, source::getColumnsPerTableFailThreshold);
        visitor.visit(ConfigFields.COLUMNS_PER_TABLE_WARN_THRESHOLD, Integer.TYPE, null, source::getColumnsPerTableWarnThreshold);
        visitor.visit(ConfigFields.COLUMN_VALUE_SIZE_FAIL_THRESHOLD, DataStorageSpec.LongBytesBound.class, null, source::getColumnValueSizeFailThreshold);
        visitor.visit(ConfigFields.COLUMN_VALUE_SIZE_WARN_THRESHOLD, DataStorageSpec.LongBytesBound.class, null, source::getColumnValueSizeWarnThreshold);
        visitor.visit(ConfigFields.COMPACT_TABLES_ENABLED, Boolean.TYPE, source::setCompactTablesEnabled, source::getCompactTablesEnabled);
        visitor.visit(ConfigFields.DATA_DISK_USAGE_MAX_DISK_SIZE, DataStorageSpec.LongBytesBound.class, source::setDataDiskUsageMaxDiskSize, source::getDataDiskUsageMaxDiskSize);
        visitor.visit(ConfigFields.DATA_DISK_USAGE_PERCENTAGE_FAIL_THRESHOLD, Integer.TYPE, null, source::getDataDiskUsagePercentageFailThreshold);
        visitor.visit(ConfigFields.DATA_DISK_USAGE_PERCENTAGE_WARN_THRESHOLD, Integer.TYPE, null, source::getDataDiskUsagePercentageWarnThreshold);
        visitor.visit(ConfigFields.DROP_KEYSPACE_ENABLED, Boolean.TYPE, source::setDropKeyspaceEnabled, source::getDropKeyspaceEnabled);
        visitor.visit(ConfigFields.DROP_TRUNCATE_TABLE_ENABLED, Boolean.TYPE, source::setDropTruncateTableEnabled, source::getDropTruncateTableEnabled);
        visitor.visit(ConfigFields.GROUP_BY_ENABLED, Boolean.TYPE, source::setGroupByEnabled, source::getGroupByEnabled);
        visitor.visit(ConfigFields.IN_SELECT_CARTESIAN_PRODUCT_FAIL_THRESHOLD, Integer.TYPE, null, source::getInSelectCartesianProductFailThreshold);
        visitor.visit(ConfigFields.IN_SELECT_CARTESIAN_PRODUCT_WARN_THRESHOLD, Integer.TYPE, null, source::getInSelectCartesianProductWarnThreshold);
        visitor.visit(ConfigFields.ITEMS_PER_COLLECTION_FAIL_THRESHOLD, Integer.TYPE, null, source::getItemsPerCollectionFailThreshold);
        visitor.visit(ConfigFields.ITEMS_PER_COLLECTION_WARN_THRESHOLD, Integer.TYPE, null, source::getItemsPerCollectionWarnThreshold);
        visitor.visit(ConfigFields.KEYSPACES_FAIL_THRESHOLD, Integer.TYPE, null, source::getKeyspacesFailThreshold);
        visitor.visit(ConfigFields.KEYSPACES_WARN_THRESHOLD, Integer.TYPE, null, source::getKeyspacesWarnThreshold);
        visitor.visit(ConfigFields.MATERIALIZED_VIEWS_PER_TABLE_FAIL_THRESHOLD, Integer.TYPE, null, source::getMaterializedViewsPerTableFailThreshold);
        visitor.visit(ConfigFields.MATERIALIZED_VIEWS_PER_TABLE_WARN_THRESHOLD, Integer.TYPE, null, source::getMaterializedViewsPerTableWarnThreshold);
        visitor.visit(ConfigFields.MAXIMUM_REPLICATION_FACTOR_FAIL_THRESHOLD, Integer.TYPE, null, source::getMaximumReplicationFactorFailThreshold);
        visitor.visit(ConfigFields.MAXIMUM_REPLICATION_FACTOR_WARN_THRESHOLD, Integer.TYPE, null, source::getMaximumReplicationFactorWarnThreshold);
        visitor.visit(ConfigFields.MINIMUM_REPLICATION_FACTOR_FAIL_THRESHOLD, Integer.TYPE, null, source::getMinimumReplicationFactorFailThreshold);
        visitor.visit(ConfigFields.MINIMUM_REPLICATION_FACTOR_WARN_THRESHOLD, Integer.TYPE, null, source::getMinimumReplicationFactorWarnThreshold);
        visitor.visit(ConfigFields.PAGE_SIZE_FAIL_THRESHOLD, Integer.TYPE, null, source::getPageSizeFailThreshold);
        visitor.visit(ConfigFields.PAGE_SIZE_WARN_THRESHOLD, Integer.TYPE, null, source::getPageSizeWarnThreshold);
        visitor.visit(ConfigFields.PARTITION_KEYS_IN_SELECT_FAIL_THRESHOLD, Integer.TYPE, null, source::getPartitionKeysInSelectFailThreshold);
        visitor.visit(ConfigFields.PARTITION_KEYS_IN_SELECT_WARN_THRESHOLD, Integer.TYPE, null, source::getPartitionKeysInSelectWarnThreshold);
        visitor.visit(ConfigFields.READ_BEFORE_WRITE_LIST_OPERATIONS_ENABLED, Boolean.TYPE, source::setReadBeforeWriteListOperationsEnabled, source::getReadBeforeWriteListOperationsEnabled);
        visitor.visit(ConfigFields.READ_CONSISTENCY_LEVELS_DISALLOWED, Set.class, source::setReadConsistencyLevelsDisallowed, source::getReadConsistencyLevelsDisallowed);
        visitor.visit(ConfigFields.READ_CONSISTENCY_LEVELS_WARNED, Set.class, source::setReadConsistencyLevelsWarned, source::getReadConsistencyLevelsWarned);
        visitor.visit(ConfigFields.SECONDARY_INDEXES_ENABLED, Boolean.TYPE, source::setSecondaryIndexesEnabled, source::getSecondaryIndexesEnabled);
        visitor.visit(ConfigFields.SECONDARY_INDEXES_PER_TABLE_FAIL_THRESHOLD, Integer.TYPE, null, source::getSecondaryIndexesPerTableFailThreshold);
        visitor.visit(ConfigFields.SECONDARY_INDEXES_PER_TABLE_WARN_THRESHOLD, Integer.TYPE, null, source::getSecondaryIndexesPerTableWarnThreshold);
        visitor.visit(ConfigFields.TABLES_FAIL_THRESHOLD, Integer.TYPE, null, source::getTablesFailThreshold);
        visitor.visit(ConfigFields.TABLES_WARN_THRESHOLD, Integer.TYPE, null, source::getTablesWarnThreshold);
        visitor.visit(ConfigFields.TABLE_PROPERTIES_DISALLOWED, Set.class, source::setTablePropertiesDisallowed, source::getTablePropertiesDisallowed);
        visitor.visit(ConfigFields.TABLE_PROPERTIES_IGNORED, Set.class, source::setTablePropertiesIgnored, source::getTablePropertiesIgnored);
        visitor.visit(ConfigFields.TABLE_PROPERTIES_WARNED, Set.class, source::setTablePropertiesWarned, source::getTablePropertiesWarned);
        visitor.visit(ConfigFields.UNCOMPRESSED_TABLES_ENABLED, Boolean.TYPE, source::setUncompressedTablesEnabled, source::getUncompressedTablesEnabled);
        visitor.visit(ConfigFields.USER_TIMESTAMPS_ENABLED, Boolean.TYPE, source::setUserTimestampsEnabled, source::getUserTimestampsEnabled);
        visitor.visit(ConfigFields.WRITE_CONSISTENCY_LEVELS_DISALLOWED, Set.class, source::setWriteConsistencyLevelsDisallowed, source::getWriteConsistencyLevelsDisallowed);
        visitor.visit(ConfigFields.WRITE_CONSISTENCY_LEVELS_WARNED, Set.class, source::setWriteConsistencyLevelsWarned, source::getWriteConsistencyLevelsWarned);
    }
}
