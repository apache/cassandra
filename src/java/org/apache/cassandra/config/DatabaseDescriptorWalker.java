/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.cassandra.config;

import java.lang.String;
import java.util.Map;
import java.util.Set;
import org.apache.cassandra.audit.AuditLogOptions;
import org.apache.cassandra.config.registry.PropertyAccessorsWalker;
import org.apache.cassandra.db.ConsistencyLevel;
import org.apache.cassandra.fql.FullQueryLoggerOptions;

/**
* This class is generated by {@link org.apache.cassandra.utils.AccessorWalkerGenerateUtil} on given {@link DatabaseDescriptor} source class.
* It contains all the configuration property setters and getters that match the yaml property names in the {@code Config}
* and the type of the property fields. For example, a yaml property and its corresponding Config field has the name "cdc_block_writes"
* and the type - boolean, then we will look up for the setter method named setCdcBlockWrites to be in the given source class.
 * @see org.apache.cassandra.utils.AccessorWalkerGenerateUtil
 * @see org.apache.cassandra.config.DatabaseDescriptor
 */
public class DatabaseDescriptorWalker implements PropertyAccessorsWalker
{
    private final DatabaseDescriptor source;

    public DatabaseDescriptorWalker(DatabaseDescriptor source)
    {
        this.source = source;
    }

    @Override
    public void walk(PropertyAccessorsVisitor visitor)
    {
        visitor.visit(ConfigFields.ALLOCATE_TOKENS_FOR_KEYSPACE, String.class, null, DatabaseDescriptor::getAllocateTokensForKeyspace);
        visitor.visit(ConfigFields.AUDIT_LOGGING_OPTIONS, AuditLogOptions.class, DatabaseDescriptor::setAuditLoggingOptions, DatabaseDescriptor::getAuditLoggingOptions);
        visitor.visit(ConfigFields.AUTH_CACHE_WARMING_ENABLED, Boolean.TYPE, null, DatabaseDescriptor::getAuthCacheWarmingEnabled);
        visitor.visit(ConfigFields.AUTOCOMPACTION_ON_STARTUP_ENABLED, Boolean.TYPE, null, DatabaseDescriptor::getAutocompactionOnStartupEnabled);
        visitor.visit(ConfigFields.AUTO_HINTS_CLEANUP_ENABLED, Boolean.TYPE, DatabaseDescriptor::setAutoHintsCleanupEnabled, null);
        visitor.visit(ConfigFields.AUTO_OPTIMISE_FULL_REPAIR_STREAMS, Boolean.TYPE, DatabaseDescriptor::setAutoOptimiseFullRepairStreams, null);
        visitor.visit(ConfigFields.AUTO_OPTIMISE_INC_REPAIR_STREAMS, Boolean.TYPE, DatabaseDescriptor::setAutoOptimiseIncRepairStreams, null);
        visitor.visit(ConfigFields.AUTO_OPTIMISE_PREVIEW_REPAIR_STREAMS, Boolean.TYPE, DatabaseDescriptor::setAutoOptimisePreviewRepairStreams, null);
        visitor.visit(ConfigFields.AUTO_SNAPSHOT, Boolean.TYPE, DatabaseDescriptor::setAutoSnapshot, DatabaseDescriptor::getAutoSnapshot);
        visitor.visit(ConfigFields.AVAILABLE_PROCESSORS, Integer.TYPE, null, DatabaseDescriptor::getAvailableProcessors);
        visitor.visit(ConfigFields.CDC_BLOCK_WRITES, Boolean.TYPE, DatabaseDescriptor::setCdcBlockWrites, DatabaseDescriptor::getCdcBlockWrites);
        visitor.visit(ConfigFields.CDC_ON_REPAIR_ENABLED, Boolean.TYPE, DatabaseDescriptor::setCdcOnRepairEnabled, DatabaseDescriptor::getCdcOnRepairEnabled);
        visitor.visit(ConfigFields.CHECK_FOR_DUPLICATE_ROWS_DURING_COMPACTION, Boolean.TYPE, DatabaseDescriptor::setCheckForDuplicateRowsDuringCompaction, null);
        visitor.visit(ConfigFields.CHECK_FOR_DUPLICATE_ROWS_DURING_READS, Boolean.TYPE, DatabaseDescriptor::setCheckForDuplicateRowsDuringReads, null);
        visitor.visit(ConfigFields.CLIENT_ERROR_REPORTING_EXCLUSIONS, SubnetGroups.class, null, DatabaseDescriptor::getClientErrorReportingExclusions);
        visitor.visit(ConfigFields.CLIENT_REQUEST_SIZE_METRICS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setClientRequestSizeMetricsEnabled, DatabaseDescriptor::getClientRequestSizeMetricsEnabled);
        visitor.visit(ConfigFields.CLUSTER_NAME, String.class, null, DatabaseDescriptor::getClusterName);
        visitor.visit(ConfigFields.COMMIT_FAILURE_POLICY, Config.CommitFailurePolicy.class, DatabaseDescriptor::setCommitFailurePolicy, DatabaseDescriptor::getCommitFailurePolicy);
        visitor.visit(ConfigFields.CONCURRENT_INDEX_BUILDERS, Integer.TYPE, null, DatabaseDescriptor::getConcurrentIndexBuilders);
        visitor.visit(ConfigFields.CONCURRENT_VALIDATIONS, Integer.TYPE, DatabaseDescriptor::setConcurrentValidations, DatabaseDescriptor::getConcurrentValidations);
        visitor.visit(ConfigFields.CONSECUTIVE_MESSAGE_ERRORS_THRESHOLD, Integer.TYPE, DatabaseDescriptor::setConsecutiveMessageErrorsThreshold, DatabaseDescriptor::getConsecutiveMessageErrorsThreshold);
        visitor.visit(ConfigFields.COORDINATOR_READ_SIZE_FAIL_THRESHOLD, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setCoordinatorReadSizeFailThreshold, DatabaseDescriptor::getCoordinatorReadSizeFailThreshold);
        visitor.visit(ConfigFields.COORDINATOR_READ_SIZE_WARN_THRESHOLD, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setCoordinatorReadSizeWarnThreshold, DatabaseDescriptor::getCoordinatorReadSizeWarnThreshold);
        visitor.visit(ConfigFields.CORRUPTED_TOMBSTONE_STRATEGY, Config.CorruptedTombstoneStrategy.class, DatabaseDescriptor::setCorruptedTombstoneStrategy, DatabaseDescriptor::getCorruptedTombstoneStrategy);
        visitor.visit(ConfigFields.COUNTER_CACHE_KEYS_TO_SAVE, Integer.TYPE, DatabaseDescriptor::setCounterCacheKeysToSave, DatabaseDescriptor::getCounterCacheKeysToSave);
        visitor.visit(ConfigFields.CREDENTIALS_CACHE_ACTIVE_UPDATE, Boolean.TYPE, DatabaseDescriptor::setCredentialsCacheActiveUpdate, DatabaseDescriptor::getCredentialsCacheActiveUpdate);
        visitor.visit(ConfigFields.CREDENTIALS_CACHE_MAX_ENTRIES, Integer.TYPE, DatabaseDescriptor::setCredentialsCacheMaxEntries, DatabaseDescriptor::getCredentialsCacheMaxEntries);
        visitor.visit(ConfigFields.DENYLIST_CONSISTENCY_LEVEL, ConsistencyLevel.class, DatabaseDescriptor::setDenylistConsistencyLevel, DatabaseDescriptor::getDenylistConsistencyLevel);
        visitor.visit(ConfigFields.DENYLIST_MAX_KEYS_PER_TABLE, Integer.TYPE, DatabaseDescriptor::setDenylistMaxKeysPerTable, DatabaseDescriptor::getDenylistMaxKeysPerTable);
        visitor.visit(ConfigFields.DENYLIST_MAX_KEYS_TOTAL, Integer.TYPE, DatabaseDescriptor::setDenylistMaxKeysTotal, DatabaseDescriptor::getDenylistMaxKeysTotal);
        visitor.visit(ConfigFields.DENYLIST_RANGE_READS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setDenylistRangeReadsEnabled, DatabaseDescriptor::getDenylistRangeReadsEnabled);
        visitor.visit(ConfigFields.DENYLIST_READS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setDenylistReadsEnabled, DatabaseDescriptor::getDenylistReadsEnabled);
        visitor.visit(ConfigFields.DENYLIST_WRITES_ENABLED, Boolean.TYPE, DatabaseDescriptor::setDenylistWritesEnabled, DatabaseDescriptor::getDenylistWritesEnabled);
        visitor.visit(ConfigFields.DIAGNOSTIC_EVENTS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setDiagnosticEventsEnabled, null);
        visitor.visit(ConfigFields.DISK_ACCESS_MODE, Config.DiskAccessMode.class, DatabaseDescriptor::setDiskAccessMode, DatabaseDescriptor::getDiskAccessMode);
        visitor.visit(ConfigFields.DISK_FAILURE_POLICY, Config.DiskFailurePolicy.class, DatabaseDescriptor::setDiskFailurePolicy, DatabaseDescriptor::getDiskFailurePolicy);
        visitor.visit(ConfigFields.DISK_OPTIMIZATION_ESTIMATE_PERCENTILE, Double.TYPE, null, DatabaseDescriptor::getDiskOptimizationEstimatePercentile);
        visitor.visit(ConfigFields.DUMP_HEAP_ON_UNCAUGHT_EXCEPTION, Boolean.TYPE, DatabaseDescriptor::setDumpHeapOnUncaughtException, DatabaseDescriptor::getDumpHeapOnUncaughtException);
        visitor.visit(ConfigFields.FILE_CACHE_ENABLED, Boolean.TYPE, null, DatabaseDescriptor::getFileCacheEnabled);
        visitor.visit(ConfigFields.FLUSH_COMPRESSION, Config.FlushCompression.class, DatabaseDescriptor::setFlushCompression, DatabaseDescriptor::getFlushCompression);
        visitor.visit(ConfigFields.FORCE_NEW_PREPARED_STATEMENT_BEHAVIOUR, Boolean.TYPE, DatabaseDescriptor::setForceNewPreparedStatementBehaviour, DatabaseDescriptor::getForceNewPreparedStatementBehaviour);
        visitor.visit(ConfigFields.HINTED_HANDOFF_ENABLED, Boolean.TYPE, DatabaseDescriptor::setHintedHandoffEnabled, null);
        visitor.visit(ConfigFields.HINTS_COMPRESSION, ParameterizedClass.class, DatabaseDescriptor::setHintsCompression, DatabaseDescriptor::getHintsCompression);
        visitor.visit(ConfigFields.IDEAL_CONSISTENCY_LEVEL, ConsistencyLevel.class, DatabaseDescriptor::setIdealConsistencyLevel, DatabaseDescriptor::getIdealConsistencyLevel);
        visitor.visit(ConfigFields.INITIAL_RANGE_TOMBSTONE_LIST_ALLOCATION_SIZE, Integer.TYPE, DatabaseDescriptor::setInitialRangeTombstoneListAllocationSize, DatabaseDescriptor::getInitialRangeTombstoneListAllocationSize);
        visitor.visit(ConfigFields.INTERNODE_COMPRESSION, Config.InternodeCompression.class, DatabaseDescriptor::setInternodeCompression, null);
        visitor.visit(ConfigFields.INTERNODE_ERROR_REPORTING_EXCLUSIONS, SubnetGroups.class, null, DatabaseDescriptor::getInternodeErrorReportingExclusions);
        visitor.visit(ConfigFields.KEYSPACE_COUNT_WARN_THRESHOLD, Integer.TYPE, DatabaseDescriptor::setKeyspaceCountWarnThreshold, null);
        visitor.visit(ConfigFields.KEY_CACHE_KEYS_TO_SAVE, Integer.TYPE, DatabaseDescriptor::setKeyCacheKeysToSave, DatabaseDescriptor::getKeyCacheKeysToSave);
        visitor.visit(ConfigFields.LISTEN_ON_BROADCAST_ADDRESS, Boolean.TYPE, DatabaseDescriptor::setListenOnBroadcastAddress, null);
        visitor.visit(ConfigFields.LOCAL_READ_SIZE_FAIL_THRESHOLD, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setLocalReadSizeFailThreshold, DatabaseDescriptor::getLocalReadSizeFailThreshold);
        visitor.visit(ConfigFields.LOCAL_READ_SIZE_WARN_THRESHOLD, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setLocalReadSizeWarnThreshold, DatabaseDescriptor::getLocalReadSizeWarnThreshold);
        visitor.visit(ConfigFields.MATERIALIZED_VIEWS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setMaterializedViewsEnabled, DatabaseDescriptor::getMaterializedViewsEnabled);
        visitor.visit(ConfigFields.MAX_HINTS_DELIVERY_THREADS, Integer.TYPE, null, DatabaseDescriptor::getMaxHintsDeliveryThreads);
        visitor.visit(ConfigFields.MAX_TOP_SIZE_PARTITION_COUNT, Integer.TYPE, DatabaseDescriptor::setMaxTopSizePartitionCount, DatabaseDescriptor::getMaxTopSizePartitionCount);
        visitor.visit(ConfigFields.MAX_TOP_TOMBSTONE_PARTITION_COUNT, Integer.TYPE, DatabaseDescriptor::setMaxTopTombstonePartitionCount, DatabaseDescriptor::getMaxTopTombstonePartitionCount);
        visitor.visit(ConfigFields.MEMTABLE_ALLOCATION_TYPE, Config.MemtableAllocationType.class, null, DatabaseDescriptor::getMemtableAllocationType);
        visitor.visit(ConfigFields.MEMTABLE_CLEANUP_THRESHOLD, Float.class, null, DatabaseDescriptor::getMemtableCleanupThreshold);
        visitor.visit(ConfigFields.MIN_TRACKED_PARTITION_TOMBSTONE_COUNT, Long.TYPE, DatabaseDescriptor::setMinTrackedPartitionTombstoneCount, DatabaseDescriptor::getMinTrackedPartitionTombstoneCount);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_ALLOW_OLDER_PROTOCOLS, Boolean.TYPE, DatabaseDescriptor::setNativeTransportAllowOlderProtocols, DatabaseDescriptor::getNativeTransportAllowOlderProtocols);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_MAX_AUTH_THREADS, Integer.TYPE, DatabaseDescriptor::setNativeTransportMaxAuthThreads, null);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_MAX_CONCURRENT_CONNECTIONS, Long.TYPE, DatabaseDescriptor::setNativeTransportMaxConcurrentConnections, DatabaseDescriptor::getNativeTransportMaxConcurrentConnections);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_MAX_CONCURRENT_CONNECTIONS_PER_IP, Long.TYPE, DatabaseDescriptor::setNativeTransportMaxConcurrentConnectionsPerIp, DatabaseDescriptor::getNativeTransportMaxConcurrentConnectionsPerIp);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_MAX_REQUESTS_PER_SECOND, Integer.TYPE, DatabaseDescriptor::setNativeTransportMaxRequestsPerSecond, DatabaseDescriptor::getNativeTransportMaxRequestsPerSecond);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_MAX_THREADS, Integer.TYPE, DatabaseDescriptor::setNativeTransportMaxThreads, DatabaseDescriptor::getNativeTransportMaxThreads);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_PORT, Integer.TYPE, DatabaseDescriptor::setNativeTransportPort, DatabaseDescriptor::getNativeTransportPort);
        visitor.visit(ConfigFields.NATIVE_TRANSPORT_RATE_LIMITING_ENABLED, Boolean.TYPE, DatabaseDescriptor::setNativeTransportRateLimitingEnabled, DatabaseDescriptor::getNativeTransportRateLimitingEnabled);
        visitor.visit(ConfigFields.PARTITION_DENYLIST_ENABLED, Boolean.TYPE, DatabaseDescriptor::setPartitionDenylistEnabled, DatabaseDescriptor::getPartitionDenylistEnabled);
        visitor.visit(ConfigFields.PAXOS_CONTENTION_MAX_WAIT, String.class, DatabaseDescriptor::setPaxosContentionMaxWait, DatabaseDescriptor::getPaxosContentionMaxWait);
        visitor.visit(ConfigFields.PAXOS_CONTENTION_MIN_DELTA, String.class, DatabaseDescriptor::setPaxosContentionMinDelta, DatabaseDescriptor::getPaxosContentionMinDelta);
        visitor.visit(ConfigFields.PAXOS_CONTENTION_MIN_WAIT, String.class, DatabaseDescriptor::setPaxosContentionMinWait, DatabaseDescriptor::getPaxosContentionMinWait);
        visitor.visit(ConfigFields.PAXOS_CONTENTION_WAIT_RANDOMIZER, String.class, DatabaseDescriptor::setPaxosContentionWaitRandomizer, DatabaseDescriptor::getPaxosContentionWaitRandomizer);
        visitor.visit(ConfigFields.PAXOS_ON_LINEARIZABILITY_VIOLATIONS, Config.PaxosOnLinearizabilityViolation.class, DatabaseDescriptor::setPaxosOnLinearizabilityViolations, null);
        visitor.visit(ConfigFields.PAXOS_REPAIR_ENABLED, Boolean.TYPE, DatabaseDescriptor::setPaxosRepairEnabled, null);
        visitor.visit(ConfigFields.PAXOS_REPAIR_PARALLELISM, Integer.TYPE, DatabaseDescriptor::setPaxosRepairParallelism, DatabaseDescriptor::getPaxosRepairParallelism);
        visitor.visit(ConfigFields.PAXOS_STATE_PURGING, Config.PaxosStatePurging.class, DatabaseDescriptor::setPaxosStatePurging, null);
        visitor.visit(ConfigFields.PAXOS_VARIANT, Config.PaxosVariant.class, DatabaseDescriptor::setPaxosVariant, DatabaseDescriptor::getPaxosVariant);
        visitor.visit(ConfigFields.PERMISSIONS_CACHE_ACTIVE_UPDATE, Boolean.TYPE, DatabaseDescriptor::setPermissionsCacheActiveUpdate, DatabaseDescriptor::getPermissionsCacheActiveUpdate);
        visitor.visit(ConfigFields.PERMISSIONS_CACHE_MAX_ENTRIES, Integer.TYPE, DatabaseDescriptor::setPermissionsCacheMaxEntries, DatabaseDescriptor::getPermissionsCacheMaxEntries);
        visitor.visit(ConfigFields.PHI_CONVICT_THRESHOLD, Double.TYPE, DatabaseDescriptor::setPhiConvictThreshold, DatabaseDescriptor::getPhiConvictThreshold);
        visitor.visit(ConfigFields.RANGE_TOMBSTONE_LIST_GROWTH_FACTOR, Double.TYPE, DatabaseDescriptor::setRangeTombstoneListGrowthFactor, DatabaseDescriptor::getRangeTombstoneListGrowthFactor);
        visitor.visit(ConfigFields.READ_THRESHOLDS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setReadThresholdsEnabled, DatabaseDescriptor::getReadThresholdsEnabled);
        visitor.visit(ConfigFields.REPAIRED_DATA_TRACKING_FOR_PARTITION_READS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setRepairedDataTrackingForPartitionReadsEnabled, DatabaseDescriptor::getRepairedDataTrackingForPartitionReadsEnabled);
        visitor.visit(ConfigFields.REPAIRED_DATA_TRACKING_FOR_RANGE_READS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setRepairedDataTrackingForRangeReadsEnabled, DatabaseDescriptor::getRepairedDataTrackingForRangeReadsEnabled);
        visitor.visit(ConfigFields.REPAIR_COMMAND_POOL_FULL_STRATEGY, Config.RepairCommandPoolFullStrategy.class, null, DatabaseDescriptor::getRepairCommandPoolFullStrategy);
        visitor.visit(ConfigFields.REPAIR_COMMAND_POOL_SIZE, Integer.TYPE, null, DatabaseDescriptor::getRepairCommandPoolSize);
        visitor.visit(ConfigFields.REPAIR_REQUEST_TIMEOUT, DurationSpec.LongMillisecondsBound.class, DatabaseDescriptor::setRepairRequestTimeout, DatabaseDescriptor::getRepairRequestTimeout);
        visitor.visit(ConfigFields.REPAIR_STATE_EXPIRES, DurationSpec.LongNanosecondsBound.class, DatabaseDescriptor::setRepairStateExpires, DatabaseDescriptor::getRepairStateExpires);
        visitor.visit(ConfigFields.REPAIR_STATE_SIZE, Integer.TYPE, DatabaseDescriptor::setRepairStateSize, DatabaseDescriptor::getRepairStateSize);
        visitor.visit(ConfigFields.ROLES_CACHE_ACTIVE_UPDATE, Boolean.TYPE, DatabaseDescriptor::setRolesCacheActiveUpdate, DatabaseDescriptor::getRolesCacheActiveUpdate);
        visitor.visit(ConfigFields.ROLES_CACHE_MAX_ENTRIES, Integer.TYPE, DatabaseDescriptor::setRolesCacheMaxEntries, DatabaseDescriptor::getRolesCacheMaxEntries);
        visitor.visit(ConfigFields.ROW_CACHE_CLASS_NAME, String.class, null, DatabaseDescriptor::getRowCacheClassName);
        visitor.visit(ConfigFields.ROW_CACHE_KEYS_TO_SAVE, Integer.TYPE, DatabaseDescriptor::setRowCacheKeysToSave, DatabaseDescriptor::getRowCacheKeysToSave);
        visitor.visit(ConfigFields.ROW_INDEX_READ_SIZE_FAIL_THRESHOLD, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setRowIndexReadSizeFailThreshold, DatabaseDescriptor::getRowIndexReadSizeFailThreshold);
        visitor.visit(ConfigFields.ROW_INDEX_READ_SIZE_WARN_THRESHOLD, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setRowIndexReadSizeWarnThreshold, DatabaseDescriptor::getRowIndexReadSizeWarnThreshold);
        visitor.visit(ConfigFields.SKIP_PAXOS_REPAIR_ON_TOPOLOGY_CHANGE, Boolean.TYPE, DatabaseDescriptor::setSkipPaxosRepairOnTopologyChange, null);
        visitor.visit(ConfigFields.SKIP_STREAM_DISK_SPACE_CHECK, Boolean.TYPE, DatabaseDescriptor::setSkipStreamDiskSpaceCheck, DatabaseDescriptor::getSkipStreamDiskSpaceCheck);
        visitor.visit(ConfigFields.SNAPSHOT_LINKS_PER_SECOND, Long.TYPE, DatabaseDescriptor::setSnapshotLinksPerSecond, DatabaseDescriptor::getSnapshotLinksPerSecond);
        visitor.visit(ConfigFields.SNAPSHOT_ON_DUPLICATE_ROW_DETECTION, Boolean.TYPE, DatabaseDescriptor::setSnapshotOnDuplicateRowDetection, null);
        visitor.visit(ConfigFields.SNAPSHOT_ON_REPAIRED_DATA_MISMATCH, Boolean.TYPE, DatabaseDescriptor::setSnapshotOnRepairedDataMismatch, null);
        visitor.visit(ConfigFields.STORAGE_PORT, Integer.TYPE, null, DatabaseDescriptor::getStoragePort);
        visitor.visit(ConfigFields.STREAMING_SLOW_EVENTS_LOG_TIMEOUT, DurationSpec.IntSecondsBound.class, null, DatabaseDescriptor::getStreamingSlowEventsLogTimeout);
        visitor.visit(ConfigFields.STREAMING_STATE_EXPIRES, DurationSpec.LongNanosecondsBound.class, DatabaseDescriptor::setStreamingStateExpires, DatabaseDescriptor::getStreamingStateExpires);
        visitor.visit(ConfigFields.STREAMING_STATE_SIZE, DataStorageSpec.LongBytesBound.class, DatabaseDescriptor::setStreamingStateSize, DatabaseDescriptor::getStreamingStateSize);
        visitor.visit(ConfigFields.STREAMING_STATS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setStreamingStatsEnabled, DatabaseDescriptor::getStreamingStatsEnabled);
        visitor.visit(ConfigFields.TABLE_COUNT_WARN_THRESHOLD, Integer.TYPE, DatabaseDescriptor::setTableCountWarnThreshold, null);
        visitor.visit(ConfigFields.TOMBSTONE_FAILURE_THRESHOLD, Integer.TYPE, DatabaseDescriptor::setTombstoneFailureThreshold, DatabaseDescriptor::getTombstoneFailureThreshold);
        visitor.visit(ConfigFields.TOMBSTONE_WARN_THRESHOLD, Integer.TYPE, DatabaseDescriptor::setTombstoneWarnThreshold, DatabaseDescriptor::getTombstoneWarnThreshold);
        visitor.visit(ConfigFields.TRANSFER_HINTS_ON_DECOMMISSION, Boolean.TYPE, DatabaseDescriptor::setTransferHintsOnDecommission, DatabaseDescriptor::getTransferHintsOnDecommission);
        visitor.visit(ConfigFields.TRICKLE_FSYNC, Boolean.TYPE, null, DatabaseDescriptor::getTrickleFsync);
        visitor.visit(ConfigFields.USER_FUNCTION_TIMEOUT_POLICY, Config.UserFunctionTimeoutPolicy.class, DatabaseDescriptor::setUserFunctionTimeoutPolicy, DatabaseDescriptor::getUserFunctionTimeoutPolicy);
        visitor.visit(ConfigFields.USE_STATEMENTS_ENABLED, Boolean.TYPE, DatabaseDescriptor::setUseStatementsEnabled, DatabaseDescriptor::getUseStatementsEnabled);
    }
}
