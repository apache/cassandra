#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version: 2.1

default_env_vars: &default_env_vars
    ANT_HOME: /usr/share/ant
    JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    LANG: en_US.UTF-8
    KEEP_TEST_DIR: true
    DEFAULT_DIR: /home/cassandra/cassandra-dtest
    PYTHONIOENCODING: utf-8
    PYTHONUNBUFFERED: true
    CASS_DRIVER_NO_EXTENSIONS: true
    CASS_DRIVER_NO_CYTHON: true
    #Skip all syncing to disk to avoid performance issues in flaky CI environments
    CASSANDRA_SKIP_SYNC: true
    DTEST_REPO: git://github.com/apache/cassandra-dtest.git
    DTEST_BRANCH: trunk
    CCM_MAX_HEAP_SIZE: 1024M
    CCM_HEAP_NEWSIZE: 256M
    # The Ant test target to run, for example:
    # REPEATED_UTEST_TARGET: testsome
    # REPEATED_UTEST_TARGET: test-jvm-dtest-some
    # REPEATED_UTEST_TARGET: test-cdc
    # REPEATED_UTEST_TARGET: test-compression
    # REPEATED_UTEST_TARGET: test-system-keyspace-directory
    REPEATED_UTEST_TARGET: testsome
    # The name of JUnit class to be run multiple times, for example:
    # REPEATED_UTEST_CLASS: org.apache.cassandra.cql3.ViewTest
    # REPEATED_UTEST_CLASS: org.apache.cassandra.distributed.test.PagingTest
    REPEATED_UTEST_CLASS:
    # The optional specific methods within REPEATED_UTEST_CLASS to be run, for example:
    # REPEATED_UTEST_METHODS: testCompoundPartitionKey
    # REPEATED_UTEST_METHODS: testCompoundPartitionKey,testStaticTable
    # Please note that some Ant targets will ignore the -Dtest.methods argument produced by this.
    REPEATED_UTEST_METHODS:
    # The number of times that the repeated JUnit test should be run
    REPEATED_UTEST_COUNT: 100
    # Whether the test iteration should stop on the first failure
    REPEATED_UTEST_STOP_ON_FAILURE: false
    # A Python dtest to be run multiple times, for example:
    # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py
    # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py::TestCqlshSmoke
    # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py::TestCqlshSmoke::test_create_index
    REPEATED_DTEST_NAME:
    # Whether the repeated Python dtest should use vnodes
    REPEATED_DTEST_VNODES: false
    # The number of times that the repeated Python dtest should be run
    REPEATED_DTEST_COUNT: 100
    # Whether the test iteration should stop on the first failure
    REPEATED_DTEST_STOP_ON_FAILURE: false

j8_par_executor: &j8_par_executor
  executor:
    name: java8-executor
    #exec_resource_class: xlarge
  parallelism: 4

j8_small_par_executor: &j8_small_par_executor
  executor:
    name: java8-executor
    #exec_resource_class: xlarge
  parallelism: 1

j8_small_executor: &j8_small_executor
  executor:
    name: java8-executor
    exec_resource_class: medium
  parallelism: 1

j8_medium_par_executor: &j8_medium_par_executor
  executor:
    name: java8-executor
    #exec_resource_class: xlarge
  parallelism: 1

j8_seq_executor: &j8_seq_executor
  executor:
    name: java8-executor
    #exec_resource_class: xlarge
  parallelism: 1 # sequential, single container tests: no parallelism benefits

j11_par_executor: &j11_par_executor
  executor:
    name: java11-executor
    #exec_resource_class: xlarge
  parallelism: 4

j11_small_par_executor: &j11_small_par_executor
  executor:
    name: java11-executor
    #exec_resource_class: xlarge
  parallelism: 1

j11_small_executor: &j11_small_executor
  executor:
    name: java11-executor
    #exec_resource_class: medium
  parallelism: 1

j8_with_dtests_jobs: &j8_with_dtests_jobs
  jobs:
    - j8_build
    # Java 8 unit tests will be run automatically
    - j8_unit_tests:
        requires:
          - j8_build
    - j8_jvm_dtests:
        requires:
          - j8_build
    # Java 11 unit tests (on request, currently not working)
    - start_j11_unit_tests:
        type: approval
    - j11_unit_tests:
        requires:
          - start_j11_unit_tests
          - j8_build
    # specialized unit tests (all run on request using Java 8)
    - j8_cqlshlib_tests:
        requires:
          - j8_build
    - start_utests_long:
        type: approval
    - utests_long:
        requires:
          - start_utests_long
          - j8_build
    - start_utests_compression:
        type: approval
    - utests_compression:
        requires:
          - start_utests_compression
          - j8_build
    - start_utests_stress:
        type: approval
    - utests_stress:
        requires:
          - start_utests_stress
          - j8_build
    - start_utests_fqltool:
        type: approval
    - utests_fqltool:
        requires:
          - start_utests_fqltool
          - j8_build
    - start_utests_system_keyspace_directory:
        type: approval
    - utests_system_keyspace_directory:
        requires:
          - start_utests_system_keyspace_directory
          - j8_build
    - start_jvm_upgrade_dtest:
        type: approval
    - j8_dtest_jars_build:
        requires:
          - j8_build
          - start_jvm_upgrade_dtest
    - j8_jvm_upgrade_dtests:
        requires:
          - j8_dtest_jars_build
    # Java 8 dtests (on request)
    - start_j8_dtests:
        type: approval
    - j8_dtests-with-vnodes:
        requires:
          - start_j8_dtests
          - j8_build
    - j8_dtests-no-vnodes:
        requires:
          - start_j8_dtests
          - j8_build
    # Java 11 dtests (on request)
    - start_j11_dtests:
        type: approval
    - j11_dtests-with-vnodes:
        requires:
        - start_j11_dtests
        - j8_build
    - j11_dtests-no-vnodes:
        requires:
        - start_j11_dtests
        - j8_build
    # Java 8 upgrade tests
    - start_upgrade_tests:
        type: approval
    - j8_upgradetests-no-vnodes:
        requires:
          - start_upgrade_tests
          - j8_build
    - start_j8_cqlsh_tests-with-vnodes:
        type: approval
    - j8_cqlsh-dtests-py2-with-vnodes:
        requires:
        - start_j8_cqlsh_tests-with-vnodes
        - j8_build
    - j8_cqlsh-dtests-py3-with-vnodes:
        requires:
        - start_j8_cqlsh_tests-with-vnodes
        - j8_build
    - j8_cqlsh-dtests-py38-with-vnodes:
        requires:
        - start_j8_cqlsh_tests-with-vnodes
        - j8_build
    - start_j8_cqlsh_tests-no-vnodes:
        type: approval
    - j8_cqlsh-dtests-py2-no-vnodes:
        requires:
        - start_j8_cqlsh_tests-no-vnodes
        - j8_build
    - j8_cqlsh-dtests-py3-no-vnodes:
        requires:
        - start_j8_cqlsh_tests-no-vnodes
        - j8_build
    - j8_cqlsh-dtests-py38-no-vnodes:
        requires:
          - start_j8_cqlsh_tests-no-vnodes
          - j8_build
    - start_j11_cqlsh_tests-with-vnodes:
        type: approval
    - j11_cqlsh-dtests-py2-with-vnodes:
        requires:
        - start_j11_cqlsh_tests-with-vnodes
        - j8_build
    - j11_cqlsh-dtests-py3-with-vnodes:
        requires:
        - start_j11_cqlsh_tests-with-vnodes
        - j8_build
    - j11_cqlsh-dtests-py38-with-vnodes:
        requires:
          - start_j11_cqlsh_tests-with-vnodes
          - j8_build
    - start_j11_cqlsh_tests-no-vnodes:
        type: approval
    - j11_cqlsh-dtests-py2-no-vnodes:
        requires:
        - start_j11_cqlsh_tests-no-vnodes
        - j8_build
    - j11_cqlsh-dtests-py3-no-vnodes:
        requires:
        - start_j11_cqlsh_tests-no-vnodes
        - j8_build
    - j11_cqlsh-dtests-py38-no-vnodes:
        requires:
          - start_j11_cqlsh_tests-no-vnodes
          - j8_build
    # Java 8 repeated utest (on request)
    - start_j8_repeated-utest:
        type: approval
    - j8_repeated-utest:
        requires:
          - start_j8_repeated-utest
          - j8_build
    # Java 11 repeated utest (on request)
    - start_j11_repeated-utest:
        type: approval
    - j11_repeated-utest:
        requires:
          - start_j11_repeated-utest
          - j8_build
    # Java 8 repeated dtest (on request)
    - start_j8_repeated-dtest:
        type: approval
    - j8_repeated-dtest:
        requires:
          - start_j8_repeated-dtest
          - j8_build
    # Java 11 repeated dtest (on request)
    - start_j11_repeated-dtest:
        type: approval
    - j11_repeated-dtest:
        requires:
          - start_j11_repeated-dtest
          - j8_build

j11_with_dtests_jobs: &j11_with_dtests_jobs
  jobs:
    - j11_build
    # Java 11 unit tests
    - j11_unit_tests:
        requires:
          - j11_build
    - j11_jvm_dtests:
        requires:
          - j11_build
    - j11_cqlshlib_tests:
        requires:
          - j11_build
    # Java 11 dtests (on request)
    - start_j11_dtests:
        type: approval
    - j11_dtests-with-vnodes:
        requires:
          - start_j11_dtests
          - j11_build
    - j11_dtests-no-vnodes:
        requires:
          - start_j11_dtests
          - j11_build
    - start_j11_cqlsh_tests-with-vnodes:
        type: approval
    - j11_cqlsh-dtests-py2-with-vnodes:
        requires:
        - start_j11_cqlsh_tests-with-vnodes
        - j11_build
    - j11_cqlsh-dtests-py3-with-vnodes:
        requires:
        - start_j11_cqlsh_tests-with-vnodes
        - j11_build
    - j11_cqlsh-dtests-py38-with-vnodes:
        requires:
          - start_j11_cqlsh_tests-with-vnodes
          - j11_build
    - start_j11_cqlsh_tests-no-vnodes:
        type: approval
    - j11_cqlsh-dtests-py2-no-vnodes:
        requires:
        - start_j11_cqlsh_tests-no-vnodes
        - j11_build
    - j11_cqlsh-dtests-py3-no-vnodes:
        requires:
        - start_j11_cqlsh_tests-no-vnodes
        - j11_build
    - j11_cqlsh-dtests-py38-no-vnodes:
        requires:
          - start_j11_cqlsh_tests-no-vnodes
          - j11_build
    # Java 11 repeated utest (on request)
    - start_j11_repeated-utest:
        type: approval
    - j11_repeated-utest:
        requires:
          - start_j11_repeated-utest
          - j11_build
    # Java 11 repeated dtest (on request)
    - start_j11_repeated-dtest:
        type: approval
    - j11_repeated-dtest:
        requires:
          - start_j11_repeated-dtest
          - j11_build

j8_with_dtest_jobs_only: &j8_with_dtest_jobs_only
  jobs:
    - j8_build
    - j8_dtests-with-vnodes:
        requires:
          - j8_build
    - j8_dtests-no-vnodes:
        requires:
          - j8_build

j11_with_dtest_jobs_only: &j11_with_dtest_jobs_only
  jobs:
    - build
    - j11-with-vnodes:
        requires:
          - j11_build
    - j11_dtests-no-vnodes:
        requires:
          - j11_build

workflows:
    version: 2
    java8_build_and_run_tests: *j8_with_dtests_jobs
#    java8_build_and_run_tests: *j8_with_dtest_jobs_only
    java11_build_and_run_tests: *j11_with_dtests_jobs
#    java11_build_and_run_tests: *j11_with_dtest_jobs_only

executors:
  java8-executor:
    parameters:
      exec_resource_class:
        type: string
        default: medium
    docker:
      - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304
    resource_class: << parameters.exec_resource_class >>
    working_directory: ~/
    shell: /bin/bash -eo pipefail -l
    environment:
      <<: *default_env_vars
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64

  java11-executor:
    parameters:
      exec_resource_class:
        type: string
        default: medium
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:20210304
    resource_class: << parameters.exec_resource_class >>
    working_directory: ~/
    shell: /bin/bash -eo pipefail -l
    environment:
      <<: *default_env_vars
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      CASSANDRA_USE_JDK11: true

build_common: &build_common
  parallelism: 1 # This job doesn't benefit from parallelism
  steps:
    - log_environment
    - clone_cassandra
    - build_cassandra
    - run_eclipse_warnings
    - persist_to_workspace:
        root: /home/cassandra
        paths:
          - cassandra
          - .m2

jobs:
  j8_build:
    executor: java8-executor
    <<: *build_common

  j11_build:
    executor: java11-executor
    <<: *build_common

  j8_dtest_jars_build:
    executor: java8-executor
    parallelism: 1
    steps:
      - attach_workspace:
          at: /home/cassandra
      - build_cassandra_dtest_jars
      - persist_to_workspace:
          root: /home/cassandra
          paths:
            - dtest_jars

  j8_unit_tests:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers
      - log_environment
      - run_parallel_junit_tests

  j8_jvm_dtests:
    <<: *j8_small_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers:
          classlistprefix: distributed
          extra_filters: "| grep -v upgrade"
      - log_environment
      - run_parallel_junit_tests:
          classlistprefix: distributed
          target: "testclasslist"

  j11_jvm_dtests:
    <<: *j11_small_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers:
          classlistprefix: distributed
          extra_filters: "| grep -v upgrade"
      - log_environment
      - run_parallel_junit_tests:
          classlistprefix: distributed
          target: "testclasslist"

  j8_jvm_upgrade_dtests:
    <<: *j8_medium_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers:
          classlistprefix: distributed
          extra_filters: "| grep upgrade"
      - log_environment
      - run_parallel_junit_tests:
          classlistprefix: distributed
          target: "testclasslist"

  j11_unit_tests:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers
      - log_environment
      - run_parallel_junit_tests

  j8_cqlshlib_tests:
    <<: *j8_small_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - run_cqlshlib_tests

  j11_cqlshlib_tests:
    <<: *j11_small_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - run_cqlshlib_tests

  utests_long:
    <<: *j8_seq_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - run_junit_tests:
          target: long-test

  utests_compression:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers
      - log_environment
      - run_parallel_junit_tests:
          target: testclasslist-compression

  utests_stress:
    <<: *j8_seq_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - run_junit_tests:
          target: stress-test

  utests_fqltool:
    <<: *j8_seq_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - run_junit_tests:
          target: fqltool-test

  utests_system_keyspace_directory:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - create_junit_containers
      - log_environment
      - run_parallel_junit_tests:
          target: testclasslist-system-keyspace-directory

  j8_dtests-with-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k not cql'"
      - run_dtests:
          file_tag: j8_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'

  j11_dtests-with-vnodes:
    <<: *j11_par_executor
    steps:
    - attach_workspace:
        at: /home/cassandra
    - log_environment
    - clone_dtest
    - create_venv
    - create_dtest_containers:
        file_tag: j11_with_vnodes
        run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k not cql'"
    - run_dtests:
        file_tag: j11_with_vnodes
        pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'

  j8_dtests-no-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k not cql'"
      - run_dtests:
          file_tag: j8_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'

  j11_dtests-no-vnodes:
    <<: *j11_par_executor
    steps:
    - attach_workspace:
        at: /home/cassandra
    - log_environment
    - clone_dtest
    - create_venv
    - create_dtest_containers:
        file_tag: j11_without_vnodes
        run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k not cql'"
    - run_dtests:
        file_tag: j11_without_vnodes
        pytest_extra_args: '--skip-resource-intensive-tests'

  j8_upgradetests-no-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_upgradetests_without_vnodes
          run_dtests_extra_args: '--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all'
      - run_dtests:
          file_tag: j8_upgradetests_without_vnodes
          pytest_extra_args: '--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all'

  j8_cqlsh-dtests-py2-with-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j8_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python2.7'

  j8_cqlsh-dtests-py3-with-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j8_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'

  j8_cqlsh-dtests-py38-with-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv:
          python_version: '3.8'
      - create_dtest_containers:
          file_tag: j8_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
          python_version: '3.8'
      - run_dtests:
          file_tag: j8_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
          python_version: '3.8'

  j8_cqlsh-dtests-py2-no-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j8_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python2.7'

  j8_cqlsh-dtests-py3-no-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j8_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j8_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'

  j8_cqlsh-dtests-py38-no-vnodes:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv:
          python_version: '3.8'
      - create_dtest_containers:
          file_tag: j8_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
          python_version: '3.8'
      - run_dtests:
          file_tag: j8_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
          python_version: '3.8'

  j11_cqlsh-dtests-py2-with-vnodes:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j11_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j11_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python2.7'

  j11_cqlsh-dtests-py3-with-vnodes:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j11_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j11_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'

  j11_cqlsh-dtests-py38-with-vnodes:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv:
          python_version: '3.8'
      - create_dtest_containers:
          file_tag: j11_with_vnodes
          run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
          python_version: '3.8'
      - run_dtests:
          file_tag: j11_with_vnodes
          pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
          python_version: '3.8'

  j11_cqlsh-dtests-py2-no-vnodes:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j11_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j11_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python2.7'

  j11_cqlsh-dtests-py3-no-vnodes:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - create_dtest_containers:
          file_tag: j11_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
      - run_dtests:
          file_tag: j11_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'

  j11_cqlsh-dtests-py38-no-vnodes:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv:
          python_version: '3.8'
      - create_dtest_containers:
          file_tag: j11_without_vnodes
          run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
          python_version: '3.8'
      - run_dtests:
          file_tag: j11_without_vnodes
          pytest_extra_args: '--skip-resource-intensive-tests'
          extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
          python_version: '3.8'

  j8_repeated-utest:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - log_environment
      - run_repeated_utest

  j11_repeated-utest:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - log_environment
      - run_repeated_utest

  j8_repeated-dtest:
    <<: *j8_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - clone_dtest
      - create_venv
      - run_repeated_dtest

  j11_repeated-dtest:
    <<: *j11_par_executor
    steps:
      - attach_workspace:
          at: /home/cassandra
      - log_environment
      - clone_dtest
      - create_venv
      - run_repeated_dtest

commands:
  log_environment:
    steps:
    - run:
        name: Log Environment Information
        command: |
          echo '*** id ***'
          id
          echo '*** cat /proc/cpuinfo ***'
          cat /proc/cpuinfo
          echo '*** free -m ***'
          free -m
          echo '*** df -m ***'
          df -m
          echo '*** ifconfig -a ***'
          ifconfig -a
          echo '*** uname -a ***'
          uname -a
          echo '*** mount ***'
          mount
          echo '*** env ***'
          env
          echo '*** java ***'
          which java
          java -version

  clone_cassandra:
    steps:
    - run:
        name: Clone Cassandra Repository (via git)
        command: |
          git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH git://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git ~/cassandra

  clone_dtest:
    steps:
    - run:
        name: Clone Cassandra dtest Repository (via git)
        command: |
          git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO ~/cassandra-dtest

  build_cassandra:
    steps:
    - run:
        name: Build Cassandra
        command: |
          export PATH=$JAVA_HOME/bin:$PATH
          cd ~/cassandra
          # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
          for x in $(seq 1 3); do
              ${ANT_HOME}/bin/ant clean realclean jar
              RETURN="$?"
              if [ "${RETURN}" -eq "0" ]; then
                  break
              fi
          done
          # Exit, if we didn't build successfully
          if [ "${RETURN}" -ne "0" ]; then
              echo "Build failed with exit code: ${RETURN}"
              exit ${RETURN}
          fi
        no_output_timeout: 15m

  build_cassandra_dtest_jars:
    steps:
    - run:
        name: Build Cassandra DTest jars
        command: |
          export PATH=$JAVA_HOME/bin:$PATH
          cd ~/cassandra
          mkdir ~/dtest_jars
          git remote add apache git://github.com/apache/cassandra.git
          for branch in cassandra-2.2 cassandra-3.0 cassandra-3.11 trunk; do
            # check out the correct cassandra version:
            git remote set-branches --add apache '$branch'
            git fetch --depth 1 apache $branch
            git checkout $branch
            git clean -fd
            # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
            for x in $(seq 1 3); do
                ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar
                RETURN="$?"
                if [ "${RETURN}" -eq "0" ]; then
                    cp build/dtest*.jar ~/dtest_jars
                    break
                fi
            done
            # Exit, if we didn't build successfully
            if [ "${RETURN}" -ne "0" ]; then
                echo "Build failed with exit code: ${RETURN}"
                exit ${RETURN}
            fi
          done
          # and build the dtest-jar for the branch under test
          ${ANT_HOME}/bin/ant realclean
          git checkout origin/$CIRCLE_BRANCH
          git clean -fd
          for x in $(seq 1 3); do
              ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar
              RETURN="$?"
              if [ "${RETURN}" -eq "0" ]; then
                  cp build/dtest*.jar ~/dtest_jars
                  break
              fi
          done
          # Exit, if we didn't build successfully
          if [ "${RETURN}" -ne "0" ]; then
              echo "Build failed with exit code: ${RETURN}"
              exit ${RETURN}
          fi
          ls -l ~/dtest_jars
        no_output_timeout: 15m

  run_eclipse_warnings:
    steps:
    - run:
        name: Run eclipse-warnings
        command: |
          export PATH=$JAVA_HOME/bin:$PATH
          cd ~/cassandra
          ant eclipse-warnings

  create_junit_containers:
    parameters:
      classlistprefix:
        type: string
        default: unit
      extra_filters:
        type: string
        default: ""
    steps:
    - run:
        name: Determine <<parameters.classlistprefix>> Tests to Run
        command: |
          # reminder: this code (along with all the steps) is independently executed on every circle container
          # so the goal here is to get the circleci script to return the tests *this* container will run
          # which we do via the `circleci` cli tool.

          rm -fr ~/cassandra-dtest/upgrade_tests
          echo "***java tests***"

          # get all of our unit test filenames
          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/<<parameters.classlistprefix>>/**/*.java" > /tmp/all_java_unit_tests.txt

          # split up the unit tests into groups based on the number of containers we have
          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt
          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/<<parameters.classlistprefix>>/;;g" | grep "Test\.java$" <<parameters.extra_filters>> > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"
          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

        no_output_timeout: 15m

  run_junit_tests:
    parameters:
      target:
        type: string
      no_output_timeout:
        type: string
        default: 15m
    steps:
    - run:
        name: Run Unit Tests (<<parameters.target>>)
        command: |
          export PATH=$JAVA_HOME/bin:$PATH
          time mv ~/cassandra /tmp
          cd /tmp/cassandra
          if [ -d ~/dtest_jars ]; then
            cp ~/dtest_jars/dtest* /tmp/cassandra/build/
          fi
          ant <<parameters.target>>
        no_output_timeout: <<parameters.no_output_timeout>>
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        path: /tmp/cassandra/build/test/output
        destination: junitxml
    - store_artifacts:
        path: /tmp/cassandra/build/test/logs
        destination: logs

  run_cqlshlib_tests:
    parameters:
      no_output_timeout:
        type: string
        default: 15m
    steps:
    - run:
        name: Run cqlshlib Unit Tests
        command: |
          export PATH=$JAVA_HOME/bin:$PATH
          time mv ~/cassandra /tmp
          cd /tmp/cassandra/pylib
          ./cassandra-cqlsh-tests.sh ..
        no_output_timeout: <<parameters.no_output_timeout>>
    - store_test_results:
        path: /tmp/cassandra/pylib

  run_parallel_junit_tests:
    parameters:
      target:
        type: string
        default: testclasslist
      no_output_timeout:
        type: string
        default: 15m
      classlistprefix:
        type: string
        default: unit
    steps:
    - run:
        name: Run Unit Tests (<<parameters.target>>)
        command: |
          set -x
          export PATH=$JAVA_HOME/bin:$PATH
          time mv ~/cassandra /tmp
          cd /tmp/cassandra
          if [ -d ~/dtest_jars ]; then
            cp ~/dtest_jars/dtest* /tmp/cassandra/build/
          fi
          test_timeout=$(grep 'name="test.<<parameters.classlistprefix>>.timeout"' build.xml | awk -F'"' '{print $4}' || true)
          if [ -z "$test_timeout" ]; then
            test_timeout=$(grep 'name="test.timeout"' build.xml | awk -F'"' '{print $4}')
          fi
          ant <<parameters.target>> -Dtest.timeout="$test_timeout" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt  -Dtest.classlistprefix=<<parameters.classlistprefix>>
        no_output_timeout: <<parameters.no_output_timeout>>
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        path: /tmp/cassandra/build/test/output
        destination: junitxml
    - store_artifacts:
        path: /tmp/cassandra/build/test/logs
        destination: logs

  create_venv:
    parameters:
      python_version:
        type: enum
        default: "3.6"
        enum: ["3.6", "3.7", "3.8"]
    steps:
    - run:
        name: Configure virtualenv and python Dependencies
        command: |
          # note, this should be super quick as all dependencies should be pre-installed in the docker image
          # if additional dependencies were added to requirmeents.txt and the docker image hasn't been updated
          # we'd have to install it here at runtime -- which will make things slow, so do yourself a favor and
          # rebuild the docker image! (it automatically pulls the latest requirements.txt on build)
          source ~/env<<parameters.python_version>>/bin/activate
          export PATH=$JAVA_HOME/bin:$PATH
          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt
          pip3 uninstall -y cqlsh
          pip3 freeze

  create_dtest_containers:
    parameters:
      file_tag:
        type: string
      run_dtests_extra_args:
        type: string
        default: ''
      extra_env_args:
        type: string
        default: ''
      tests_filter_pattern:
        type: string
        default: ''
      python_version:
        type: enum
        default: "3.6"
        enum: ["3.6", "3.7", "3.8"]
    steps:
    - run:
        name: Determine Tests to Run (<<parameters.file_tag>>)
        no_output_timeout: 5m
        command: |
          # reminder: this code (along with all the steps) is independently executed on every circle container
          # so the goal here is to get the circleci script to return the tests *this* container will run
          # which we do via the `circleci` cli tool.

          cd cassandra-dtest
          source ~/env<<parameters.python_version>>/bin/activate
          export PATH=$JAVA_HOME/bin:$PATH

          if [ -n '<<parameters.extra_env_args>>' ]; then
            export <<parameters.extra_env_args>>
          fi

          echo "***Collected DTests (<<parameters.file_tag>>)***"
          set -eo pipefail && ./run_dtests.py <<parameters.run_dtests_extra_args>> --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_<<parameters.file_tag>>_raw --cassandra-dir=../cassandra
          if [ -z '<<parameters.tests_filter_pattern>>' ]; then
            mv /tmp/all_dtest_tests_<<parameters.file_tag>>_raw /tmp/all_dtest_tests_<<parameters.file_tag>>
          else
            grep -e '<<parameters.tests_filter_pattern>>' /tmp/all_dtest_tests_<<parameters.file_tag>>_raw > /tmp/all_dtest_tests_<<parameters.file_tag>> || { echo "Filter did not match any tests! Exiting build."; exit 0; }
          fi
          set -eo pipefail && circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_<<parameters.file_tag>> > /tmp/split_dtest_tests_<<parameters.file_tag>>.txt
          cat /tmp/split_dtest_tests_<<parameters.file_tag>>.txt | tr '\n' ' ' > /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
          cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt

  run_dtests:
    parameters:
      file_tag:
        type: string
      pytest_extra_args:
        type: string
        default: ''
      extra_env_args:
        type: string
        default: ''
      python_version:
        type: enum
        default: "3.6"
        enum: ["3.6", "3.7", "3.8"]
    steps:
      - run:
          name: Run dtests (<<parameters.file_tag>>)
          no_output_timeout: 15m
          command: |
            echo "cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt"
            cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt

            source ~/env<<parameters.python_version>>/bin/activate
            export PATH=$JAVA_HOME/bin:$PATH
            if [ -n '<<parameters.extra_env_args>>' ]; then
              export <<parameters.extra_env_args>>
            fi

            java -version
            cd ~/cassandra-dtest
            mkdir -p /tmp/dtest

            echo "env: $(env)"
            echo "** done env"
            mkdir -p /tmp/results/dtests
            # we need the "set -o pipefail" here so that the exit code that circleci will actually use is from pytest and not the exit code from tee
            export SPLIT_TESTS=`cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt`
            set -o pipefail && cd ~/cassandra-dtest && pytest <<parameters.pytest_extra_args>> --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result_<<parameters.file_tag>>.xml -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt
      - store_test_results:
          path: /tmp/results
      - store_artifacts:
          path: /tmp/dtest
          destination: dtest_<<parameters.file_tag>>
      - store_artifacts:
          path: ~/cassandra-dtest/logs
          destination: dtest_<<parameters.file_tag>>_logs

  run_repeated_utest:
    steps:
      - run:
          name: Run repeated utest
          no_output_timeout: 15m
          command: |
            if [ "$REPEATED_UTEST_CLASS" == "<nil>" ]; then
              echo "Repeated utest class name hasn't been defined, exiting without running any test"
            elif [ "$REPEATED_UTEST_COUNT" == "<nil>" ]; then
              echo "Repeated utest count hasn't been defined, exiting without running any test"
            elif [ "$REPEATED_UTEST_COUNT" -le 0 ]; then
              echo "Repeated utest count is lesser or equals than zero, exiting without running any test"
            else
            
              # Calculate the number of test iterations to be run by the current parallel runner.
              # Since we are running the same test multiple times there is no need to use `circleci tests split`.
              count=$((REPEATED_UTEST_COUNT / CIRCLE_NODE_TOTAL))
              if (($CIRCLE_NODE_INDEX < (REPEATED_UTEST_COUNT % CIRCLE_NODE_TOTAL))); then
                count=$((count+1))
              fi

              if (($count <= 0)); then
                echo "No tests to run in this runner"
              else
                echo "Running $REPEATED_UTEST_TARGET $REPEATED_UTEST_CLASS $REPEATED_UTEST_METHODS $count times"

                set -x
                export PATH=$JAVA_HOME/bin:$PATH
                time mv ~/cassandra /tmp
                cd /tmp/cassandra
                if [ -d ~/dtest_jars ]; then
                  cp ~/dtest_jars/dtest* /tmp/cassandra/build/
                fi

                target=$REPEATED_UTEST_TARGET
                class_path=$REPEATED_UTEST_CLASS
                class_name="${class_path##*.}"

                # Prepare the -Dtest.name argument.
                # It can be the fully qualified class name or the short class name, depending on the target.
                if [[ $target == "test" || \
                      $target == "test-cdc" || \
                      $target == "test-compression" || \
                      $target == "test-system-keyspace-directory" ]]; then
                  name="-Dtest.name=$class_name"
                else
                  name="-Dtest.name=$class_path"
                fi

                # Prepare the -Dtest.methods argument, which is optional
                if [ "$REPEATED_UTEST_METHODS" == "<nil>" ]; then
                  methods=""
                else
                  methods="-Dtest.methods=$REPEATED_UTEST_METHODS"
                fi

                # Run the test target as many times as requested collecting the exit code,
                # stopping the iteration only if REPEATED_UTEST_STOP_ON_FAILURE is set.
                exit_code="$?"
                for i in $(seq -w 1 $count); do

                  echo "Running test iteration $i of $count"

                  # run the test
                  status="passes"
                  if !( set -o pipefail && ant $target $name $methods -Dno-build-test=true | tee stdout.txt ); then
                    status="fails"
                    exit_code=1
                  fi

                  # move the stdout output file
                  dest=/tmp/results/repeated_utest/stdout/${status}/${i}
                  mkdir -p $dest
                  mv stdout.txt $dest/${REPEATED_UTEST_TARGET}-${REPEATED_UTEST_CLASS}.txt

                  # move the XML output files
                  source=build/test/output
                  dest=/tmp/results/repeated_utest/output/${status}/${i}
                  mkdir -p $dest
                  if [[ -d $source && -n "$(ls $source)" ]]; then
                    mv $source/* $dest/
                  fi

                  # move the log files
                  source=build/test/logs
                  dest=/tmp/results/repeated_utest/logs/${status}/${i}
                  mkdir -p $dest
                  if [[ -d $source && -n "$(ls $source)" ]]; then
                    mv $source/* $dest/
                  fi

                  # maybe stop iterations on test failure
                  if [[ $REPEATED_UTEST_STOP_ON_FAILURE = true ]] && (( $exit_code > 0 )); then
                    break
                  fi
                done

                (exit ${exit_code})
              fi
            fi
      - store_test_results:
          path: /tmp/results/repeated_utest/output
      - store_artifacts:
          path: /tmp/results/repeated_utest/stdout
          destination: stdout
      - store_artifacts:
          path: /tmp/results/repeated_utest/output
          destination: junitxml
      - store_artifacts:
          path: /tmp/results/repeated_utest/logs
          destination: logs

  run_repeated_dtest:
    steps:
      - run:
          name: Run repeated dtest
          no_output_timeout: 15m
          command: |
            if [ "$REPEATED_DTEST_NAME" == "<nil>" ]; then
              echo "Repeated dtest name hasn't been defined, exiting without running any test"
            elif [ "$REPEATED_DTEST_COUNT" == "<nil>" ]; then
              echo "Repeated dtest count hasn't been defined, exiting without running any test"
            elif [ "$REPEATED_DTEST_COUNT" -le 0 ]; then
              echo "Repeated dtest count is lesser or equals than zero, exiting without running any test"
            else

              # Calculate the number of test iterations to be run by the current parallel runner.
              # Since we are running the same test multiple times there is no need to use `circleci tests split`.
              count=$((REPEATED_DTEST_COUNT / CIRCLE_NODE_TOTAL))
              if (($CIRCLE_NODE_INDEX < (REPEATED_DTEST_COUNT % CIRCLE_NODE_TOTAL))); then
                count=$((count+1))
              fi

              if (($count <= 0)); then
                echo "No tests to run in this runner"
              else
                echo "Running $REPEATED_DTEST_NAME $count times"
            
                source ~/env3.6/bin/activate
                export PATH=$JAVA_HOME/bin:$PATH

                java -version
                cd ~/cassandra-dtest
                mkdir -p /tmp/dtest

                echo "env: $(env)"
                echo "** done env"
                mkdir -p /tmp/results/dtests

                stop_on_failure_arg=""
                if $REPEATED_UTEST_STOP_ON_FAILURE; then
                  stop_on_failure_arg="-x"
                fi

                vnodes_args=""
                if $REPEATED_DTEST_VNODES; then
                  vnodes_args="--use-vnodes --num-tokens=16"
                fi

                # we need the "set -o pipefail" here so that the exit code that circleci will actually use is from pytest and not the exit code from tee
                set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args --count=$count $stop_on_failure_arg --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $REPEATED_DTEST_NAME | tee /tmp/dtest/stdout.txt
              fi
            fi
      - store_test_results:
          path: /tmp/results
      - store_artifacts:
          path: /tmp/dtest
          destination: dtest
      - store_artifacts:
          path: ~/cassandra-dtest/logs
          destination: dtest_logs
