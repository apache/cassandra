17d16
< #
19c18,70
< version: 2.1
---
> build_common:
>   parallelism: 1
>   steps:
>   - log_environment
>   - clone_cassandra
>   - build_cassandra
>   - run_eclipse_warnings
>   - persist_to_workspace:
>       paths:
>       - cassandra
>       - .m2
>       root: /home/cassandra
> commands:
>   build_cassandra:
>     steps:
>     - run:
>         command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\n# Loop to prevent
>           failure due to maven-ant-tasks not downloading a jar..\nfor x in $(seq 1
>           3); do\n    ${ANT_HOME}/bin/ant clean realclean jar\n    RETURN=\"$?\"\n
>           \   if [ \"${RETURN}\" -eq \"0\" ]; then\n        break\n    fi\ndone\n#
>           Exit, if we didn't build successfully\nif [ \"${RETURN}\" -ne \"0\" ]; then\n
>           \   echo \"Build failed with exit code: ${RETURN}\"\n    exit ${RETURN}\nfi\n"
>         name: Build Cassandra
>         no_output_timeout: 15m
>   build_cassandra_dtest_jars:
>     steps:
>     - run:
>         command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\nmkdir ~/dtest_jars\ngit
>           remote add apache https://github.com/apache/cassandra.git\nfor branch in
>           cassandra-2.2 cassandra-3.0 cassandra-3.11 cassandra-4.0 trunk; do\n  #
>           check out the correct cassandra version:\n  git remote set-branches --add
>           apache '$branch'\n  git fetch --depth 1 apache $branch\n  git checkout $branch\n
>           \ git clean -fd\n  # Loop to prevent failure due to maven-ant-tasks not
>           downloading a jar..\n  for x in $(seq 1 3); do\n      ${ANT_HOME}/bin/ant
>           realclean; ${ANT_HOME}/bin/ant jar dtest-jar\n      RETURN=\"$?\"\n      if
>           [ \"${RETURN}\" -eq \"0\" ]; then\n          cp build/dtest*.jar ~/dtest_jars\n
>           \         break\n      fi\n  done\n  # Exit, if we didn't build successfully\n
>           \ if [ \"${RETURN}\" -ne \"0\" ]; then\n      echo \"Build failed with exit
>           code: ${RETURN}\"\n      exit ${RETURN}\n  fi\ndone\n# and build the dtest-jar
>           for the branch under test\n${ANT_HOME}/bin/ant realclean\ngit checkout origin/$CIRCLE_BRANCH\ngit
>           clean -fd\nfor x in $(seq 1 3); do\n    ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant
>           jar dtest-jar\n    RETURN=\"$?\"\n    if [ \"${RETURN}\" -eq \"0\" ]; then\n
>           \       cp build/dtest*.jar ~/dtest_jars\n        break\n    fi\ndone\n#
>           Exit, if we didn't build successfully\nif [ \"${RETURN}\" -ne \"0\" ]; then\n
>           \   echo \"Build failed with exit code: ${RETURN}\"\n    exit ${RETURN}\nfi\nls
>           -l ~/dtest_jars\n"
>         name: Build Cassandra DTest jars
>         no_output_timeout: 15m
>   clone_cassandra:
>     steps:
>     - run:
>         command: 'git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
>           ~/cassandra
21c72,78
< default_env_vars: &default_env_vars
---
>           '
>         name: Clone Cassandra Repository (via git)
>   clone_dtest:
>     steps:
>     - run:
>         command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
>           ~/cassandra-dtest
23,99c80,134
<     # The values of some of these environment variables are meant to be frequently changed by developers.
<     # The generate.sh script contains a list of accepted environment variables that should contain some of
<     # these variables. Also, some variables are mentioned in the documentation, at least in
<     # .circleci/readme.md and in doc/source/development/testing.rst.
<     # If you modify these variables, or if you add new variables whose values are meant to be changed frequently,
<     # please remember to modify the generate.sh script and the documentation accordingly.
< 
<     ANT_HOME: /usr/share/ant
<     JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
<     JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
<     LANG: en_US.UTF-8
<     KEEP_TEST_DIR: true
<     DEFAULT_DIR: /home/cassandra/cassandra-dtest
<     PYTHONIOENCODING: utf-8
<     PYTHONUNBUFFERED: true
<     CASS_DRIVER_NO_EXTENSIONS: true
<     CASS_DRIVER_NO_CYTHON: true
<     #Skip all syncing to disk to avoid performance issues in flaky CI environments
<     CASSANDRA_SKIP_SYNC: true
<     DTEST_REPO: https://github.com/apache/cassandra-dtest.git
<     DTEST_BRANCH: trunk
<     CCM_MAX_HEAP_SIZE: 1024M
<     CCM_HEAP_NEWSIZE: 256M
< 
<     # The Ant test target to run, for example:
<     # REPEATED_UTEST_TARGET: testsome
<     # REPEATED_UTEST_TARGET: test-jvm-dtest-some
<     # REPEATED_UTEST_TARGET: test-cdc
<     # REPEATED_UTEST_TARGET: test-compression
<     # REPEATED_UTEST_TARGET: test-system-keyspace-directory
<     REPEATED_UTEST_TARGET: testsome
<     # The name of JUnit class to be run multiple times, for example:
<     # REPEATED_UTEST_CLASS: org.apache.cassandra.cql3.ViewTest
<     # REPEATED_UTEST_CLASS: org.apache.cassandra.distributed.test.PagingTest
<     REPEATED_UTEST_CLASS:
<     # The optional specific methods within REPEATED_UTEST_CLASS to be run, for example:
<     # REPEATED_UTEST_METHODS: testCompoundPartitionKey
<     # REPEATED_UTEST_METHODS: testCompoundPartitionKey,testStaticTable
<     # Please note that some Ant targets will ignore the -Dtest.methods argument produced by this.
<     REPEATED_UTEST_METHODS:
<     # The number of times that the repeated JUnit test should be run
<     REPEATED_UTEST_COUNT: 100
<     # Whether the test iteration should stop on the first failure
<     REPEATED_UTEST_STOP_ON_FAILURE: false
< 
<     # A Python dtest to be run multiple times, for example:
<     # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py
<     # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py::TestCqlshSmoke
<     # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py::TestCqlshSmoke::test_create_index
<     REPEATED_DTEST_NAME:
<     # Whether the repeated Python dtest should use vnodes
<     REPEATED_DTEST_VNODES: false
<     # The number of times that the repeated Python dtest should be run
<     REPEATED_DTEST_COUNT: 100
<     # Whether the test iteration should stop on the first failure
<     REPEATED_DTEST_STOP_ON_FAILURE: false
< 
<     # A Python upgrade dtest to be run multiple times, for example:
<     # REPEATED_UPGRADE_DTEST_NAME: upgrade_tests/cql_tests.py
<     # REPEATED_UPGRADE_DTEST_NAME: upgrade_tests/cql_tests.py::TestCQLNodes2RF1_Upgrade_current_4_0_x_To_indev_4_0_x
<     REPEATED_UPGRADE_DTEST_NAME:
<     # The number of times that the repeated Python upgrade dtest should be run
<     REPEATED_UPGRADE_DTEST_COUNT: 100
<     # Whether the test iteration should stop on the first failure
<     REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
< 
<     # The name of JVM upgrade dtest class to be run multiple times, for example:
<     # REPEATED_JVM_UPGRADE_DTEST_CLASS: org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test
<     REPEATED_JVM_UPGRADE_DTEST_CLASS:
<     # The optional specific methods within REPEATED_JVM_UPGRADE_DTEST_CLASS to be run, for example:
<     # REPEATED_JVM_UPGRADE_DTEST_METHODS: testAvailabilityV30ToV3X
<     # REPEATED_JVM_UPGRADE_DTEST_METHODS: testAvailabilityV30ToV3X,testAvailabilityV30ToV4
<     REPEATED_JVM_UPGRADE_DTEST_METHODS:
<     # The number of times that the repeated JVM upgrade dtest should be run
<     REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
<     # Whether the JVM upgrade dtest iteration should stop on the first failure
<     REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
---
>           '
>         name: Clone Cassandra dtest Repository (via git)
>   create_dtest_containers:
>     parameters:
>       extra_env_args:
>         default: ''
>         type: string
>       file_tag:
>         type: string
>       python_version:
>         default: '3.6'
>         enum:
>         - '3.6'
>         - '3.7'
>         - '3.8'
>         type: enum
>       run_dtests_extra_args:
>         default: ''
>         type: string
>       tests_filter_pattern:
>         default: ''
>         type: string
>     steps:
>     - run:
>         command: "# reminder: this code (along with all the steps) is independently
>           executed on every circle container\n# so the goal here is to get the circleci
>           script to return the tests *this* container will run\n# which we do via
>           the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env<<parameters.python_version>>/bin/activate\nexport
>           PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '<<parameters.extra_env_args>>' ];
>           then\n  export <<parameters.extra_env_args>>\nfi\n\necho \"***Collected
>           DTests (<<parameters.file_tag>>)***\"\nset -eo pipefail && ./run_dtests.py
>           <<parameters.run_dtests_extra_args>> --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_<<parameters.file_tag>>_raw
>           --cassandra-dir=../cassandra\nif [ -z '<<parameters.tests_filter_pattern>>'
>           ]; then\n  mv /tmp/all_dtest_tests_<<parameters.file_tag>>_raw /tmp/all_dtest_tests_<<parameters.file_tag>>\nelse\n
>           \ grep -e '<<parameters.tests_filter_pattern>>' /tmp/all_dtest_tests_<<parameters.file_tag>>_raw
>           > /tmp/all_dtest_tests_<<parameters.file_tag>> || { echo \"Filter did not
>           match any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci
>           tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_<<parameters.file_tag>>
>           > /tmp/split_dtest_tests_<<parameters.file_tag>>.txt\ncat /tmp/split_dtest_tests_<<parameters.file_tag>>.txt
>           | tr '\\n' ' ' > /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\ncat
>           /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\n"
>         name: Determine Tests to Run (<<parameters.file_tag>>)
>         no_output_timeout: 5m
>   create_junit_containers:
>     parameters:
>       classlistprefix:
>         default: unit
>         type: string
>       extra_filters:
>         default: ''
>         type: string
>     steps:
>     - run:
>         command: '# reminder: this code (along with all the steps) is independently
>           executed on every circle container
101,105c136,137
< j8_par_executor: &j8_par_executor
<   executor:
<     name: java8-executor
<     #exec_resource_class: xlarge
<   parallelism: 4
---
>           # so the goal here is to get the circleci script to return the tests *this*
>           container will run
107,111c139
< j8_small_par_executor: &j8_small_par_executor
<   executor:
<     name: java8-executor
<     #exec_resource_class: xlarge
<   parallelism: 1
---
>           # which we do via the `circleci` cli tool.
113,117d140
< j8_small_executor: &j8_small_executor
<   executor:
<     name: java8-executor
<     exec_resource_class: medium
<   parallelism: 1
119,123c142
< j8_medium_par_executor: &j8_medium_par_executor
<   executor:
<     name: java8-executor
<     #exec_resource_class: xlarge
<   parallelism: 1
---
>           rm -fr ~/cassandra-dtest/upgrade_tests
125,129c144
< j8_seq_executor: &j8_seq_executor
<   executor:
<     name: java8-executor
<     #exec_resource_class: xlarge
<   parallelism: 1 # sequential, single container tests: no parallelism benefits
---
>           echo "***java tests***"
131,135d145
< j11_par_executor: &j11_par_executor
<   executor:
<     name: java11-executor
<     #exec_resource_class: xlarge
<   parallelism: 4
137,141c147
< j11_small_par_executor: &j11_small_par_executor
<   executor:
<     name: java11-executor
<     #exec_resource_class: xlarge
<   parallelism: 1
---
>           # get all of our unit test filenames
143,147c149,150
< j11_small_executor: &j11_small_executor
<   executor:
<     name: java11-executor
<     #exec_resource_class: medium
<   parallelism: 1
---
>           set -eo pipefail && circleci tests glob "$HOME/cassandra/test/<<parameters.classlistprefix>>/**/*.java"
>           > /tmp/all_java_unit_tests.txt
149,152d151
< j8_repeated_utest_executor: &j8_repeated_utest_executor
<   executor:
<     name: java8-executor
<   parallelism: 4
154,157c153,154
< j8_repeated_dtest_executor: &j8_repeated_dtest_executor
<   executor:
<     name: java8-executor
<   parallelism: 4
---
>           # split up the unit tests into groups based on the number of containers
>           we have
159,162c156,158
< j8_repeated_upgrade_dtest_executor: &j8_repeated_upgrade_dtest_executor
<   executor:
<     name: java8-executor
<   parallelism: 4
---
>           set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
>           --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
>           > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt
164,167c160,161
< j8_repeated_jvm_upgrade_dtest_executor: &j8_repeated_jvm_upgrade_dtest_executor
<   executor:
<     name: java8-executor
<   parallelism: 4
---
>           set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/<<parameters.classlistprefix>>/;;g"
>           | grep "Test\.java$" <<parameters.extra_filters>> > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
169,172c163
< j11_repeated_utest_executor: &j11_repeated_utest_executor
<   executor:
<     name: java11-executor
<   parallelism: 4
---
>           echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"
174,177c165
< j11_repeated_dtest_executor: &j11_repeated_dtest_executor
<   executor:
<     name: java11-executor
<   parallelism: 4
---
>           cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
179,367c167,182
< j8_with_dtests_jobs: &j8_with_dtests_jobs
<   jobs:
<     - start_j8_build:
<         type: approval
<     - j8_build:
<         requires:
<           - start_j8_build
<     # Java 8 unit tests
<     - start_j8_unit_tests:
<         type: approval
<     - j8_unit_tests:
<         requires:
<           - start_j8_unit_tests
<           - j8_build
<     - start_j8_jvm_dtests:
<         type: approval
<     - j8_jvm_dtests:
<         requires:
<           - start_j8_jvm_dtests
<           - j8_build
<     - j8_jvm_dtests_vnode:
<         requires:
<           - start_j8_jvm_dtests
<           - j8_build
<     - start_j8_cqlshlib_tests:
<         type: approval
<     - j8_cqlshlib_tests:
<         requires:
<           - start_j8_cqlshlib_tests
<           - j8_build
<     # Java 11 unit tests
<     - start_j11_unit_tests:
<         type: approval
<     - j11_unit_tests:
<         requires:
<           - start_j11_unit_tests
<           - j8_build
<     # specialized unit tests (all run on request using Java 8)
<     - start_utests_long:
<         type: approval
<     - utests_long:
<         requires:
<           - start_utests_long
<           - j8_build
<     - start_utests_compression:
<         type: approval
<     - utests_compression:
<         requires:
<           - start_utests_compression
<           - j8_build
<     - start_utests_stress:
<         type: approval
<     - utests_stress:
<         requires:
<           - start_utests_stress
<           - j8_build
<     - start_utests_fqltool:
<         type: approval
<     - utests_fqltool:
<         requires:
<           - start_utests_fqltool
<           - j8_build
<     - start_utests_system_keyspace_directory:
<         type: approval
<     - utests_system_keyspace_directory:
<         requires:
<           - start_utests_system_keyspace_directory
<           - j8_build
<     - start_j8_dtest_jars_build:
<         type: approval
<     - j8_dtest_jars_build:
<         requires:
<           - j8_build
<           - start_j8_dtest_jars_build
<     - start_jvm_upgrade_dtest:
<         type: approval
<     - j8_jvm_upgrade_dtests:
<         requires:
<           - start_jvm_upgrade_dtest
<           - j8_dtest_jars_build
<     # Java 8 dtests
<     - start_j8_dtests:
<         type: approval
<     - j8_dtests-with-vnodes:
<         requires:
<           - start_j8_dtests
<           - j8_build
<     - j8_dtests-no-vnodes:
<         requires:
<           - start_j8_dtests
<           - j8_build
<     # Java 11 dtests
<     - start_j11_dtests:
<         type: approval
<     - j11_dtests-with-vnodes:
<         requires:
<         - start_j11_dtests
<         - j8_build
<     - j11_dtests-no-vnodes:
<         requires:
<         - start_j11_dtests
<         - j8_build
<     # Java 8 upgrade tests
<     - start_upgrade_tests:
<         type: approval
<     - j8_upgradetests-no-vnodes:
<         requires:
<           - start_upgrade_tests
<           - j8_build
<     # Java 8 cqlsh dtests
<     - start_j8_cqlsh_tests:
<         type: approval
<     - j8_cqlsh-dtests-py3-with-vnodes:
<         requires:
<         - start_j8_cqlsh_tests
<         - j8_build
<     - j8_cqlsh-dtests-py38-with-vnodes:
<         requires:
<         - start_j8_cqlsh_tests
<         - j8_build
<     - j8_cqlsh-dtests-py3-no-vnodes:
<         requires:
<         - start_j8_cqlsh_tests
<         - j8_build
<     - j8_cqlsh-dtests-py38-no-vnodes:
<         requires:
<           - start_j8_cqlsh_tests
<           - j8_build
<     # Java 11 cqlsh dtests
<     - start_j11_cqlsh_tests:
<         type: approval
<     - j11_cqlsh-dtests-py3-with-vnodes:
<         requires:
<         - start_j11_cqlsh_tests
<         - j8_build
<     - j11_cqlsh-dtests-py38-with-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j8_build
<     - j11_cqlsh-dtests-py3-no-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j8_build
<     - j11_cqlsh-dtests-py38-no-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j8_build
<     # Java 8 repeated utest
<     - start_j8_repeated_utest:
<         type: approval
<     - j8_repeated_utest:
<         requires:
<           - start_j8_repeated_utest
<           - j8_build
<     # Java 11 repeated utest
<     - start_j11_repeated_utest:
<         type: approval
<     - j11_repeated_utest:
<         requires:
<           - start_j11_repeated_utest
<           - j8_build
<     # Java 8 repeated dtest
<     - start_j8_repeated_dtest:
<         type: approval
<     - j8_repeated_dtest:
<         requires:
<           - start_j8_repeated_dtest
<           - j8_build
<     # Java 11 repeated dtest
<     - start_j11_repeated_dtest:
<         type: approval
<     - j11_repeated_dtest:
<         requires:
<           - start_j11_repeated_dtest
<           - j8_build
<     # Repeated Python upgrade dtest
<     - start_repeated_upgrade_dtest:
<         type: approval
<     - repeated_upgrade_dtest:
<         requires:
<             - start_repeated_upgrade_dtest
<             - j8_build
<     # Repeated JVM upgrade dtest
<     - start_repeated_jvm_upgrade_dtest:
<         type: approval
<     - repeated_jvm_upgrade_dtest:
<         requires:
<           - start_repeated_jvm_upgrade_dtest
<           - j8_dtest_jars_build
---
>           '
>         name: Determine <<parameters.classlistprefix>> Tests to Run
>         no_output_timeout: 15m
>   create_venv:
>     parameters:
>       python_version:
>         default: '3.6'
>         enum:
>         - '3.6'
>         - '3.7'
>         - '3.8'
>         type: enum
>     steps:
>     - run:
>         command: '# note, this should be super quick as all dependencies should be
>           pre-installed in the docker image
369,598c184,185
< j8_pre-commit_jobs: &j8_pre-commit_jobs
<   jobs:
<     - start_pre-commit_tests:
<         type: approval
<     - j8_build:
<         requires:
<           - start_pre-commit_tests
<     # Java 8 unit tests
<     - j8_unit_tests:
<         requires:
<           - j8_build
<     - j8_jvm_dtests:
<         requires:
<           - j8_build
<     - j8_jvm_dtests_vnode:
<         requires:
<           - j8_build
<     - j8_cqlshlib_tests:
<         requires:
<           - j8_build
<     # Java 11 unit tests
<     - j11_unit_tests:
<         requires:
<           - j8_build
<     # specialized unit tests (all run on request using Java 8)
<     - start_utests_long:
<         type: approval
<     - utests_long:
<         requires:
<           - start_utests_long
<           - j8_build
<     - start_utests_compression:
<         type: approval
<     - utests_compression:
<         requires:
<           - start_utests_compression
<           - j8_build
<     - start_utests_stress:
<         type: approval
<     - utests_stress:
<         requires:
<           - start_utests_stress
<           - j8_build
<     - start_utests_fqltool:
<         type: approval
<     - utests_fqltool:
<         requires:
<           - start_utests_fqltool
<           - j8_build
<     - start_utests_system_keyspace_directory:
<         type: approval
<     - utests_system_keyspace_directory:
<         requires:
<           - start_utests_system_keyspace_directory
<           - j8_build
<     - start_j8_dtest_jars_build:
<         type: approval
<     - j8_dtest_jars_build:
<         requires:
<           - j8_build
<           - start_j8_dtest_jars_build
<     - start_jvm_upgrade_dtest:
<         type: approval
<     - j8_jvm_upgrade_dtests:
<         requires:
<           - start_jvm_upgrade_dtest
<           - j8_dtest_jars_build
<     # Java 8 dtests
<     - j8_dtests-with-vnodes:
<         requires:
<           - j8_build
<     - j8_dtests-no-vnodes:
<         requires:
<           - j8_build
<     # Java 11 dtests
<     - j11_dtests-with-vnodes:
<         requires:
<           - j8_build
<     - j11_dtests-no-vnodes:
<         requires:
<           - j8_build
<     # Java 8 upgrade tests (on request)
<     - start_upgrade_tests:
<         type: approval
<     - j8_upgradetests-no-vnodes:
<         requires:
<           - j8_build
<           - start_upgrade_tests
<     # Java 8 cqlsh dtests
<     - j8_cqlsh-dtests-py3-with-vnodes:
<         requires:
<           - j8_build
<     - j8_cqlsh-dtests-py38-with-vnodes:
<         requires:
<           - j8_build
<     - j8_cqlsh-dtests-py3-no-vnodes:
<         requires:
<           - j8_build
<     - j8_cqlsh-dtests-py38-no-vnodes:
<         requires:
<           - j8_build
<     # Java 11 cqlsh dtests
<     - j11_cqlsh-dtests-py3-with-vnodes:
<         requires:
<           - j8_build
<     - j11_cqlsh-dtests-py38-with-vnodes:
<         requires:
<           - j8_build
<     - j11_cqlsh-dtests-py3-no-vnodes:
<         requires:
<           - j8_build
<     - j11_cqlsh-dtests-py38-no-vnodes:
<         requires:
<           - j8_build
<     # Java 8 repeated utest (on request)
<     - start_j8_repeated_utest:
<         type: approval
<     - j8_repeated_utest:
<         requires:
<           - start_j8_repeated_utest
<           - j8_build
<     # Java 11 repeated utest (on request)
<     - start_j11_repeated_utest:
<         type: approval
<     - j11_repeated_utest:
<         requires:
<           - start_j11_repeated_utest
<           - j8_build
<     # Java 8 repeated dtest (on request)
<     - start_j8_repeated_dtest:
<         type: approval
<     - j8_repeated_dtest:
<         requires:
<           - start_j8_repeated_dtest
<           - j8_build
<     # Java 11 repeated dtest (on request)
<     - start_j11_repeated_dtest:
<         type: approval
<     - j11_repeated_dtest:
<         requires:
<           - start_j11_repeated_dtest
<           - j8_build
<     # Repeated Python upgrade dtest (on request)
<     - start_repeated_upgrade_dtest:
<         type: approval
<     - repeated_upgrade_dtest:
<         requires:
<           - start_repeated_upgrade_dtest
<           - j8_build
<     # Repeated JVM upgrade dtest (on request)
<     - start_repeated_jvm_upgrade_dtest:
<         type: approval
<     - repeated_jvm_upgrade_dtest:
<         requires:
<           - start_repeated_jvm_upgrade_dtest
<           - j8_dtest_jars_build
< 
< j11_with_dtests_jobs: &j11_with_dtests_jobs
<   jobs:
<     - start_j11_build:
<         type: approval
<     - j11_build:
<         requires:
<           - start_j11_build
<     # Java 11 unit tests
<     - start_j11_unit_tests:
<         type: approval
<     - j11_unit_tests:
<         requires:
<           - start_j11_unit_tests
<           - j11_build
<     - start_j11_jvm_dtests:
<         type: approval
<     - j11_jvm_dtests:
<         requires:
<           - start_j11_jvm_dtests
<           - j11_build
<     - j11_jvm_dtests_vnode:
<         requires:
<           - start_j11_jvm_dtests
<           - j11_build
<     - start_j11_cqlshlib_tests:
<         type: approval
<     - j11_cqlshlib_tests:
<         requires:
<           - start_j11_cqlshlib_tests
<           - j11_build
<     # Java 11 dtests
<     - start_j11_dtests:
<         type: approval
<     - j11_dtests-with-vnodes:
<         requires:
<           - start_j11_dtests
<           - j11_build
<     - j11_dtests-no-vnodes:
<         requires:
<           - start_j11_dtests
<           - j11_build
<     - start_j11_cqlsh_tests:
<         type: approval
<     - j11_cqlsh-dtests-py3-with-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j11_build
<     - j11_cqlsh-dtests-py38-with-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j11_build
<     - j11_cqlsh-dtests-py3-no-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j11_build
<     - j11_cqlsh-dtests-py38-no-vnodes:
<         requires:
<           - start_j11_cqlsh_tests
<           - j11_build
<     # Java 11 repeated utest
<     - start_j11_repeated_utest:
<         type: approval
<     - j11_repeated_utest:
<         requires:
<           - start_j11_repeated_utest
<           - j11_build
<     # Java 11 repeated dtest
<     - start_j11_repeated_dtest:
<         type: approval
<     - j11_repeated_dtest:
<         requires:
<           - start_j11_repeated_dtest
<           - j11_build
---
>           # if additional dependencies were added to requirmeents.txt and the docker
>           image hasn''t been updated
600,656c187,188
< j11_pre-commit_jobs: &j11_pre-commit_jobs
<   jobs:
<     - start_pre-commit_tests:
<         type: approval
<     - j11_build:
<         requires:
<           - start_pre-commit_tests
<     - j11_unit_tests:
<         requires:
<           - j11_build
<     - j11_jvm_dtests:
<         requires:
<           - j11_build
<     - j11_jvm_dtests_vnode:
<         requires:
<           - j11_build
<     - j11_cqlshlib_tests:
<         requires:
<           - j11_build
<     - j11_jvm_dtests:
<         requires:
<           - j11_build
<     - j11_cqlshlib_tests:
<         requires:
<           - j11_build
<     - j11_dtests-with-vnodes:
<         requires:
<           - j11_build
<     - j11_dtests-no-vnodes:
<         requires:
<           - j11_build
<     - j11_cqlsh-dtests-py3-with-vnodes:
<         requires:
<           - j11_build
<     - j11_cqlsh-dtests-py38-with-vnodes:
<         requires:
<           - j11_build
<     - j11_cqlsh-dtests-py3-no-vnodes:
<         requires:
<           - j11_build
<     - j11_cqlsh-dtests-py38-no-vnodes:
<         requires:
<           - j11_build
<     # Java 11 repeated utest (on request)
<     - start_j11_repeated_utest:
<         type: approval
<     - j11_repeated_utest:
<         requires:
<           - start_j11_repeated_utest
<           - j11_build
<     # Java 11 repeated dtest (on request)
<     - start_j11_repeated_dtest:
<         type: approval
<     - j11_repeated_dtest:
<         requires:
<           - start_j11_repeated_dtest
<           - j11_build
---
>           # we''d have to install it here at runtime -- which will make things slow,
>           so do yourself a favor and
658,663c190,191
< workflows:
<     version: 2
<     java8_separate_tests: *j8_with_dtests_jobs
<     java8_pre-commit_tests: *j8_pre-commit_jobs
<     java11_separate_tests: *j11_with_dtests_jobs
<     java11_pre-commit_tests: *j11_pre-commit_jobs
---
>           # rebuild the docker image! (it automatically pulls the latest requirements.txt
>           on build)
665,679c193
< executors:
<   java8-executor:
<     parameters:
<       exec_resource_class:
<         type: string
<         default: medium
<     docker:
<       - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210929
<     resource_class: << parameters.exec_resource_class >>
<     working_directory: ~/
<     shell: /bin/bash -eo pipefail -l
<     environment:
<       <<: *default_env_vars
<       JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
<       JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
---
>           source ~/env<<parameters.python_version>>/bin/activate
681,695c195
<   java11-executor:
<     parameters:
<       exec_resource_class:
<         type: string
<         default: medium
<     docker:
<     - image: apache/cassandra-testing-ubuntu2004-java11:20210304
<     resource_class: << parameters.exec_resource_class >>
<     working_directory: ~/
<     shell: /bin/bash -eo pipefail -l
<     environment:
<       <<: *default_env_vars
<       JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
<       JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
<       CASSANDRA_USE_JDK11: true
---
>           export PATH=$JAVA_HOME/bin:$PATH
697,708c197
< build_common: &build_common
<   parallelism: 1 # This job doesn't benefit from parallelism
<   steps:
<     - log_environment
<     - clone_cassandra
<     - build_cassandra
<     - run_eclipse_warnings
<     - persist_to_workspace:
<         root: /home/cassandra
<         paths:
<           - cassandra
<           - .m2
---
>           pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt
710,713c199
< jobs:
<   j8_build:
<     executor: java8-executor
<     <<: *build_common
---
>           pip3 uninstall -y cqlsh
715,717c201
<   j11_build:
<     executor: java11-executor
<     <<: *build_common
---
>           pip3 freeze
719,721c203,205
<   j8_dtest_jars_build:
<     executor: java8-executor
<     parallelism: 1
---
>           '
>         name: Configure virtualenv and python Dependencies
>   log_environment:
723,729c207,208
<       - attach_workspace:
<           at: /home/cassandra
<       - build_cassandra_dtest_jars
<       - persist_to_workspace:
<           root: /home/cassandra
<           paths:
<             - dtest_jars
---
>     - run:
>         command: 'echo ''*** id ***''
731,738c210
<   j8_unit_tests:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests
---
>           id
740,751c212
<   j8_jvm_dtests:
<     <<: *j8_small_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
---
>           echo ''*** cat /proc/cpuinfo ***''
753,765c214
<   j8_jvm_dtests_vnode:
<     <<: *j8_small_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
<           arguments: "-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'"
---
>           cat /proc/cpuinfo
767,778c216
<   j11_jvm_dtests:
<     <<: *j11_small_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
---
>           echo ''*** free -m ***''
780,792c218
<   j11_jvm_dtests_vnode:
<     <<: *j11_small_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
<           arguments: "-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'"
---
>           free -m
794,805c220
<   j8_jvm_upgrade_dtests:
<     <<: *j8_medium_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
---
>           echo ''*** df -m ***''
807,814c222
<   j11_unit_tests:
<     <<: *j11_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests
---
>           df -m
816,821c224
<   j8_cqlshlib_tests:
<     <<: *j8_small_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - run_cqlshlib_tests
---
>           echo ''*** ifconfig -a ***''
823,828c226
<   j11_cqlshlib_tests:
<     <<: *j11_small_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - run_cqlshlib_tests
---
>           ifconfig -a
830,836c228
<   utests_long:
<     <<: *j8_seq_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - run_junit_tests:
<           target: long-test
---
>           echo ''*** uname -a ***''
838,846c230
<   utests_compression:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests:
<           target: testclasslist-compression
---
>           uname -a
848,854c232
<   utests_stress:
<     <<: *j8_seq_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - run_junit_tests:
<           target: stress-test
---
>           echo ''*** mount ***''
856,862c234
<   utests_fqltool:
<     <<: *j8_seq_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - run_junit_tests:
<           target: fqltool-test
---
>           mount
864,872c236
<   utests_system_keyspace_directory:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests:
<           target: testclasslist-system-keyspace-directory
---
>           echo ''*** env ***''
874,886c238
<   j8_dtests-with-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k not cql'"
<       - run_dtests:
<           file_tag: j8_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
---
>           env
888,901c240
<   j11_dtests-with-vnodes:
<     <<: *j11_par_executor
<     steps:
<     - attach_workspace:
<         at: /home/cassandra
<     - log_environment
<     - clone_dtest
<     - create_venv
<     - create_dtest_containers:
<         file_tag: j11_with_vnodes
<         run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k not cql'"
<     - run_dtests:
<         file_tag: j11_with_vnodes
<         pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
---
>           echo ''*** java ***''
903,915c242
<   j8_dtests-no-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k not cql'"
<       - run_dtests:
<           file_tag: j8_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
---
>           which java
917,1183d243
<   j11_dtests-no-vnodes:
<     <<: *j11_par_executor
<     steps:
<     - attach_workspace:
<         at: /home/cassandra
<     - log_environment
<     - clone_dtest
<     - create_venv
<     - create_dtest_containers:
<         file_tag: j11_without_vnodes
<         run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k not cql'"
<     - run_dtests:
<         file_tag: j11_without_vnodes
<         pytest_extra_args: '--skip-resource-intensive-tests'
< 
<   j8_upgradetests-no-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_upgradetests_without_vnodes
<           run_dtests_extra_args: '--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all'
<       - run_dtests:
<           file_tag: j8_upgradetests_without_vnodes
<           pytest_extra_args: '--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all'
< 
<   j8_cqlsh-dtests-py3-with-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j8_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
<   j8_cqlsh-dtests-py38-with-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j8_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j8_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
<   j8_cqlsh-dtests-py3-no-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j8_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
<   j8_cqlsh-dtests-py38-no-vnodes:
<     <<: *j8_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j8_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j8_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
<   j11_cqlsh-dtests-py3-with-vnodes:
<     <<: *j11_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j11_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j11_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
<   j11_cqlsh-dtests-py38-with-vnodes:
<     <<: *j11_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j11_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j11_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
<   j11_cqlsh-dtests-py3-no-vnodes:
<     <<: *j11_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j11_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j11_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
<   j11_cqlsh-dtests-py38-no-vnodes:
<     <<: *j11_par_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j11_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j11_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
<   j8_repeated_utest:
<     <<: *j8_repeated_utest_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - run_repeated_utest:
<           target: ${REPEATED_UTEST_TARGET}
<           class: ${REPEATED_UTEST_CLASS}
<           methods: ${REPEATED_UTEST_METHODS}
<           count: ${REPEATED_UTEST_COUNT}
<           stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
< 
<   j11_repeated_utest:
<     <<: *j11_repeated_utest_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - run_repeated_utest:
<           target: ${REPEATED_UTEST_TARGET}
<           class: ${REPEATED_UTEST_CLASS}
<           methods: ${REPEATED_UTEST_METHODS}
<           count: ${REPEATED_UTEST_COUNT}
<           stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
< 
<   j8_repeated_dtest:
<     <<: *j8_repeated_dtest_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - run_repeated_dtest:
<           tests: ${REPEATED_DTEST_NAME}
<           vnodes: ${REPEATED_DTEST_VNODES}
<           upgrade: "false"
<           count: ${REPEATED_DTEST_COUNT}
<           stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
< 
<   j11_repeated_dtest:
<     <<: *j11_repeated_dtest_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - clone_dtest
<       - create_venv
<       - run_repeated_dtest:
<           tests: ${REPEATED_DTEST_NAME}
<           vnodes: ${REPEATED_DTEST_VNODES}
<           upgrade: "false"
<           count: ${REPEATED_DTEST_COUNT}
<           stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
< 
<   repeated_jvm_upgrade_dtest:
<     <<: *j8_repeated_jvm_upgrade_dtest_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - run_repeated_utest:
<           target: test-jvm-dtest-some
<           class: ${REPEATED_JVM_UPGRADE_DTEST_CLASS}
<           methods: ${REPEATED_JVM_UPGRADE_DTEST_METHODS}
<           count: ${REPEATED_JVM_UPGRADE_DTEST_COUNT}
<           stop_on_failure: ${REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE}
< 
<   repeated_upgrade_dtest:
<     <<: *j8_repeated_upgrade_dtest_executor
<     steps:
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - run_repeated_dtest:
<           tests: ${REPEATED_UPGRADE_DTEST_NAME}
<           vnodes: "false"
<           upgrade: "true"
<           stop_on_failure: ${REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE}
<           count: ${REPEATED_UPGRADE_DTEST_COUNT}
< 
< commands:
<   log_environment:
<     steps:
<     - run:
<         name: Log Environment Information
<         command: |
<           echo '*** id ***'
<           id
<           echo '*** cat /proc/cpuinfo ***'
<           cat /proc/cpuinfo
<           echo '*** free -m ***'
<           free -m
<           echo '*** df -m ***'
<           df -m
<           echo '*** ifconfig -a ***'
<           ifconfig -a
<           echo '*** uname -a ***'
<           uname -a
<           echo '*** mount ***'
<           mount
<           echo '*** env ***'
<           env
<           echo '*** java ***'
<           which java
1186,1193c246,252
<   clone_cassandra:
<     steps:
<     - run:
<         name: Clone Cassandra Repository (via git)
<         command: |
<           git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git ~/cassandra
< 
<   clone_dtest:
---
>           '
>         name: Log Environment Information
>   run_cqlshlib_tests:
>     parameters:
>       no_output_timeout:
>         default: 15m
>         type: string
1196,1198c255
<         name: Clone Cassandra dtest Repository (via git)
<         command: |
<           git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO ~/cassandra-dtest
---
>         command: 'export PATH=$JAVA_HOME/bin:$PATH
1200,1220c257
<   build_cassandra:
<     steps:
<     - run:
<         name: Build Cassandra
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           cd ~/cassandra
<           # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
<           for x in $(seq 1 3); do
<               ${ANT_HOME}/bin/ant clean realclean jar
<               RETURN="$?"
<               if [ "${RETURN}" -eq "0" ]; then
<                   break
<               fi
<           done
<           # Exit, if we didn't build successfully
<           if [ "${RETURN}" -ne "0" ]; then
<               echo "Build failed with exit code: ${RETURN}"
<               exit ${RETURN}
<           fi
<         no_output_timeout: 15m
---
>           time mv ~/cassandra /tmp
1222,1270c259
<   build_cassandra_dtest_jars:
<     steps:
<     - run:
<         name: Build Cassandra DTest jars
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           cd ~/cassandra
<           mkdir ~/dtest_jars
<           git remote add apache https://github.com/apache/cassandra.git
<           for branch in cassandra-2.2 cassandra-3.0 cassandra-3.11 cassandra-4.0 trunk; do
<             # check out the correct cassandra version:
<             git remote set-branches --add apache '$branch'
<             git fetch --depth 1 apache $branch
<             git checkout $branch
<             git clean -fd
<             # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
<             for x in $(seq 1 3); do
<                 ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar
<                 RETURN="$?"
<                 if [ "${RETURN}" -eq "0" ]; then
<                     cp build/dtest*.jar ~/dtest_jars
<                     break
<                 fi
<             done
<             # Exit, if we didn't build successfully
<             if [ "${RETURN}" -ne "0" ]; then
<                 echo "Build failed with exit code: ${RETURN}"
<                 exit ${RETURN}
<             fi
<           done
<           # and build the dtest-jar for the branch under test
<           ${ANT_HOME}/bin/ant realclean
<           git checkout origin/$CIRCLE_BRANCH
<           git clean -fd
<           for x in $(seq 1 3); do
<               ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar
<               RETURN="$?"
<               if [ "${RETURN}" -eq "0" ]; then
<                   cp build/dtest*.jar ~/dtest_jars
<                   break
<               fi
<           done
<           # Exit, if we didn't build successfully
<           if [ "${RETURN}" -ne "0" ]; then
<               echo "Build failed with exit code: ${RETURN}"
<               exit ${RETURN}
<           fi
<           ls -l ~/dtest_jars
<         no_output_timeout: 15m
---
>           cd /tmp/cassandra/pylib
1272,1279c261
<   run_eclipse_warnings:
<     steps:
<     - run:
<         name: Run eclipse-warnings
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           cd ~/cassandra
<           ant eclipse-warnings
---
>           ./cassandra-cqlsh-tests.sh ..
1281c263,268
<   create_junit_containers:
---
>           '
>         name: Run cqlshlib Unit Tests
>         no_output_timeout: <<parameters.no_output_timeout>>
>     - store_test_results:
>         path: /tmp/cassandra/pylib
>   run_dtests:
1283c270,271
<       classlistprefix:
---
>       extra_env_args:
>         default: ''
1285,1286c273,276
<         default: unit
<       extra_filters:
---
>       file_tag:
>         type: string
>       pytest_extra_args:
>         default: ''
1288c278,284
<         default: ""
---
>       python_version:
>         default: '3.6'
>         enum:
>         - '3.6'
>         - '3.7'
>         - '3.8'
>         type: enum
1291,1301c287,312
<         name: Determine <<parameters.classlistprefix>> Tests to Run
<         command: |
<           # reminder: this code (along with all the steps) is independently executed on every circle container
<           # so the goal here is to get the circleci script to return the tests *this* container will run
<           # which we do via the `circleci` cli tool.
< 
<           rm -fr ~/cassandra-dtest/upgrade_tests
<           echo "***java tests***"
< 
<           # get all of our unit test filenames
<           set -eo pipefail && circleci tests glob "$HOME/cassandra/test/<<parameters.classlistprefix>>/**/*.java" > /tmp/all_java_unit_tests.txt
---
>         command: "echo \"cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\"\ncat
>           /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\n\nsource ~/env<<parameters.python_version>>/bin/activate\nexport
>           PATH=$JAVA_HOME/bin:$PATH\nif [ -n '<<parameters.extra_env_args>>' ]; then\n
>           \ export <<parameters.extra_env_args>>\nfi\n\njava -version\ncd ~/cassandra-dtest\nmkdir
>           -p /tmp/dtest\n\necho \"env: $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n#
>           we need the \"set -o pipefail\" here so that the exit code that circleci
>           will actually use is from pytest and not the exit code from tee\nexport
>           SPLIT_TESTS=`cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt`\nset
>           -o pipefail && cd ~/cassandra-dtest && pytest <<parameters.pytest_extra_args>>
>           --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result_<<parameters.file_tag>>.xml
>           -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS
>           2>&1 | tee /tmp/dtest/stdout.txt\n"
>         name: Run dtests (<<parameters.file_tag>>)
>         no_output_timeout: 15m
>     - store_test_results:
>         path: /tmp/results
>     - store_artifacts:
>         destination: dtest_<<parameters.file_tag>>
>         path: /tmp/dtest
>     - store_artifacts:
>         destination: dtest_<<parameters.file_tag>>_logs
>         path: ~/cassandra-dtest/logs
>   run_eclipse_warnings:
>     steps:
>     - run:
>         command: 'export PATH=$JAVA_HOME/bin:$PATH
1303,1307c314
<           # split up the unit tests into groups based on the number of containers we have
<           set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt
<           set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/<<parameters.classlistprefix>>/;;g" | grep "Test\.java$" <<parameters.extra_filters>> > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
<           echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"
<           cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
---
>           cd ~/cassandra
1309c316
<         no_output_timeout: 15m
---
>           ant eclipse-warnings
1310a318,319
>           '
>         name: Run eclipse-warnings
1313,1314d321
<       target:
<         type: string
1316d322
<         type: string
1317a324,326
>         type: string
>       target:
>         type: string
1319a329,331
>         command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\nif
>           [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\nfi\nant
>           <<parameters.target>>\n"
1321,1328d332
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           time mv ~/cassandra /tmp
<           cd /tmp/cassandra
<           if [ -d ~/dtest_jars ]; then
<             cp ~/dtest_jars/dtest* /tmp/cassandra/build/
<           fi
<           ant <<parameters.target>>
1333d336
<         path: /tmp/cassandra/build/test/output
1334a338
>         path: /tmp/cassandra/build/test/output
1336d339
<         path: /tmp/cassandra/build/test/logs
1338,1355c341
< 
<   run_cqlshlib_tests:
<     parameters:
<       no_output_timeout:
<         type: string
<         default: 15m
<     steps:
<     - run:
<         name: Run cqlshlib Unit Tests
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           time mv ~/cassandra /tmp
<           cd /tmp/cassandra/pylib
<           ./cassandra-cqlsh-tests.sh ..
<         no_output_timeout: <<parameters.no_output_timeout>>
<     - store_test_results:
<         path: /tmp/cassandra/pylib
< 
---
>         path: /tmp/cassandra/build/test/logs
1358c344,345
<       target:
---
>       arguments:
>         default: ' '
1360,1361c347,348
<         default: testclasslist
<       no_output_timeout:
---
>       classlistprefix:
>         default: unit
1362a350
>       no_output_timeout:
1364d351
<       classlistprefix:
1366,1367c353,354
<         default: unit
<       arguments:
---
>       target:
>         default: testclasslist
1369d355
<         default: " "
1371a358,364
>         command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd
>           /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\nfi\ntest_timeout=$(grep
>           'name=\"test.<<parameters.classlistprefix>>.timeout\"' build.xml | awk -F'\"'
>           '{print $4}' || true)\nif [ -z \"$test_timeout\" ]; then\n  test_timeout=$(grep
>           'name=\"test.timeout\"' build.xml | awk -F'\"' '{print $4}')\nfi\nant <<parameters.target>>
>           <<parameters.arguments>> -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
>           \ -Dtest.classlistprefix=<<parameters.classlistprefix>>\n"
1373,1385d365
<         command: |
<           set -x
<           export PATH=$JAVA_HOME/bin:$PATH
<           time mv ~/cassandra /tmp
<           cd /tmp/cassandra
<           if [ -d ~/dtest_jars ]; then
<             cp ~/dtest_jars/dtest* /tmp/cassandra/build/
<           fi
<           test_timeout=$(grep 'name="test.<<parameters.classlistprefix>>.timeout"' build.xml | awk -F'"' '{print $4}' || true)
<           if [ -z "$test_timeout" ]; then
<             test_timeout=$(grep 'name="test.timeout"' build.xml | awk -F'"' '{print $4}')
<           fi
<           ant <<parameters.target>> <<parameters.arguments>> -Dtest.timeout="$test_timeout" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt  -Dtest.classlistprefix=<<parameters.classlistprefix>>
1390d369
<         path: /tmp/cassandra/build/test/output
1391a371
>         path: /tmp/cassandra/build/test/output
1393d372
<         path: /tmp/cassandra/build/test/logs
1395,1416c374,375
< 
<   create_venv:
<     parameters:
<       python_version:
<         type: enum
<         default: "3.6"
<         enum: ["3.6", "3.7", "3.8"]
<     steps:
<     - run:
<         name: Configure virtualenv and python Dependencies
<         command: |
<           # note, this should be super quick as all dependencies should be pre-installed in the docker image
<           # if additional dependencies were added to requirmeents.txt and the docker image hasn't been updated
<           # we'd have to install it here at runtime -- which will make things slow, so do yourself a favor and
<           # rebuild the docker image! (it automatically pulls the latest requirements.txt on build)
<           source ~/env<<parameters.python_version>>/bin/activate
<           export PATH=$JAVA_HOME/bin:$PATH
<           pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt
<           pip3 uninstall -y cqlsh
<           pip3 freeze
< 
<   create_dtest_containers:
---
>         path: /tmp/cassandra/build/test/logs
>   run_repeated_dtest:
1418,1423c377
<       file_tag:
<         type: string
<       run_dtests_extra_args:
<         type: string
<         default: ''
<       extra_env_args:
---
>       count:
1425,1426c379
<         default: ''
<       tests_filter_pattern:
---
>       stop_on_failure:
1428,1463c381
<         default: ''
<       python_version:
<         type: enum
<         default: "3.6"
<         enum: ["3.6", "3.7", "3.8"]
<     steps:
<     - run:
<         name: Determine Tests to Run (<<parameters.file_tag>>)
<         no_output_timeout: 5m
<         command: |
<           # reminder: this code (along with all the steps) is independently executed on every circle container
<           # so the goal here is to get the circleci script to return the tests *this* container will run
<           # which we do via the `circleci` cli tool.
< 
<           cd cassandra-dtest
<           source ~/env<<parameters.python_version>>/bin/activate
<           export PATH=$JAVA_HOME/bin:$PATH
< 
<           if [ -n '<<parameters.extra_env_args>>' ]; then
<             export <<parameters.extra_env_args>>
<           fi
< 
<           echo "***Collected DTests (<<parameters.file_tag>>)***"
<           set -eo pipefail && ./run_dtests.py <<parameters.run_dtests_extra_args>> --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_<<parameters.file_tag>>_raw --cassandra-dir=../cassandra
<           if [ -z '<<parameters.tests_filter_pattern>>' ]; then
<             mv /tmp/all_dtest_tests_<<parameters.file_tag>>_raw /tmp/all_dtest_tests_<<parameters.file_tag>>
<           else
<             grep -e '<<parameters.tests_filter_pattern>>' /tmp/all_dtest_tests_<<parameters.file_tag>>_raw > /tmp/all_dtest_tests_<<parameters.file_tag>> || { echo "Filter did not match any tests! Exiting build."; exit 0; }
<           fi
<           set -eo pipefail && circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_<<parameters.file_tag>> > /tmp/split_dtest_tests_<<parameters.file_tag>>.txt
<           cat /tmp/split_dtest_tests_<<parameters.file_tag>>.txt | tr '\n' ' ' > /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
<           cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
< 
<   run_dtests:
<     parameters:
<       file_tag:
---
>       tests:
1465c383
<       pytest_extra_args:
---
>       upgrade:
1467,1468c385
<         default: ''
<       extra_env_args:
---
>       vnodes:
1470,1474d386
<         default: ''
<       python_version:
<         type: enum
<         default: "3.6"
<         enum: ["3.6", "3.7", "3.8"]
1476,1507c388,423
<       - run:
<           name: Run dtests (<<parameters.file_tag>>)
<           no_output_timeout: 15m
<           command: |
<             echo "cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt"
<             cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
< 
<             source ~/env<<parameters.python_version>>/bin/activate
<             export PATH=$JAVA_HOME/bin:$PATH
<             if [ -n '<<parameters.extra_env_args>>' ]; then
<               export <<parameters.extra_env_args>>
<             fi
< 
<             java -version
<             cd ~/cassandra-dtest
<             mkdir -p /tmp/dtest
< 
<             echo "env: $(env)"
<             echo "** done env"
<             mkdir -p /tmp/results/dtests
<             # we need the "set -o pipefail" here so that the exit code that circleci will actually use is from pytest and not the exit code from tee
<             export SPLIT_TESTS=`cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt`
<             set -o pipefail && cd ~/cassandra-dtest && pytest <<parameters.pytest_extra_args>> --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result_<<parameters.file_tag>>.xml -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt
<       - store_test_results:
<           path: /tmp/results
<       - store_artifacts:
<           path: /tmp/dtest
<           destination: dtest_<<parameters.file_tag>>
<       - store_artifacts:
<           path: ~/cassandra-dtest/logs
<           destination: dtest_<<parameters.file_tag>>_logs
< 
---
>     - run:
>         command: "if [ \"<<parameters.tests>>\" == \"<nil>\" ]; then\n  echo \"Repeated
>           dtest name hasn't been defined, exiting without running any test\"\nelif
>           [ \"<<parameters.count>>\" == \"<nil>\" ]; then\n  echo \"Repeated dtest
>           count hasn't been defined, exiting without running any test\"\nelif [ \"<<parameters.count>>\"
>           -le 0 ]; then\n  echo \"Repeated dtest count is lesser or equals than zero,
>           exiting without running any test\"\nelse\n\n  # Calculate the number of
>           test iterations to be run by the current parallel runner.\n  # Since we
>           are running the same test multiple times there is no need to use `circleci
>           tests split`.\n  count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))\n  if
>           (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then\n
>           \   count=$((count+1))\n  fi\n\n  if (($count <= 0)); then\n    echo \"No
>           tests to run in this runner\"\n  else\n    echo \"Running <<parameters.tests>>
>           $count times\"\n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\n
>           \   java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\n
>           \   echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\n
>           \   stop_on_failure_arg=\"\"\n    if <<parameters.stop_on_failure>>; then\n
>           \     stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\n    if
>           <<parameters.vnodes>>; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n
>           \   fi\n\n    upgrade_arg=\"\"\n    if <<parameters.upgrade>>; then\n      upgrade_arg=\"--execute-upgrade-tests\"\n
>           \   fi\n\n    # we need the \"set -o pipefail\" here so that the exit code
>           that circleci will actually use is from pytest and not the exit code from
>           tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args
>           --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result.xml
>           -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir <<parameters.tests>>
>           | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
>         name: Run repeated Python dtest
>         no_output_timeout: 15m
>     - store_test_results:
>         path: /tmp/results
>     - store_artifacts:
>         destination: dtest
>         path: /tmp/dtest
>     - store_artifacts:
>         destination: dtest_logs
>         path: ~/cassandra-dtest/logs
1510,1511d425
<       target:
<         type: string
1514,1515d427
<       methods:
<         type: string
1517a430,431
>       methods:
>         type: string
1520,1633c434
<     steps:
<       - run:
<           name: Run repeated JUnit test
<           no_output_timeout: 15m
<           command: |
<             if [ "<<parameters.class>>" == "<nil>" ]; then
<               echo "Repeated utest class name hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" == "<nil>" ]; then
<               echo "Repeated utest count hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" -le 0 ]; then
<               echo "Repeated utest count is lesser or equals than zero, exiting without running any test"
<             else
<             
<               # Calculate the number of test iterations to be run by the current parallel runner.
<               # Since we are running the same test multiple times there is no need to use `circleci tests split`.
<               count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))
<               if (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then
<                 count=$((count+1))
<               fi
< 
<               if (($count <= 0)); then
<                 echo "No tests to run in this runner"
<               else
<                 echo "Running <<parameters.target>> <<parameters.class>> <<parameters.methods>> <<parameters.count>> times"
< 
<                 set -x
<                 export PATH=$JAVA_HOME/bin:$PATH
<                 time mv ~/cassandra /tmp
<                 cd /tmp/cassandra
<                 if [ -d ~/dtest_jars ]; then
<                   cp ~/dtest_jars/dtest* /tmp/cassandra/build/
<                 fi
< 
<                 target=<<parameters.target>>
<                 class_path=<<parameters.class>>
<                 class_name="${class_path##*.}"
< 
<                 # Prepare the -Dtest.name argument.
<                 # It can be the fully qualified class name or the short class name, depending on the target.
<                 if [[ $target == "test" || \
<                       $target == "test-cdc" || \
<                       $target == "test-compression" || \
<                       $target == "test-system-keyspace-directory" ]]; then
<                   name="-Dtest.name=$class_name"
<                 else
<                   name="-Dtest.name=$class_path"
<                 fi
< 
<                 # Prepare the -Dtest.methods argument, which is optional
<                 if [ "<<parameters.methods>>" == "<nil>" ]; then
<                   methods=""
<                 else
<                   methods="-Dtest.methods=<<parameters.methods>>"
<                 fi
< 
<                 # Run the test target as many times as requested collecting the exit code,
<                 # stopping the iteration only if stop_on_failure is set.
<                 exit_code="$?"
<                 for i in $(seq -w 1 $count); do
< 
<                   echo "Running test iteration $i of $count"
< 
<                   # run the test
<                   status="passes"
<                   if !( set -o pipefail && ant $target $name $methods -Dno-build-test=true | tee stdout.txt ); then
<                     status="fails"
<                     exit_code=1
<                   fi
< 
<                   # move the stdout output file
<                   dest=/tmp/results/repeated_utest/stdout/${status}/${i}
<                   mkdir -p $dest
<                   mv stdout.txt $dest/<<parameters.target>>-<<parameters.class>>.txt
< 
<                   # move the XML output files
<                   source=build/test/output
<                   dest=/tmp/results/repeated_utest/output/${status}/${i}
<                   mkdir -p $dest
<                   if [[ -d $source && -n "$(ls $source)" ]]; then
<                     mv $source/* $dest/
<                   fi
< 
<                   # move the log files
<                   source=build/test/logs
<                   dest=/tmp/results/repeated_utest/logs/${status}/${i}
<                   mkdir -p $dest
<                   if [[ -d $source && -n "$(ls $source)" ]]; then
<                     mv $source/* $dest/
<                   fi
< 
<                   # maybe stop iterations on test failure
<                   if [[ <<parameters.stop_on_failure>> = true ]] && (( $exit_code > 0 )); then
<                     break
<                   fi
<                 done
< 
<                 (exit ${exit_code})
<               fi
<             fi
<       - store_test_results:
<           path: /tmp/results/repeated_utest/output
<       - store_artifacts:
<           path: /tmp/results/repeated_utest/stdout
<           destination: stdout
<       - store_artifacts:
<           path: /tmp/results/repeated_utest/output
<           destination: junitxml
<       - store_artifacts:
<           path: /tmp/results/repeated_utest/logs
<           destination: logs
< 
<   run_repeated_dtest:
<     parameters:
<       tests:
---
>       target:
1635,1639c436,566
<       vnodes:
<         type: string
<       upgrade:
<         type: string
<       count:
---
>     steps:
>     - run:
>         command: "if [ \"<<parameters.class>>\" == \"<nil>\" ]; then\n  echo \"Repeated
>           utest class name hasn't been defined, exiting without running any test\"\nelif
>           [ \"<<parameters.count>>\" == \"<nil>\" ]; then\n  echo \"Repeated utest
>           count hasn't been defined, exiting without running any test\"\nelif [ \"<<parameters.count>>\"
>           -le 0 ]; then\n  echo \"Repeated utest count is lesser or equals than zero,
>           exiting without running any test\"\nelse\n\n  # Calculate the number of
>           test iterations to be run by the current parallel runner.\n  # Since we
>           are running the same test multiple times there is no need to use `circleci
>           tests split`.\n  count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))\n  if
>           (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then\n
>           \   count=$((count+1))\n  fi\n\n  if (($count <= 0)); then\n    echo \"No
>           tests to run in this runner\"\n  else\n    echo \"Running <<parameters.target>>
>           <<parameters.class>> <<parameters.methods>> <<parameters.count>> times\"\n\n
>           \   set -x\n    export PATH=$JAVA_HOME/bin:$PATH\n    time mv ~/cassandra
>           /tmp\n    cd /tmp/cassandra\n    if [ -d ~/dtest_jars ]; then\n      cp
>           ~/dtest_jars/dtest* /tmp/cassandra/build/\n    fi\n\n    target=<<parameters.target>>\n
>           \   class_path=<<parameters.class>>\n    class_name=\"${class_path##*.}\"\n\n
>           \   # Prepare the -Dtest.name argument.\n    # It can be the fully qualified
>           class name or the short class name, depending on the target.\n    if [[
>           $target == \"test\" || \\\n          $target == \"test-cdc\" || \\\n          $target
>           == \"test-compression\" || \\\n          $target == \"test-system-keyspace-directory\"
>           ]]; then\n      name=\"-Dtest.name=$class_name\"\n    else\n      name=\"-Dtest.name=$class_path\"\n
>           \   fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n
>           \   if [ \"<<parameters.methods>>\" == \"<nil>\" ]; then\n      methods=\"\"\n
>           \   else\n      methods=\"-Dtest.methods=<<parameters.methods>>\"\n    fi\n\n
>           \   # Run the test target as many times as requested collecting the exit
>           code,\n    # stopping the iteration only if stop_on_failure is set.\n    exit_code=\"$?\"\n
>           \   for i in $(seq -w 1 $count); do\n\n      echo \"Running test iteration
>           $i of $count\"\n\n      # run the test\n      status=\"passes\"\n      if
>           !( set -o pipefail && ant $target $name $methods -Dno-build-test=true |
>           tee stdout.txt ); then\n        status=\"fails\"\n        exit_code=1\n
>           \     fi\n\n      # move the stdout output file\n      dest=/tmp/results/repeated_utest/stdout/${status}/${i}\n
>           \     mkdir -p $dest\n      mv stdout.txt $dest/<<parameters.target>>-<<parameters.class>>.txt\n\n
>           \     # move the XML output files\n      source=build/test/output\n      dest=/tmp/results/repeated_utest/output/${status}/${i}\n
>           \     mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];
>           then\n        mv $source/* $dest/\n      fi\n\n      # move the log files\n
>           \     source=build/test/logs\n      dest=/tmp/results/repeated_utest/logs/${status}/${i}\n
>           \     mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];
>           then\n        mv $source/* $dest/\n      fi\n\n      # maybe stop iterations
>           on test failure\n      if [[ <<parameters.stop_on_failure>> = true ]] &&
>           (( $exit_code > 0 )); then\n        break\n      fi\n    done\n\n    (exit
>           ${exit_code})\n  fi\nfi\n"
>         name: Run repeated JUnit test
>         no_output_timeout: 15m
>     - store_test_results:
>         path: /tmp/results/repeated_utest/output
>     - store_artifacts:
>         destination: stdout
>         path: /tmp/results/repeated_utest/stdout
>     - store_artifacts:
>         destination: junitxml
>         path: /tmp/results/repeated_utest/output
>     - store_artifacts:
>         destination: logs
>         path: /tmp/results/repeated_utest/logs
> default_env_vars:
>   ANT_HOME: /usr/share/ant
>   CASSANDRA_SKIP_SYNC: true
>   CASS_DRIVER_NO_CYTHON: true
>   CASS_DRIVER_NO_EXTENSIONS: true
>   CCM_HEAP_NEWSIZE: 256M
>   CCM_MAX_HEAP_SIZE: 1024M
>   DEFAULT_DIR: /home/cassandra/cassandra-dtest
>   DTEST_BRANCH: trunk
>   DTEST_REPO: https://github.com/apache/cassandra-dtest.git
>   JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>   JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>   KEEP_TEST_DIR: true
>   LANG: en_US.UTF-8
>   PYTHONIOENCODING: utf-8
>   PYTHONUNBUFFERED: true
>   REPEATED_DTEST_COUNT: 100
>   REPEATED_DTEST_NAME: null
>   REPEATED_DTEST_STOP_ON_FAILURE: false
>   REPEATED_DTEST_VNODES: false
>   REPEATED_JVM_UPGRADE_DTEST_CLASS: null
>   REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
>   REPEATED_JVM_UPGRADE_DTEST_METHODS: null
>   REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
>   REPEATED_UPGRADE_DTEST_COUNT: 100
>   REPEATED_UPGRADE_DTEST_NAME: null
>   REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
>   REPEATED_UTEST_CLASS: null
>   REPEATED_UTEST_COUNT: 100
>   REPEATED_UTEST_METHODS: null
>   REPEATED_UTEST_STOP_ON_FAILURE: false
>   REPEATED_UTEST_TARGET: testsome
> executors:
>   java11-executor:
>     docker:
>     - image: apache/cassandra-testing-ubuntu2004-java11:20210304
>     environment:
>       ANT_HOME: /usr/share/ant
>       CASSANDRA_SKIP_SYNC: true
>       CASSANDRA_USE_JDK11: true
>       CASS_DRIVER_NO_CYTHON: true
>       CASS_DRIVER_NO_EXTENSIONS: true
>       CCM_HEAP_NEWSIZE: 256M
>       CCM_MAX_HEAP_SIZE: 1024M
>       DEFAULT_DIR: /home/cassandra/cassandra-dtest
>       DTEST_BRANCH: trunk
>       DTEST_REPO: https://github.com/apache/cassandra-dtest.git
>       JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>       JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>       JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>       JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>       KEEP_TEST_DIR: true
>       LANG: en_US.UTF-8
>       PYTHONIOENCODING: utf-8
>       PYTHONUNBUFFERED: true
>       REPEATED_DTEST_COUNT: 100
>       REPEATED_DTEST_NAME: null
>       REPEATED_DTEST_STOP_ON_FAILURE: false
>       REPEATED_DTEST_VNODES: false
>       REPEATED_JVM_UPGRADE_DTEST_CLASS: null
>       REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
>       REPEATED_JVM_UPGRADE_DTEST_METHODS: null
>       REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
>       REPEATED_UPGRADE_DTEST_COUNT: 100
>       REPEATED_UPGRADE_DTEST_NAME: null
>       REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
>       REPEATED_UTEST_CLASS: null
>       REPEATED_UTEST_COUNT: 100
>       REPEATED_UTEST_METHODS: null
>       REPEATED_UTEST_STOP_ON_FAILURE: false
>       REPEATED_UTEST_TARGET: testsome
>     parameters:
>       exec_resource_class:
>         default: medium
1641c568,610
<       stop_on_failure:
---
>     resource_class: << parameters.exec_resource_class >>
>     shell: /bin/bash -eo pipefail -l
>     working_directory: ~/
>   java8-executor:
>     docker:
>     - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210929
>     environment:
>       ANT_HOME: /usr/share/ant
>       CASSANDRA_SKIP_SYNC: true
>       CASS_DRIVER_NO_CYTHON: true
>       CASS_DRIVER_NO_EXTENSIONS: true
>       CCM_HEAP_NEWSIZE: 256M
>       CCM_MAX_HEAP_SIZE: 1024M
>       DEFAULT_DIR: /home/cassandra/cassandra-dtest
>       DTEST_BRANCH: trunk
>       DTEST_REPO: https://github.com/apache/cassandra-dtest.git
>       JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>       JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>       JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>       JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>       KEEP_TEST_DIR: true
>       LANG: en_US.UTF-8
>       PYTHONIOENCODING: utf-8
>       PYTHONUNBUFFERED: true
>       REPEATED_DTEST_COUNT: 100
>       REPEATED_DTEST_NAME: null
>       REPEATED_DTEST_STOP_ON_FAILURE: false
>       REPEATED_DTEST_VNODES: false
>       REPEATED_JVM_UPGRADE_DTEST_CLASS: null
>       REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
>       REPEATED_JVM_UPGRADE_DTEST_METHODS: null
>       REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
>       REPEATED_UPGRADE_DTEST_COUNT: 100
>       REPEATED_UPGRADE_DTEST_NAME: null
>       REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
>       REPEATED_UTEST_CLASS: null
>       REPEATED_UTEST_COUNT: 100
>       REPEATED_UTEST_METHODS: null
>       REPEATED_UTEST_STOP_ON_FAILURE: false
>       REPEATED_UTEST_TARGET: testsome
>     parameters:
>       exec_resource_class:
>         default: medium
1642a612,1190
>     resource_class: << parameters.exec_resource_class >>
>     shell: /bin/bash -eo pipefail -l
>     working_directory: ~/
> j11_par_executor:
>   executor:
>     name: java11-executor
>   parallelism: 4
> j11_pre-commit_jobs:
>   jobs:
>   - start_pre-commit_tests:
>       type: approval
>   - j11_build:
>       requires:
>       - start_pre-commit_tests
>   - j11_unit_tests:
>       requires:
>       - j11_build
>   - j11_jvm_dtests:
>       requires:
>       - j11_build
>   - j11_jvm_dtests_vnode:
>       requires:
>       - j11_build
>   - j11_cqlshlib_tests:
>       requires:
>       - j11_build
>   - j11_jvm_dtests:
>       requires:
>       - j11_build
>   - j11_cqlshlib_tests:
>       requires:
>       - j11_build
>   - j11_dtests-with-vnodes:
>       requires:
>       - j11_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - j11_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j11_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j11_build
> j11_repeated_dtest_executor:
>   executor:
>     name: java11-executor
>   parallelism: 4
> j11_repeated_utest_executor:
>   executor:
>     name: java11-executor
>   parallelism: 4
> j11_small_executor:
>   executor:
>     name: java11-executor
>   parallelism: 1
> j11_small_par_executor:
>   executor:
>     name: java11-executor
>   parallelism: 1
> j11_with_dtests_jobs:
>   jobs:
>   - start_j11_build:
>       type: approval
>   - j11_build:
>       requires:
>       - start_j11_build
>   - start_j11_unit_tests:
>       type: approval
>   - j11_unit_tests:
>       requires:
>       - start_j11_unit_tests
>       - j11_build
>   - start_j11_jvm_dtests:
>       type: approval
>   - j11_jvm_dtests:
>       requires:
>       - start_j11_jvm_dtests
>       - j11_build
>   - j11_jvm_dtests_vnode:
>       requires:
>       - start_j11_jvm_dtests
>       - j11_build
>   - start_j11_cqlshlib_tests:
>       type: approval
>   - j11_cqlshlib_tests:
>       requires:
>       - start_j11_cqlshlib_tests
>       - j11_build
>   - start_j11_dtests:
>       type: approval
>   - j11_dtests-with-vnodes:
>       requires:
>       - start_j11_dtests
>       - j11_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - start_j11_dtests
>       - j11_build
>   - start_j11_cqlsh_tests:
>       type: approval
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j11_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j11_build
> j8_medium_par_executor:
>   executor:
>     name: java8-executor
>   parallelism: 1
> j8_par_executor:
>   executor:
>     name: java8-executor
>   parallelism: 4
> j8_pre-commit_jobs:
>   jobs:
>   - start_pre-commit_tests:
>       type: approval
>   - j8_build:
>       requires:
>       - start_pre-commit_tests
>   - j8_unit_tests:
>       requires:
>       - j8_build
>   - j8_jvm_dtests:
>       requires:
>       - j8_build
>   - j8_jvm_dtests_vnode:
>       requires:
>       - j8_build
>   - j8_cqlshlib_tests:
>       requires:
>       - j8_build
>   - j11_unit_tests:
>       requires:
>       - j8_build
>   - start_utests_long:
>       type: approval
>   - utests_long:
>       requires:
>       - start_utests_long
>       - j8_build
>   - start_utests_compression:
>       type: approval
>   - utests_compression:
>       requires:
>       - start_utests_compression
>       - j8_build
>   - start_utests_stress:
>       type: approval
>   - utests_stress:
>       requires:
>       - start_utests_stress
>       - j8_build
>   - start_utests_fqltool:
>       type: approval
>   - utests_fqltool:
>       requires:
>       - start_utests_fqltool
>       - j8_build
>   - start_utests_system_keyspace_directory:
>       type: approval
>   - utests_system_keyspace_directory:
>       requires:
>       - start_utests_system_keyspace_directory
>       - j8_build
>   - start_j8_dtest_jars_build:
>       type: approval
>   - j8_dtest_jars_build:
>       requires:
>       - j8_build
>       - start_j8_dtest_jars_build
>   - start_jvm_upgrade_dtest:
>       type: approval
>   - j8_jvm_upgrade_dtests:
>       requires:
>       - start_jvm_upgrade_dtest
>       - j8_dtest_jars_build
>   - j8_dtests-with-vnodes:
>       requires:
>       - j8_build
>   - j8_dtests-no-vnodes:
>       requires:
>       - j8_build
>   - j11_dtests-with-vnodes:
>       requires:
>       - j8_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - j8_build
>   - start_upgrade_tests:
>       type: approval
>   - j8_upgradetests-no-vnodes:
>       requires:
>       - j8_build
>       - start_upgrade_tests
>   - j8_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - j8_build
>   - j8_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - j8_build
>   - j8_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - j8_build
>   - j8_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - j8_build
>   - start_j8_repeated_utest:
>       type: approval
>   - j8_repeated_utest:
>       requires:
>       - start_j8_repeated_utest
>       - j8_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j8_build
>   - start_j8_repeated_dtest:
>       type: approval
>   - j8_repeated_dtest:
>       requires:
>       - start_j8_repeated_dtest
>       - j8_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j8_build
>   - start_repeated_upgrade_dtest:
>       type: approval
>   - repeated_upgrade_dtest:
>       requires:
>       - start_repeated_upgrade_dtest
>       - j8_build
>   - start_repeated_jvm_upgrade_dtest:
>       type: approval
>   - repeated_jvm_upgrade_dtest:
>       requires:
>       - start_repeated_jvm_upgrade_dtest
>       - j8_dtest_jars_build
> j8_repeated_dtest_executor:
>   executor:
>     name: java8-executor
>   parallelism: 4
> j8_repeated_jvm_upgrade_dtest_executor:
>   executor:
>     name: java8-executor
>   parallelism: 4
> j8_repeated_upgrade_dtest_executor:
>   executor:
>     name: java8-executor
>   parallelism: 4
> j8_repeated_utest_executor:
>   executor:
>     name: java8-executor
>   parallelism: 4
> j8_seq_executor:
>   executor:
>     name: java8-executor
>   parallelism: 1
> j8_small_executor:
>   executor:
>     exec_resource_class: medium
>     name: java8-executor
>   parallelism: 1
> j8_small_par_executor:
>   executor:
>     name: java8-executor
>   parallelism: 1
> j8_with_dtests_jobs:
>   jobs:
>   - start_j8_build:
>       type: approval
>   - j8_build:
>       requires:
>       - start_j8_build
>   - start_j8_unit_tests:
>       type: approval
>   - j8_unit_tests:
>       requires:
>       - start_j8_unit_tests
>       - j8_build
>   - start_j8_jvm_dtests:
>       type: approval
>   - j8_jvm_dtests:
>       requires:
>       - start_j8_jvm_dtests
>       - j8_build
>   - j8_jvm_dtests_vnode:
>       requires:
>       - start_j8_jvm_dtests
>       - j8_build
>   - start_j8_cqlshlib_tests:
>       type: approval
>   - j8_cqlshlib_tests:
>       requires:
>       - start_j8_cqlshlib_tests
>       - j8_build
>   - start_j11_unit_tests:
>       type: approval
>   - j11_unit_tests:
>       requires:
>       - start_j11_unit_tests
>       - j8_build
>   - start_utests_long:
>       type: approval
>   - utests_long:
>       requires:
>       - start_utests_long
>       - j8_build
>   - start_utests_compression:
>       type: approval
>   - utests_compression:
>       requires:
>       - start_utests_compression
>       - j8_build
>   - start_utests_stress:
>       type: approval
>   - utests_stress:
>       requires:
>       - start_utests_stress
>       - j8_build
>   - start_utests_fqltool:
>       type: approval
>   - utests_fqltool:
>       requires:
>       - start_utests_fqltool
>       - j8_build
>   - start_utests_system_keyspace_directory:
>       type: approval
>   - utests_system_keyspace_directory:
>       requires:
>       - start_utests_system_keyspace_directory
>       - j8_build
>   - start_j8_dtest_jars_build:
>       type: approval
>   - j8_dtest_jars_build:
>       requires:
>       - j8_build
>       - start_j8_dtest_jars_build
>   - start_jvm_upgrade_dtest:
>       type: approval
>   - j8_jvm_upgrade_dtests:
>       requires:
>       - start_jvm_upgrade_dtest
>       - j8_dtest_jars_build
>   - start_j8_dtests:
>       type: approval
>   - j8_dtests-with-vnodes:
>       requires:
>       - start_j8_dtests
>       - j8_build
>   - j8_dtests-no-vnodes:
>       requires:
>       - start_j8_dtests
>       - j8_build
>   - start_j11_dtests:
>       type: approval
>   - j11_dtests-with-vnodes:
>       requires:
>       - start_j11_dtests
>       - j8_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - start_j11_dtests
>       - j8_build
>   - start_upgrade_tests:
>       type: approval
>   - j8_upgradetests-no-vnodes:
>       requires:
>       - start_upgrade_tests
>       - j8_build
>   - start_j8_cqlsh_tests:
>       type: approval
>   - j8_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - j8_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - j8_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - j8_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - start_j11_cqlsh_tests:
>       type: approval
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - start_j8_repeated_utest:
>       type: approval
>   - j8_repeated_utest:
>       requires:
>       - start_j8_repeated_utest
>       - j8_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j8_build
>   - start_j8_repeated_dtest:
>       type: approval
>   - j8_repeated_dtest:
>       requires:
>       - start_j8_repeated_dtest
>       - j8_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j8_build
>   - start_repeated_upgrade_dtest:
>       type: approval
>   - repeated_upgrade_dtest:
>       requires:
>       - start_repeated_upgrade_dtest
>       - j8_build
>   - start_repeated_jvm_upgrade_dtest:
>       type: approval
>   - repeated_jvm_upgrade_dtest:
>       requires:
>       - start_repeated_jvm_upgrade_dtest
>       - j8_dtest_jars_build
> jobs:
>   j11_build:
>     executor:
>       exec_resource_class: medium
>       name: java11-executor
>     parallelism: 1
>     steps:
>     - log_environment
>     - clone_cassandra
>     - build_cassandra
>     - run_eclipse_warnings
>     - persist_to_workspace:
>         paths:
>         - cassandra
>         - .m2
>         root: /home/cassandra
>   j11_cqlsh-dtests-py3-no-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j11_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
>         file_tag: j11_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>   j11_cqlsh-dtests-py3-with-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j11_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
>         file_tag: j11_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>   j11_cqlsh-dtests-py38-no-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j11_without_vnodes
>         python_version: '3.8'
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         file_tag: j11_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>         python_version: '3.8'
>   j11_cqlsh-dtests-py38-with-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 50
1644,1705c1192,2109
<       - run:
<           name: Run repeated Python dtest
<           no_output_timeout: 15m
<           command: |
<             if [ "<<parameters.tests>>" == "<nil>" ]; then
<               echo "Repeated dtest name hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" == "<nil>" ]; then
<               echo "Repeated dtest count hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" -le 0 ]; then
<               echo "Repeated dtest count is lesser or equals than zero, exiting without running any test"
<             else
< 
<               # Calculate the number of test iterations to be run by the current parallel runner.
<               # Since we are running the same test multiple times there is no need to use `circleci tests split`.
<               count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))
<               if (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then
<                 count=$((count+1))
<               fi
< 
<               if (($count <= 0)); then
<                 echo "No tests to run in this runner"
<               else
<                 echo "Running <<parameters.tests>> $count times"
<             
<                 source ~/env3.6/bin/activate
<                 export PATH=$JAVA_HOME/bin:$PATH
< 
<                 java -version
<                 cd ~/cassandra-dtest
<                 mkdir -p /tmp/dtest
< 
<                 echo "env: $(env)"
<                 echo "** done env"
<                 mkdir -p /tmp/results/dtests
< 
<                 stop_on_failure_arg=""
<                 if <<parameters.stop_on_failure>>; then
<                   stop_on_failure_arg="-x"
<                 fi
< 
<                 vnodes_args=""
<                 if <<parameters.vnodes>>; then
<                   vnodes_args="--use-vnodes --num-tokens=16"
<                 fi
< 
<                 upgrade_arg=""
<                 if <<parameters.upgrade>>; then
<                   upgrade_arg="--execute-upgrade-tests"
<                 fi
< 
<                 # we need the "set -o pipefail" here so that the exit code that circleci will actually use is from pytest and not the exit code from tee
<                 set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir <<parameters.tests>> | tee /tmp/dtest/stdout.txt
<               fi
<             fi
<       - store_test_results:
<           path: /tmp/results
<       - store_artifacts:
<           path: /tmp/dtest
<           destination: dtest
<       - store_artifacts:
<           path: ~/cassandra-dtest/logs
<           destination: dtest_logs
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j11_with_vnodes
>         python_version: '3.8'
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         file_tag: j11_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>         python_version: '3.8'
>   j11_cqlshlib_tests:
>     executor:
>       exec_resource_class: medium
>       name: java11-executor
>     parallelism: 1
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - run_cqlshlib_tests
>   j11_dtests-no-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j11_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           not cql'
>     - run_dtests:
>         file_tag: j11_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>   j11_dtests-with-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j11_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k not cql'
>     - run_dtests:
>         file_tag: j11_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>   j11_jvm_dtests:
>     executor:
>       exec_resource_class: medium
>       name: java11-executor
>     parallelism: 10
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
>   j11_jvm_dtests_vnode:
>     executor:
>       exec_resource_class: medium
>       name: java11-executor
>     parallelism: 10
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         arguments: -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'
>         classlistprefix: distributed
>         target: testclasslist
>   j11_repeated_dtest:
>     executor:
>       exec_resource_class: large
>       name: java11-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - clone_dtest
>     - create_venv
>     - run_repeated_dtest:
>         count: ${REPEATED_DTEST_COUNT}
>         stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
>         tests: ${REPEATED_DTEST_NAME}
>         upgrade: 'false'
>         vnodes: ${REPEATED_DTEST_VNODES}
>   j11_repeated_utest:
>     executor:
>       exec_resource_class: medium
>       name: java11-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - run_repeated_utest:
>         class: ${REPEATED_UTEST_CLASS}
>         count: ${REPEATED_UTEST_COUNT}
>         methods: ${REPEATED_UTEST_METHODS}
>         stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
>         target: ${REPEATED_UTEST_TARGET}
>   j11_unit_tests:
>     executor:
>       exec_resource_class: medium
>       name: java11-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests
>   j8_build:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 1
>     steps:
>     - log_environment
>     - clone_cassandra
>     - build_cassandra
>     - run_eclipse_warnings
>     - persist_to_workspace:
>         paths:
>         - cassandra
>         - .m2
>         root: /home/cassandra
>   j8_cqlsh-dtests-py3-no-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
>         file_tag: j8_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>   j8_cqlsh-dtests-py3-with-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
>         file_tag: j8_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>   j8_cqlsh-dtests-py38-no-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j8_without_vnodes
>         python_version: '3.8'
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         file_tag: j8_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>         python_version: '3.8'
>   j8_cqlsh-dtests-py38-with-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j8_with_vnodes
>         python_version: '3.8'
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>     - run_dtests:
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         file_tag: j8_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>         python_version: '3.8'
>   j8_cqlshlib_tests:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 1
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - run_cqlshlib_tests
>   j8_dtest_jars_build:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 1
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - build_cassandra_dtest_jars
>     - persist_to_workspace:
>         paths:
>         - dtest_jars
>         root: /home/cassandra
>   j8_dtests-no-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           not cql'
>     - run_dtests:
>         file_tag: j8_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>   j8_dtests-with-vnodes:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 50
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k not cql'
>     - run_dtests:
>         file_tag: j8_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>   j8_jvm_dtests:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 10
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
>   j8_jvm_dtests_vnode:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 10
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         arguments: -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'
>         classlistprefix: distributed
>         target: testclasslist
>   j8_jvm_upgrade_dtests:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 4
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
>   j8_repeated_dtest:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - run_repeated_dtest:
>         count: ${REPEATED_DTEST_COUNT}
>         stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
>         tests: ${REPEATED_DTEST_NAME}
>         upgrade: 'false'
>         vnodes: ${REPEATED_DTEST_VNODES}
>   j8_repeated_utest:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - run_repeated_utest:
>         class: ${REPEATED_UTEST_CLASS}
>         count: ${REPEATED_UTEST_COUNT}
>         methods: ${REPEATED_UTEST_METHODS}
>         stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
>         target: ${REPEATED_UTEST_TARGET}
>   j8_unit_tests:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests
>   j8_upgradetests-no-vnodes:
>     executor:
>       exec_resource_class: xlarge
>       name: java8-executor
>     parallelism: 100
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_upgradetests_without_vnodes
>         run_dtests_extra_args: --execute-upgrade-tests-only --upgrade-target-version-only
>           --upgrade-version-selection all
>     - run_dtests:
>         file_tag: j8_upgradetests_without_vnodes
>         pytest_extra_args: --execute-upgrade-tests-only --upgrade-target-version-only
>           --upgrade-version-selection all
>   repeated_jvm_upgrade_dtest:
>     executor:
>       exec_resource_class: large
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - run_repeated_utest:
>         class: ${REPEATED_JVM_UPGRADE_DTEST_CLASS}
>         count: ${REPEATED_JVM_UPGRADE_DTEST_COUNT}
>         methods: ${REPEATED_JVM_UPGRADE_DTEST_METHODS}
>         stop_on_failure: ${REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE}
>         target: test-jvm-dtest-some
>   repeated_upgrade_dtest:
>     executor:
>       exec_resource_class: xlarge
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - run_repeated_dtest:
>         count: ${REPEATED_UPGRADE_DTEST_COUNT}
>         stop_on_failure: ${REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE}
>         tests: ${REPEATED_UPGRADE_DTEST_NAME}
>         upgrade: 'true'
>         vnodes: 'false'
>   utests_compression:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests:
>         target: testclasslist-compression
>   utests_fqltool:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 1
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - run_junit_tests:
>         target: fqltool-test
>   utests_long:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 1
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - run_junit_tests:
>         target: long-test
>   utests_stress:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 1
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - run_junit_tests:
>         target: stress-test
>   utests_system_keyspace_directory:
>     executor:
>       exec_resource_class: medium
>       name: java8-executor
>     parallelism: 25
>     steps:
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests:
>         target: testclasslist-system-keyspace-directory
> version: 2.1
> workflows:
>   java11_pre-commit_tests:
>     jobs:
>     - start_pre-commit_tests:
>         type: approval
>     - j11_build:
>         requires:
>         - start_pre-commit_tests
>     - j11_unit_tests:
>         requires:
>         - j11_build
>     - j11_jvm_dtests:
>         requires:
>         - j11_build
>     - j11_jvm_dtests_vnode:
>         requires:
>         - j11_build
>     - j11_cqlshlib_tests:
>         requires:
>         - j11_build
>     - j11_jvm_dtests:
>         requires:
>         - j11_build
>     - j11_cqlshlib_tests:
>         requires:
>         - j11_build
>     - j11_dtests-with-vnodes:
>         requires:
>         - j11_build
>     - j11_dtests-no-vnodes:
>         requires:
>         - j11_build
>     - j11_cqlsh-dtests-py3-with-vnodes:
>         requires:
>         - j11_build
>     - j11_cqlsh-dtests-py38-with-vnodes:
>         requires:
>         - j11_build
>     - j11_cqlsh-dtests-py3-no-vnodes:
>         requires:
>         - j11_build
>     - j11_cqlsh-dtests-py38-no-vnodes:
>         requires:
>         - j11_build
>     - start_j11_repeated_utest:
>         type: approval
>     - j11_repeated_utest:
>         requires:
>         - start_j11_repeated_utest
>         - j11_build
>     - start_j11_repeated_dtest:
>         type: approval
>     - j11_repeated_dtest:
>         requires:
>         - start_j11_repeated_dtest
>         - j11_build
>   java11_separate_tests:
>     jobs:
>     - start_j11_build:
>         type: approval
>     - j11_build:
>         requires:
>         - start_j11_build
>     - start_j11_unit_tests:
>         type: approval
>     - j11_unit_tests:
>         requires:
>         - start_j11_unit_tests
>         - j11_build
>     - start_j11_jvm_dtests:
>         type: approval
>     - j11_jvm_dtests:
>         requires:
>         - start_j11_jvm_dtests
>         - j11_build
>     - j11_jvm_dtests_vnode:
>         requires:
>         - start_j11_jvm_dtests
>         - j11_build
>     - start_j11_cqlshlib_tests:
>         type: approval
>     - j11_cqlshlib_tests:
>         requires:
>         - start_j11_cqlshlib_tests
>         - j11_build
>     - start_j11_dtests:
>         type: approval
>     - j11_dtests-with-vnodes:
>         requires:
>         - start_j11_dtests
>         - j11_build
>     - j11_dtests-no-vnodes:
>         requires:
>         - start_j11_dtests
>         - j11_build
>     - start_j11_cqlsh_tests:
>         type: approval
>     - j11_cqlsh-dtests-py3-with-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j11_build
>     - j11_cqlsh-dtests-py38-with-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j11_build
>     - j11_cqlsh-dtests-py3-no-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j11_build
>     - j11_cqlsh-dtests-py38-no-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j11_build
>     - start_j11_repeated_utest:
>         type: approval
>     - j11_repeated_utest:
>         requires:
>         - start_j11_repeated_utest
>         - j11_build
>     - start_j11_repeated_dtest:
>         type: approval
>     - j11_repeated_dtest:
>         requires:
>         - start_j11_repeated_dtest
>         - j11_build
>   java8_pre-commit_tests:
>     jobs:
>     - start_pre-commit_tests:
>         type: approval
>     - j8_build:
>         requires:
>         - start_pre-commit_tests
>     - j8_unit_tests:
>         requires:
>         - j8_build
>     - j8_jvm_dtests:
>         requires:
>         - j8_build
>     - j8_jvm_dtests_vnode:
>         requires:
>         - j8_build
>     - j8_cqlshlib_tests:
>         requires:
>         - j8_build
>     - j11_unit_tests:
>         requires:
>         - j8_build
>     - start_utests_long:
>         type: approval
>     - utests_long:
>         requires:
>         - start_utests_long
>         - j8_build
>     - start_utests_compression:
>         type: approval
>     - utests_compression:
>         requires:
>         - start_utests_compression
>         - j8_build
>     - start_utests_stress:
>         type: approval
>     - utests_stress:
>         requires:
>         - start_utests_stress
>         - j8_build
>     - start_utests_fqltool:
>         type: approval
>     - utests_fqltool:
>         requires:
>         - start_utests_fqltool
>         - j8_build
>     - start_utests_system_keyspace_directory:
>         type: approval
>     - utests_system_keyspace_directory:
>         requires:
>         - start_utests_system_keyspace_directory
>         - j8_build
>     - start_j8_dtest_jars_build:
>         type: approval
>     - j8_dtest_jars_build:
>         requires:
>         - j8_build
>         - start_j8_dtest_jars_build
>     - start_jvm_upgrade_dtest:
>         type: approval
>     - j8_jvm_upgrade_dtests:
>         requires:
>         - start_jvm_upgrade_dtest
>         - j8_dtest_jars_build
>     - j8_dtests-with-vnodes:
>         requires:
>         - j8_build
>     - j8_dtests-no-vnodes:
>         requires:
>         - j8_build
>     - j11_dtests-with-vnodes:
>         requires:
>         - j8_build
>     - j11_dtests-no-vnodes:
>         requires:
>         - j8_build
>     - start_upgrade_tests:
>         type: approval
>     - j8_upgradetests-no-vnodes:
>         requires:
>         - j8_build
>         - start_upgrade_tests
>     - j8_cqlsh-dtests-py3-with-vnodes:
>         requires:
>         - j8_build
>     - j8_cqlsh-dtests-py38-with-vnodes:
>         requires:
>         - j8_build
>     - j8_cqlsh-dtests-py3-no-vnodes:
>         requires:
>         - j8_build
>     - j8_cqlsh-dtests-py38-no-vnodes:
>         requires:
>         - j8_build
>     - j11_cqlsh-dtests-py3-with-vnodes:
>         requires:
>         - j8_build
>     - j11_cqlsh-dtests-py38-with-vnodes:
>         requires:
>         - j8_build
>     - j11_cqlsh-dtests-py3-no-vnodes:
>         requires:
>         - j8_build
>     - j11_cqlsh-dtests-py38-no-vnodes:
>         requires:
>         - j8_build
>     - start_j8_repeated_utest:
>         type: approval
>     - j8_repeated_utest:
>         requires:
>         - start_j8_repeated_utest
>         - j8_build
>     - start_j11_repeated_utest:
>         type: approval
>     - j11_repeated_utest:
>         requires:
>         - start_j11_repeated_utest
>         - j8_build
>     - start_j8_repeated_dtest:
>         type: approval
>     - j8_repeated_dtest:
>         requires:
>         - start_j8_repeated_dtest
>         - j8_build
>     - start_j11_repeated_dtest:
>         type: approval
>     - j11_repeated_dtest:
>         requires:
>         - start_j11_repeated_dtest
>         - j8_build
>     - start_repeated_upgrade_dtest:
>         type: approval
>     - repeated_upgrade_dtest:
>         requires:
>         - start_repeated_upgrade_dtest
>         - j8_build
>     - start_repeated_jvm_upgrade_dtest:
>         type: approval
>     - repeated_jvm_upgrade_dtest:
>         requires:
>         - start_repeated_jvm_upgrade_dtest
>         - j8_dtest_jars_build
>   java8_separate_tests:
>     jobs:
>     - start_j8_build:
>         type: approval
>     - j8_build:
>         requires:
>         - start_j8_build
>     - start_j8_unit_tests:
>         type: approval
>     - j8_unit_tests:
>         requires:
>         - start_j8_unit_tests
>         - j8_build
>     - start_j8_jvm_dtests:
>         type: approval
>     - j8_jvm_dtests:
>         requires:
>         - start_j8_jvm_dtests
>         - j8_build
>     - j8_jvm_dtests_vnode:
>         requires:
>         - start_j8_jvm_dtests
>         - j8_build
>     - start_j8_cqlshlib_tests:
>         type: approval
>     - j8_cqlshlib_tests:
>         requires:
>         - start_j8_cqlshlib_tests
>         - j8_build
>     - start_j11_unit_tests:
>         type: approval
>     - j11_unit_tests:
>         requires:
>         - start_j11_unit_tests
>         - j8_build
>     - start_utests_long:
>         type: approval
>     - utests_long:
>         requires:
>         - start_utests_long
>         - j8_build
>     - start_utests_compression:
>         type: approval
>     - utests_compression:
>         requires:
>         - start_utests_compression
>         - j8_build
>     - start_utests_stress:
>         type: approval
>     - utests_stress:
>         requires:
>         - start_utests_stress
>         - j8_build
>     - start_utests_fqltool:
>         type: approval
>     - utests_fqltool:
>         requires:
>         - start_utests_fqltool
>         - j8_build
>     - start_utests_system_keyspace_directory:
>         type: approval
>     - utests_system_keyspace_directory:
>         requires:
>         - start_utests_system_keyspace_directory
>         - j8_build
>     - start_j8_dtest_jars_build:
>         type: approval
>     - j8_dtest_jars_build:
>         requires:
>         - j8_build
>         - start_j8_dtest_jars_build
>     - start_jvm_upgrade_dtest:
>         type: approval
>     - j8_jvm_upgrade_dtests:
>         requires:
>         - start_jvm_upgrade_dtest
>         - j8_dtest_jars_build
>     - start_j8_dtests:
>         type: approval
>     - j8_dtests-with-vnodes:
>         requires:
>         - start_j8_dtests
>         - j8_build
>     - j8_dtests-no-vnodes:
>         requires:
>         - start_j8_dtests
>         - j8_build
>     - start_j11_dtests:
>         type: approval
>     - j11_dtests-with-vnodes:
>         requires:
>         - start_j11_dtests
>         - j8_build
>     - j11_dtests-no-vnodes:
>         requires:
>         - start_j11_dtests
>         - j8_build
>     - start_upgrade_tests:
>         type: approval
>     - j8_upgradetests-no-vnodes:
>         requires:
>         - start_upgrade_tests
>         - j8_build
>     - start_j8_cqlsh_tests:
>         type: approval
>     - j8_cqlsh-dtests-py3-with-vnodes:
>         requires:
>         - start_j8_cqlsh_tests
>         - j8_build
>     - j8_cqlsh-dtests-py38-with-vnodes:
>         requires:
>         - start_j8_cqlsh_tests
>         - j8_build
>     - j8_cqlsh-dtests-py3-no-vnodes:
>         requires:
>         - start_j8_cqlsh_tests
>         - j8_build
>     - j8_cqlsh-dtests-py38-no-vnodes:
>         requires:
>         - start_j8_cqlsh_tests
>         - j8_build
>     - start_j11_cqlsh_tests:
>         type: approval
>     - j11_cqlsh-dtests-py3-with-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j8_build
>     - j11_cqlsh-dtests-py38-with-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j8_build
>     - j11_cqlsh-dtests-py3-no-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j8_build
>     - j11_cqlsh-dtests-py38-no-vnodes:
>         requires:
>         - start_j11_cqlsh_tests
>         - j8_build
>     - start_j8_repeated_utest:
>         type: approval
>     - j8_repeated_utest:
>         requires:
>         - start_j8_repeated_utest
>         - j8_build
>     - start_j11_repeated_utest:
>         type: approval
>     - j11_repeated_utest:
>         requires:
>         - start_j11_repeated_utest
>         - j8_build
>     - start_j8_repeated_dtest:
>         type: approval
>     - j8_repeated_dtest:
>         requires:
>         - start_j8_repeated_dtest
>         - j8_build
>     - start_j11_repeated_dtest:
>         type: approval
>     - j11_repeated_dtest:
>         requires:
>         - start_j11_repeated_dtest
>         - j8_build
>     - start_repeated_upgrade_dtest:
>         type: approval
>     - repeated_upgrade_dtest:
>         requires:
>         - start_repeated_upgrade_dtest
>         - j8_build
>     - start_repeated_jvm_upgrade_dtest:
>         type: approval
>     - repeated_jvm_upgrade_dtest:
>         requires:
>         - start_repeated_jvm_upgrade_dtest
>         - j8_dtest_jars_build
>   version: 2
