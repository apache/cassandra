17d16
< #
20,101c19,51
< 
< default_env_vars: &default_env_vars
< 
<     # The values of some of these environment variables are meant to be frequently changed by developers.
<     # The generate.sh script contains a list of accepted environment variables that should contain some of
<     # these variables. Also, some variables are mentioned in the documentation, at least in
<     # .circleci/readme.md and in doc/source/development/testing.rst.
<     # If you modify these variables, or if you add new variables whose values are meant to be changed frequently,
<     # please remember to modify the generate.sh script and the documentation accordingly.
< 
<     ANT_HOME: /usr/share/ant
<     JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
<     JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
<     LANG: en_US.UTF-8
<     KEEP_TEST_DIR: true
<     DEFAULT_DIR: /home/cassandra/cassandra-dtest
<     PYTHONIOENCODING: utf-8
<     PYTHONUNBUFFERED: true
<     CASS_DRIVER_NO_EXTENSIONS: true
<     CASS_DRIVER_NO_CYTHON: true
<     #Skip all syncing to disk to avoid performance issues in flaky CI environments
<     CASSANDRA_SKIP_SYNC: true
<     DTEST_REPO: https://github.com/apache/cassandra-dtest.git
<     DTEST_BRANCH: trunk
<     CCM_MAX_HEAP_SIZE: 1024M
<     CCM_HEAP_NEWSIZE: 256M
< 
<     # The Ant test target to run, for example:
<     # REPEATED_UTEST_TARGET: testsome
<     # REPEATED_UTEST_TARGET: test-jvm-dtest-some
<     # REPEATED_UTEST_TARGET: test-cdc
<     # REPEATED_UTEST_TARGET: test-compression
<     # REPEATED_UTEST_TARGET: test-system-keyspace-directory
<     REPEATED_UTEST_TARGET: testsome
<     # The name of JUnit class to be run multiple times, for example:
<     # REPEATED_UTEST_CLASS: org.apache.cassandra.cql3.ViewTest
<     # REPEATED_UTEST_CLASS: org.apache.cassandra.distributed.test.PagingTest
<     REPEATED_UTEST_CLASS:
<     # The optional specific methods within REPEATED_UTEST_CLASS to be run, for example:
<     # REPEATED_UTEST_METHODS: testCompoundPartitionKey
<     # REPEATED_UTEST_METHODS: testCompoundPartitionKey,testStaticTable
<     # Please note that some Ant targets will ignore the -Dtest.methods argument produced by this.
<     REPEATED_UTEST_METHODS:
<     # The number of times that the repeated JUnit test should be run
<     REPEATED_UTEST_COUNT: 100
<     # Whether the test iteration should stop on the first failure
<     REPEATED_UTEST_STOP_ON_FAILURE: false
< 
<     # A Python dtest to be run multiple times, for example:
<     # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py
<     # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py::TestCqlshSmoke
<     # REPEATED_DTEST_NAME: cqlsh_tests/test_cqlsh.py::TestCqlshSmoke::test_create_index
<     REPEATED_DTEST_NAME:
<     # Whether the repeated Python dtest should use vnodes
<     REPEATED_DTEST_VNODES: false
<     # The number of times that the repeated Python dtest should be run
<     REPEATED_DTEST_COUNT: 100
<     # Whether the test iteration should stop on the first failure
<     REPEATED_DTEST_STOP_ON_FAILURE: false
< 
<     # A Python upgrade dtest to be run multiple times, for example:
<     # REPEATED_UPGRADE_DTEST_NAME: upgrade_tests/cql_tests.py
<     # REPEATED_UPGRADE_DTEST_NAME: upgrade_tests/cql_tests.py::TestCQLNodes2RF1_Upgrade_current_4_0_x_To_indev_4_0_x
<     REPEATED_UPGRADE_DTEST_NAME:
<     # The number of times that the repeated Python upgrade dtest should be run
<     REPEATED_UPGRADE_DTEST_COUNT: 100
<     # Whether the test iteration should stop on the first failure
<     REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
< 
<     # The name of JVM upgrade dtest class to be run multiple times, for example:
<     # REPEATED_JVM_UPGRADE_DTEST_CLASS: org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test
<     REPEATED_JVM_UPGRADE_DTEST_CLASS:
<     # The optional specific methods within REPEATED_JVM_UPGRADE_DTEST_CLASS to be run, for example:
<     # REPEATED_JVM_UPGRADE_DTEST_METHODS: testAvailabilityV30ToV3X
<     # REPEATED_JVM_UPGRADE_DTEST_METHODS: testAvailabilityV30ToV3X,testAvailabilityV30ToV4
<     REPEATED_JVM_UPGRADE_DTEST_METHODS:
<     # The number of times that the repeated JVM upgrade dtest should be run
<     REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
<     # Whether the JVM upgrade dtest iteration should stop on the first failure
<     REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
< 
< j8_par_executor: &j8_par_executor
---
> default_env_vars:
>   ANT_HOME: /usr/share/ant
>   JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>   JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>   LANG: en_US.UTF-8
>   KEEP_TEST_DIR: true
>   DEFAULT_DIR: /home/cassandra/cassandra-dtest
>   PYTHONIOENCODING: utf-8
>   PYTHONUNBUFFERED: true
>   CASS_DRIVER_NO_EXTENSIONS: true
>   CASS_DRIVER_NO_CYTHON: true
>   CASSANDRA_SKIP_SYNC: true
>   DTEST_REPO: https://github.com/apache/cassandra-dtest.git
>   DTEST_BRANCH: trunk
>   CCM_MAX_HEAP_SIZE: 1024M
>   CCM_HEAP_NEWSIZE: 256M
>   REPEATED_UTEST_TARGET: testsome
>   REPEATED_UTEST_CLASS: null
>   REPEATED_UTEST_METHODS: null
>   REPEATED_UTEST_COUNT: 100
>   REPEATED_UTEST_STOP_ON_FAILURE: false
>   REPEATED_DTEST_NAME: null
>   REPEATED_DTEST_VNODES: false
>   REPEATED_DTEST_COUNT: 100
>   REPEATED_DTEST_STOP_ON_FAILURE: false
>   REPEATED_UPGRADE_DTEST_NAME: null
>   REPEATED_UPGRADE_DTEST_COUNT: 100
>   REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
>   REPEATED_JVM_UPGRADE_DTEST_CLASS: null
>   REPEATED_JVM_UPGRADE_DTEST_METHODS: null
>   REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
>   REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
> j8_par_executor:
104d53
<     #exec_resource_class: xlarge
106,107c55
< 
< j8_small_par_executor: &j8_small_par_executor
---
> j8_small_par_executor:
110d57
<     #exec_resource_class: xlarge
112,113c59
< 
< j8_small_executor: &j8_small_executor
---
> j8_small_executor:
118,119c64
< 
< j8_medium_par_executor: &j8_medium_par_executor
---
> j8_medium_par_executor:
122d66
<     #exec_resource_class: xlarge
124,125c68
< 
< j8_seq_executor: &j8_seq_executor
---
> j8_seq_executor:
128,131c71,72
<     #exec_resource_class: xlarge
<   parallelism: 1 # sequential, single container tests: no parallelism benefits
< 
< j11_par_executor: &j11_par_executor
---
>   parallelism: 1
> j11_par_executor:
134d74
<     #exec_resource_class: xlarge
136,137c76
< 
< j11_small_par_executor: &j11_small_par_executor
---
> j11_small_par_executor:
140d78
<     #exec_resource_class: xlarge
142,143c80
< 
< j11_small_executor: &j11_small_executor
---
> j11_small_executor:
146d82
<     #exec_resource_class: medium
148,149c84
< 
< j8_repeated_utest_executor: &j8_repeated_utest_executor
---
> j8_repeated_utest_executor:
153,154c88
< 
< j8_repeated_dtest_executor: &j8_repeated_dtest_executor
---
> j8_repeated_dtest_executor:
158,159c92
< 
< j8_repeated_upgrade_dtest_executor: &j8_repeated_upgrade_dtest_executor
---
> j8_repeated_upgrade_dtest_executor:
163,164c96
< 
< j8_repeated_jvm_upgrade_dtest_executor: &j8_repeated_jvm_upgrade_dtest_executor
---
> j8_repeated_jvm_upgrade_dtest_executor:
168,169c100
< 
< j11_repeated_utest_executor: &j11_repeated_utest_executor
---
> j11_repeated_utest_executor:
173,174c104
< 
< j11_repeated_dtest_executor: &j11_repeated_dtest_executor
---
> j11_repeated_dtest_executor:
178,179c108
< 
< j8_with_dtests_jobs: &j8_with_dtests_jobs
---
> j8_with_dtests_jobs:
180a110,552
>   - start_j8_build:
>       type: approval
>   - j8_build:
>       requires:
>       - start_j8_build
>   - start_j8_unit_tests:
>       type: approval
>   - j8_unit_tests:
>       requires:
>       - start_j8_unit_tests
>       - j8_build
>   - start_j8_jvm_dtests:
>       type: approval
>   - j8_jvm_dtests:
>       requires:
>       - start_j8_jvm_dtests
>       - j8_build
>   - j8_jvm_dtests_vnode:
>       requires:
>       - start_j8_jvm_dtests
>       - j8_build
>   - start_j8_cqlshlib_tests:
>       type: approval
>   - j8_cqlshlib_tests:
>       requires:
>       - start_j8_cqlshlib_tests
>       - j8_build
>   - start_j11_unit_tests:
>       type: approval
>   - j11_unit_tests:
>       requires:
>       - start_j11_unit_tests
>       - j8_build
>   - start_utests_long:
>       type: approval
>   - utests_long:
>       requires:
>       - start_utests_long
>       - j8_build
>   - start_utests_compression:
>       type: approval
>   - utests_compression:
>       requires:
>       - start_utests_compression
>       - j8_build
>   - start_utests_stress:
>       type: approval
>   - utests_stress:
>       requires:
>       - start_utests_stress
>       - j8_build
>   - start_utests_fqltool:
>       type: approval
>   - utests_fqltool:
>       requires:
>       - start_utests_fqltool
>       - j8_build
>   - start_utests_system_keyspace_directory:
>       type: approval
>   - utests_system_keyspace_directory:
>       requires:
>       - start_utests_system_keyspace_directory
>       - j8_build
>   - start_j8_dtest_jars_build:
>       type: approval
>   - j8_dtest_jars_build:
>       requires:
>       - j8_build
>       - start_j8_dtest_jars_build
>   - start_jvm_upgrade_dtest:
>       type: approval
>   - j8_jvm_upgrade_dtests:
>       requires:
>       - start_jvm_upgrade_dtest
>       - j8_dtest_jars_build
>   - start_j8_dtests:
>       type: approval
>   - j8_dtests-with-vnodes:
>       requires:
>       - start_j8_dtests
>       - j8_build
>   - j8_dtests-no-vnodes:
>       requires:
>       - start_j8_dtests
>       - j8_build
>   - start_j11_dtests:
>       type: approval
>   - j11_dtests-with-vnodes:
>       requires:
>       - start_j11_dtests
>       - j8_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - start_j11_dtests
>       - j8_build
>   - start_upgrade_tests:
>       type: approval
>   - j8_upgradetests-no-vnodes:
>       requires:
>       - start_upgrade_tests
>       - j8_build
>   - start_j8_cqlsh_tests:
>       type: approval
>   - j8_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - j8_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - j8_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - j8_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - start_j8_cqlsh_tests
>       - j8_build
>   - start_j11_cqlsh_tests:
>       type: approval
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j8_build
>   - start_j8_repeated_utest:
>       type: approval
>   - j8_repeated_utest:
>       requires:
>       - start_j8_repeated_utest
>       - j8_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j8_build
>   - start_j8_repeated_dtest:
>       type: approval
>   - j8_repeated_dtest:
>       requires:
>       - start_j8_repeated_dtest
>       - j8_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j8_build
>   - start_repeated_upgrade_dtest:
>       type: approval
>   - repeated_upgrade_dtest:
>       requires:
>       - start_repeated_upgrade_dtest
>       - j8_build
>   - start_repeated_jvm_upgrade_dtest:
>       type: approval
>   - repeated_jvm_upgrade_dtest:
>       requires:
>       - start_repeated_jvm_upgrade_dtest
>       - j8_dtest_jars_build
> j8_pre-commit_jobs:
>   jobs:
>   - start_pre-commit_tests:
>       type: approval
>   - j8_build:
>       requires:
>       - start_pre-commit_tests
>   - j8_unit_tests:
>       requires:
>       - j8_build
>   - j8_jvm_dtests:
>       requires:
>       - j8_build
>   - j8_jvm_dtests_vnode:
>       requires:
>       - j8_build
>   - j8_cqlshlib_tests:
>       requires:
>       - j8_build
>   - j11_unit_tests:
>       requires:
>       - j8_build
>   - start_utests_long:
>       type: approval
>   - utests_long:
>       requires:
>       - start_utests_long
>       - j8_build
>   - start_utests_compression:
>       type: approval
>   - utests_compression:
>       requires:
>       - start_utests_compression
>       - j8_build
>   - start_utests_stress:
>       type: approval
>   - utests_stress:
>       requires:
>       - start_utests_stress
>       - j8_build
>   - start_utests_fqltool:
>       type: approval
>   - utests_fqltool:
>       requires:
>       - start_utests_fqltool
>       - j8_build
>   - start_utests_system_keyspace_directory:
>       type: approval
>   - utests_system_keyspace_directory:
>       requires:
>       - start_utests_system_keyspace_directory
>       - j8_build
>   - start_j8_dtest_jars_build:
>       type: approval
>   - j8_dtest_jars_build:
>       requires:
>       - j8_build
>       - start_j8_dtest_jars_build
>   - start_jvm_upgrade_dtest:
>       type: approval
>   - j8_jvm_upgrade_dtests:
>       requires:
>       - start_jvm_upgrade_dtest
>       - j8_dtest_jars_build
>   - j8_dtests-with-vnodes:
>       requires:
>       - j8_build
>   - j8_dtests-no-vnodes:
>       requires:
>       - j8_build
>   - j11_dtests-with-vnodes:
>       requires:
>       - j8_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - j8_build
>   - start_upgrade_tests:
>       type: approval
>   - j8_upgradetests-no-vnodes:
>       requires:
>       - j8_build
>       - start_upgrade_tests
>   - j8_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - j8_build
>   - j8_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - j8_build
>   - j8_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - j8_build
>   - j8_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - j8_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - j8_build
>   - start_j8_repeated_utest:
>       type: approval
>   - j8_repeated_utest:
>       requires:
>       - start_j8_repeated_utest
>       - j8_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j8_build
>   - start_j8_repeated_dtest:
>       type: approval
>   - j8_repeated_dtest:
>       requires:
>       - start_j8_repeated_dtest
>       - j8_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j8_build
>   - start_repeated_upgrade_dtest:
>       type: approval
>   - repeated_upgrade_dtest:
>       requires:
>       - start_repeated_upgrade_dtest
>       - j8_build
>   - start_repeated_jvm_upgrade_dtest:
>       type: approval
>   - repeated_jvm_upgrade_dtest:
>       requires:
>       - start_repeated_jvm_upgrade_dtest
>       - j8_dtest_jars_build
> j11_with_dtests_jobs:
>   jobs:
>   - start_j11_build:
>       type: approval
>   - j11_build:
>       requires:
>       - start_j11_build
>   - start_j11_unit_tests:
>       type: approval
>   - j11_unit_tests:
>       requires:
>       - start_j11_unit_tests
>       - j11_build
>   - start_j11_jvm_dtests:
>       type: approval
>   - j11_jvm_dtests:
>       requires:
>       - start_j11_jvm_dtests
>       - j11_build
>   - j11_jvm_dtests_vnode:
>       requires:
>       - start_j11_jvm_dtests
>       - j11_build
>   - start_j11_cqlshlib_tests:
>       type: approval
>   - j11_cqlshlib_tests:
>       requires:
>       - start_j11_cqlshlib_tests
>       - j11_build
>   - start_j11_dtests:
>       type: approval
>   - j11_dtests-with-vnodes:
>       requires:
>       - start_j11_dtests
>       - j11_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - start_j11_dtests
>       - j11_build
>   - start_j11_cqlsh_tests:
>       type: approval
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - start_j11_cqlsh_tests
>       - j11_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j11_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j11_build
> j11_pre-commit_jobs:
>   jobs:
>   - start_pre-commit_tests:
>       type: approval
>   - j11_build:
>       requires:
>       - start_pre-commit_tests
>   - j11_unit_tests:
>       requires:
>       - j11_build
>   - j11_jvm_dtests:
>       requires:
>       - j11_build
>   - j11_jvm_dtests_vnode:
>       requires:
>       - j11_build
>   - j11_cqlshlib_tests:
>       requires:
>       - j11_build
>   - j11_jvm_dtests:
>       requires:
>       - j11_build
>   - j11_cqlshlib_tests:
>       requires:
>       - j11_build
>   - j11_dtests-with-vnodes:
>       requires:
>       - j11_build
>   - j11_dtests-no-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py3-with-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py38-with-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py3-no-vnodes:
>       requires:
>       - j11_build
>   - j11_cqlsh-dtests-py38-no-vnodes:
>       requires:
>       - j11_build
>   - start_j11_repeated_utest:
>       type: approval
>   - j11_repeated_utest:
>       requires:
>       - start_j11_repeated_utest
>       - j11_build
>   - start_j11_repeated_dtest:
>       type: approval
>   - j11_repeated_dtest:
>       requires:
>       - start_j11_repeated_dtest
>       - j11_build
> workflows:
>   version: 2
>   java8_separate_tests:
>     jobs:
185,186c557
<           - start_j8_build
<     # Java 8 unit tests
---
>         - start_j8_build
191,192c562,563
<           - start_j8_unit_tests
<           - j8_build
---
>         - start_j8_unit_tests
>         - j8_build
197,198c568,569
<           - start_j8_jvm_dtests
<           - j8_build
---
>         - start_j8_jvm_dtests
>         - j8_build
201,202c572,573
<           - start_j8_jvm_dtests
<           - j8_build
---
>         - start_j8_jvm_dtests
>         - j8_build
207,209c578,579
<           - start_j8_cqlshlib_tests
<           - j8_build
<     # Java 11 unit tests
---
>         - start_j8_cqlshlib_tests
>         - j8_build
214,216c584,585
<           - start_j11_unit_tests
<           - j8_build
<     # specialized unit tests (all run on request using Java 8)
---
>         - start_j11_unit_tests
>         - j8_build
221,222c590,591
<           - start_utests_long
<           - j8_build
---
>         - start_utests_long
>         - j8_build
227,228c596,597
<           - start_utests_compression
<           - j8_build
---
>         - start_utests_compression
>         - j8_build
233,234c602,603
<           - start_utests_stress
<           - j8_build
---
>         - start_utests_stress
>         - j8_build
239,240c608,609
<           - start_utests_fqltool
<           - j8_build
---
>         - start_utests_fqltool
>         - j8_build
245,246c614,615
<           - start_utests_system_keyspace_directory
<           - j8_build
---
>         - start_utests_system_keyspace_directory
>         - j8_build
251,252c620,621
<           - j8_build
<           - start_j8_dtest_jars_build
---
>         - j8_build
>         - start_j8_dtest_jars_build
257,259c626,627
<           - start_jvm_upgrade_dtest
<           - j8_dtest_jars_build
<     # Java 8 dtests
---
>         - start_jvm_upgrade_dtest
>         - j8_dtest_jars_build
264,265c632,633
<           - start_j8_dtests
<           - j8_build
---
>         - start_j8_dtests
>         - j8_build
268,270c636,637
<           - start_j8_dtests
<           - j8_build
<     # Java 11 dtests
---
>         - start_j8_dtests
>         - j8_build
281d647
<     # Java 8 upgrade tests
286,288c652,653
<           - start_upgrade_tests
<           - j8_build
<     # Java 8 cqlsh dtests
---
>         - start_upgrade_tests
>         - j8_build
305,307c670,671
<           - start_j8_cqlsh_tests
<           - j8_build
<     # Java 11 cqlsh dtests
---
>         - start_j8_cqlsh_tests
>         - j8_build
316,317c680,681
<           - start_j11_cqlsh_tests
<           - j8_build
---
>         - start_j11_cqlsh_tests
>         - j8_build
320,321c684,685
<           - start_j11_cqlsh_tests
<           - j8_build
---
>         - start_j11_cqlsh_tests
>         - j8_build
324,326c688,689
<           - start_j11_cqlsh_tests
<           - j8_build
<     # Java 8 repeated utest
---
>         - start_j11_cqlsh_tests
>         - j8_build
331,333c694,695
<           - start_j8_repeated_utest
<           - j8_build
<     # Java 11 repeated utest
---
>         - start_j8_repeated_utest
>         - j8_build
338,340c700,701
<           - start_j11_repeated_utest
<           - j8_build
<     # Java 8 repeated dtest
---
>         - start_j11_repeated_utest
>         - j8_build
345,347c706,707
<           - start_j8_repeated_dtest
<           - j8_build
<     # Java 11 repeated dtest
---
>         - start_j8_repeated_dtest
>         - j8_build
352,354c712,713
<           - start_j11_repeated_dtest
<           - j8_build
<     # Repeated Python upgrade dtest
---
>         - start_j11_repeated_dtest
>         - j8_build
359,361c718,719
<             - start_repeated_upgrade_dtest
<             - j8_build
<     # Repeated JVM upgrade dtest
---
>         - start_repeated_upgrade_dtest
>         - j8_build
366,370c724,727
<           - start_repeated_jvm_upgrade_dtest
<           - j8_dtest_jars_build
< 
< j8_pre-commit_jobs: &j8_pre-commit_jobs
<   jobs:
---
>         - start_repeated_jvm_upgrade_dtest
>         - j8_dtest_jars_build
>   java8_pre-commit_tests:
>     jobs:
375,376c732
<           - start_pre-commit_tests
<     # Java 8 unit tests
---
>         - start_pre-commit_tests
379c735
<           - j8_build
---
>         - j8_build
382c738
<           - j8_build
---
>         - j8_build
385c741
<           - j8_build
---
>         - j8_build
388,389c744
<           - j8_build
<     # Java 11 unit tests
---
>         - j8_build
392,393c747
<           - j8_build
<     # specialized unit tests (all run on request using Java 8)
---
>         - j8_build
398,399c752,753
<           - start_utests_long
<           - j8_build
---
>         - start_utests_long
>         - j8_build
404,405c758,759
<           - start_utests_compression
<           - j8_build
---
>         - start_utests_compression
>         - j8_build
410,411c764,765
<           - start_utests_stress
<           - j8_build
---
>         - start_utests_stress
>         - j8_build
416,417c770,771
<           - start_utests_fqltool
<           - j8_build
---
>         - start_utests_fqltool
>         - j8_build
422,423c776,777
<           - start_utests_system_keyspace_directory
<           - j8_build
---
>         - start_utests_system_keyspace_directory
>         - j8_build
428,429c782,783
<           - j8_build
<           - start_j8_dtest_jars_build
---
>         - j8_build
>         - start_j8_dtest_jars_build
434,436c788,789
<           - start_jvm_upgrade_dtest
<           - j8_dtest_jars_build
<     # Java 8 dtests
---
>         - start_jvm_upgrade_dtest
>         - j8_dtest_jars_build
439c792
<           - j8_build
---
>         - j8_build
442,443c795
<           - j8_build
<     # Java 11 dtests
---
>         - j8_build
446c798
<           - j8_build
---
>         - j8_build
449,450c801
<           - j8_build
<     # Java 8 upgrade tests (on request)
---
>         - j8_build
455,457c806,807
<           - j8_build
<           - start_upgrade_tests
<     # Java 8 cqlsh dtests
---
>         - j8_build
>         - start_upgrade_tests
460c810
<           - j8_build
---
>         - j8_build
463c813
<           - j8_build
---
>         - j8_build
466c816
<           - j8_build
---
>         - j8_build
469,470c819
<           - j8_build
<     # Java 11 cqlsh dtests
---
>         - j8_build
473c822
<           - j8_build
---
>         - j8_build
476c825
<           - j8_build
---
>         - j8_build
479c828
<           - j8_build
---
>         - j8_build
482,483c831
<           - j8_build
<     # Java 8 repeated utest (on request)
---
>         - j8_build
488,490c836,837
<           - start_j8_repeated_utest
<           - j8_build
<     # Java 11 repeated utest (on request)
---
>         - start_j8_repeated_utest
>         - j8_build
495,497c842,843
<           - start_j11_repeated_utest
<           - j8_build
<     # Java 8 repeated dtest (on request)
---
>         - start_j11_repeated_utest
>         - j8_build
502,504c848,849
<           - start_j8_repeated_dtest
<           - j8_build
<     # Java 11 repeated dtest (on request)
---
>         - start_j8_repeated_dtest
>         - j8_build
509,511c854,855
<           - start_j11_repeated_dtest
<           - j8_build
<     # Repeated Python upgrade dtest (on request)
---
>         - start_j11_repeated_dtest
>         - j8_build
516,518c860,861
<           - start_repeated_upgrade_dtest
<           - j8_build
<     # Repeated JVM upgrade dtest (on request)
---
>         - start_repeated_upgrade_dtest
>         - j8_build
523,527c866,869
<           - start_repeated_jvm_upgrade_dtest
<           - j8_dtest_jars_build
< 
< j11_with_dtests_jobs: &j11_with_dtests_jobs
<   jobs:
---
>         - start_repeated_jvm_upgrade_dtest
>         - j8_dtest_jars_build
>   java11_separate_tests:
>     jobs:
532,533c874
<           - start_j11_build
<     # Java 11 unit tests
---
>         - start_j11_build
538,539c879,880
<           - start_j11_unit_tests
<           - j11_build
---
>         - start_j11_unit_tests
>         - j11_build
544,545c885,886
<           - start_j11_jvm_dtests
<           - j11_build
---
>         - start_j11_jvm_dtests
>         - j11_build
548,549c889,890
<           - start_j11_jvm_dtests
<           - j11_build
---
>         - start_j11_jvm_dtests
>         - j11_build
554,556c895,896
<           - start_j11_cqlshlib_tests
<           - j11_build
<     # Java 11 dtests
---
>         - start_j11_cqlshlib_tests
>         - j11_build
561,562c901,902
<           - start_j11_dtests
<           - j11_build
---
>         - start_j11_dtests
>         - j11_build
565,566c905,906
<           - start_j11_dtests
<           - j11_build
---
>         - start_j11_dtests
>         - j11_build
571,572c911,912
<           - start_j11_cqlsh_tests
<           - j11_build
---
>         - start_j11_cqlsh_tests
>         - j11_build
575,576c915,916
<           - start_j11_cqlsh_tests
<           - j11_build
---
>         - start_j11_cqlsh_tests
>         - j11_build
579,580c919,920
<           - start_j11_cqlsh_tests
<           - j11_build
---
>         - start_j11_cqlsh_tests
>         - j11_build
583,585c923,924
<           - start_j11_cqlsh_tests
<           - j11_build
<     # Java 11 repeated utest
---
>         - start_j11_cqlsh_tests
>         - j11_build
590,592c929,930
<           - start_j11_repeated_utest
<           - j11_build
<     # Java 11 repeated dtest
---
>         - start_j11_repeated_utest
>         - j11_build
597,601c935,938
<           - start_j11_repeated_dtest
<           - j11_build
< 
< j11_pre-commit_jobs: &j11_pre-commit_jobs
<   jobs:
---
>         - start_j11_repeated_dtest
>         - j11_build
>   java11_pre-commit_tests:
>     jobs:
606c943
<           - start_pre-commit_tests
---
>         - start_pre-commit_tests
609c946
<           - j11_build
---
>         - j11_build
612c949
<           - j11_build
---
>         - j11_build
615c952
<           - j11_build
---
>         - j11_build
618c955
<           - j11_build
---
>         - j11_build
621c958
<           - j11_build
---
>         - j11_build
624c961
<           - j11_build
---
>         - j11_build
627c964
<           - j11_build
---
>         - j11_build
630c967
<           - j11_build
---
>         - j11_build
633c970
<           - j11_build
---
>         - j11_build
636c973
<           - j11_build
---
>         - j11_build
639c976
<           - j11_build
---
>         - j11_build
642,643c979
<           - j11_build
<     # Java 11 repeated utest (on request)
---
>         - j11_build
648,650c984,985
<           - start_j11_repeated_utest
<           - j11_build
<     # Java 11 repeated dtest (on request)
---
>         - start_j11_repeated_utest
>         - j11_build
655,664c990,991
<           - start_j11_repeated_dtest
<           - j11_build
< 
< workflows:
<     version: 2
<     java8_separate_tests: *j8_with_dtests_jobs
<     java8_pre-commit_tests: *j8_pre-commit_jobs
<     java11_separate_tests: *j11_with_dtests_jobs
<     java11_pre-commit_tests: *j11_pre-commit_jobs
< 
---
>         - start_j11_repeated_dtest
>         - j11_build
672c999
<       - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210929
---
>     - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210929
677c1004,1034
<       <<: *default_env_vars
---
>       ANT_HOME: /usr/share/ant
>       JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>       JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>       LANG: en_US.UTF-8
>       KEEP_TEST_DIR: true
>       DEFAULT_DIR: /home/cassandra/cassandra-dtest
>       PYTHONIOENCODING: utf-8
>       PYTHONUNBUFFERED: true
>       CASS_DRIVER_NO_EXTENSIONS: true
>       CASS_DRIVER_NO_CYTHON: true
>       CASSANDRA_SKIP_SYNC: true
>       DTEST_REPO: https://github.com/apache/cassandra-dtest.git
>       DTEST_BRANCH: trunk
>       CCM_MAX_HEAP_SIZE: 1024M
>       CCM_HEAP_NEWSIZE: 256M
>       REPEATED_UTEST_TARGET: testsome
>       REPEATED_UTEST_CLASS: null
>       REPEATED_UTEST_METHODS: null
>       REPEATED_UTEST_COUNT: 100
>       REPEATED_UTEST_STOP_ON_FAILURE: false
>       REPEATED_DTEST_NAME: null
>       REPEATED_DTEST_VNODES: false
>       REPEATED_DTEST_COUNT: 100
>       REPEATED_DTEST_STOP_ON_FAILURE: false
>       REPEATED_UPGRADE_DTEST_NAME: null
>       REPEATED_UPGRADE_DTEST_COUNT: 100
>       REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
>       REPEATED_JVM_UPGRADE_DTEST_CLASS: null
>       REPEATED_JVM_UPGRADE_DTEST_METHODS: null
>       REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
>       REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
680d1036
< 
692c1048,1078
<       <<: *default_env_vars
---
>       ANT_HOME: /usr/share/ant
>       JAVA11_HOME: /usr/lib/jvm/java-11-openjdk-amd64
>       JAVA8_HOME: /usr/lib/jvm/java-8-openjdk-amd64
>       LANG: en_US.UTF-8
>       KEEP_TEST_DIR: true
>       DEFAULT_DIR: /home/cassandra/cassandra-dtest
>       PYTHONIOENCODING: utf-8
>       PYTHONUNBUFFERED: true
>       CASS_DRIVER_NO_EXTENSIONS: true
>       CASS_DRIVER_NO_CYTHON: true
>       CASSANDRA_SKIP_SYNC: true
>       DTEST_REPO: https://github.com/apache/cassandra-dtest.git
>       DTEST_BRANCH: trunk
>       CCM_MAX_HEAP_SIZE: 1024M
>       CCM_HEAP_NEWSIZE: 256M
>       REPEATED_UTEST_TARGET: testsome
>       REPEATED_UTEST_CLASS: null
>       REPEATED_UTEST_METHODS: null
>       REPEATED_UTEST_COUNT: 100
>       REPEATED_UTEST_STOP_ON_FAILURE: false
>       REPEATED_DTEST_NAME: null
>       REPEATED_DTEST_VNODES: false
>       REPEATED_DTEST_COUNT: 100
>       REPEATED_DTEST_STOP_ON_FAILURE: false
>       REPEATED_UPGRADE_DTEST_NAME: null
>       REPEATED_UPGRADE_DTEST_COUNT: 100
>       REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE: false
>       REPEATED_JVM_UPGRADE_DTEST_CLASS: null
>       REPEATED_JVM_UPGRADE_DTEST_METHODS: null
>       REPEATED_JVM_UPGRADE_DTEST_COUNT: 100
>       REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE: false
696,698c1082,1083
< 
< build_common: &build_common
<   parallelism: 1 # This job doesn't benefit from parallelism
---
> build_common:
>   parallelism: 1
699a1085,1097
>   - log_environment
>   - clone_cassandra
>   - build_cassandra
>   - run_eclipse_warnings
>   - persist_to_workspace:
>       root: /home/cassandra
>       paths:
>       - cassandra
>       - .m2
> jobs:
>   j8_build:
>     parallelism: 1
>     steps:
707,714c1105,1109
<           - cassandra
<           - .m2
< 
< jobs:
<   j8_build:
<     executor: java8-executor
<     <<: *build_common
< 
---
>         - cassandra
>         - .m2
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
716,718c1111,1124
<     executor: java11-executor
<     <<: *build_common
< 
---
>     parallelism: 1
>     steps:
>     - log_environment
>     - clone_cassandra
>     - build_cassandra
>     - run_eclipse_warnings
>     - persist_to_workspace:
>         root: /home/cassandra
>         paths:
>         - cassandra
>         - .m2
>     executor:
>       name: java11-executor
>       exec_resource_class: medium
720c1126,1128
<     executor: java8-executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
723,730c1131,1137
<       - attach_workspace:
<           at: /home/cassandra
<       - build_cassandra_dtest_jars
<       - persist_to_workspace:
<           root: /home/cassandra
<           paths:
<             - dtest_jars
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - build_cassandra_dtest_jars
>     - persist_to_workspace:
>         root: /home/cassandra
>         paths:
>         - dtest_jars
732c1139,1142
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 25
734,739c1144,1148
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests
741c1150,1153
<     <<: *j8_small_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 10
743,752c1155,1163
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
754c1165,1168
<     <<: *j8_small_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 10
756,766c1170,1179
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
<           arguments: "-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'"
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
>         arguments: -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'
768c1181,1184
<     <<: *j11_small_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: medium
>     parallelism: 10
770,779c1186,1194
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
781c1196,1199
<     <<: *j11_small_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: medium
>     parallelism: 10
783,793c1201,1210
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep -v upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
<           arguments: "-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'"
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep -v upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
>         arguments: -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'
795c1212,1215
<     <<: *j8_medium_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 4
797,806c1217,1225
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers:
<           classlistprefix: distributed
<           extra_filters: "| grep upgrade"
<       - log_environment
<       - run_parallel_junit_tests:
<           classlistprefix: distributed
<           target: "testclasslist"
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers:
>         classlistprefix: distributed
>         extra_filters: '| grep upgrade'
>     - log_environment
>     - run_parallel_junit_tests:
>         classlistprefix: distributed
>         target: testclasslist
808c1227,1230
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: medium
>     parallelism: 25
810,815c1232,1236
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests
817c1238,1241
<     <<: *j8_small_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 1
819,822c1243,1245
<       - attach_workspace:
<           at: /home/cassandra
<       - run_cqlshlib_tests
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - run_cqlshlib_tests
824c1247,1250
<     <<: *j11_small_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: medium
>     parallelism: 1
826,829c1252,1254
<       - attach_workspace:
<           at: /home/cassandra
<       - run_cqlshlib_tests
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - run_cqlshlib_tests
831c1256,1259
<     <<: *j8_seq_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 1
833,837c1261,1264
<       - attach_workspace:
<           at: /home/cassandra
<       - run_junit_tests:
<           target: long-test
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - run_junit_tests:
>         target: long-test
839c1266,1269
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 25
841,847c1271,1276
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests:
<           target: testclasslist-compression
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests:
>         target: testclasslist-compression
849c1278,1281
<     <<: *j8_seq_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 1
851,855c1283,1286
<       - attach_workspace:
<           at: /home/cassandra
<       - run_junit_tests:
<           target: stress-test
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - run_junit_tests:
>         target: stress-test
857c1288,1291
<     <<: *j8_seq_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 1
859,863c1293,1296
<       - attach_workspace:
<           at: /home/cassandra
<       - run_junit_tests:
<           target: fqltool-test
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - run_junit_tests:
>         target: fqltool-test
865c1298,1301
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 25
867,873c1303,1308
<       - attach_workspace:
<           at: /home/cassandra
<       - create_junit_containers
<       - log_environment
<       - run_parallel_junit_tests:
<           target: testclasslist-system-keyspace-directory
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - create_junit_containers
>     - log_environment
>     - run_parallel_junit_tests:
>         target: testclasslist-system-keyspace-directory
875c1310,1313
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 50
877,887c1315,1325
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k not cql'"
<       - run_dtests:
<           file_tag: j8_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k not cql'
>     - run_dtests:
>         file_tag: j8_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
889c1327,1330
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 50
898c1339,1340
<         run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k not cql'"
---
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k not cql'
901,902c1343
<         pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
< 
---
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
904c1345,1348
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 50
906,916c1350,1360
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k not cql'"
<       - run_dtests:
<           file_tag: j8_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           not cql'
>     - run_dtests:
>         file_tag: j8_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
918c1362,1365
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 50
927c1374,1375
<         run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k not cql'"
---
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           not cql'
930,931c1378
<         pytest_extra_args: '--skip-resource-intensive-tests'
< 
---
>         pytest_extra_args: --skip-resource-intensive-tests
933c1380,1383
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: xlarge
>     parallelism: 100
935,945c1385,1396
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_upgradetests_without_vnodes
<           run_dtests_extra_args: '--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all'
<       - run_dtests:
<           file_tag: j8_upgradetests_without_vnodes
<           pytest_extra_args: '--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_upgradetests_without_vnodes
>         run_dtests_extra_args: --execute-upgrade-tests-only --upgrade-target-version-only
>           --upgrade-version-selection all
>     - run_dtests:
>         file_tag: j8_upgradetests_without_vnodes
>         pytest_extra_args: --execute-upgrade-tests-only --upgrade-target-version-only
>           --upgrade-version-selection all
947c1398,1401
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 50
949,960c1403,1414
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j8_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>     - run_dtests:
>         file_tag: j8_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
962c1416,1419
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 50
964,978c1421,1435
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j8_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j8_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j8_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>         python_version: '3.8'
>     - run_dtests:
>         file_tag: j8_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         python_version: '3.8'
980c1437,1440
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 50
982,993c1442,1453
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j8_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j8_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j8_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>     - run_dtests:
>         file_tag: j8_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
995c1455,1458
<     <<: *j8_par_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 50
997,1011c1460,1474
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j8_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j8_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j8_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>         python_version: '3.8'
>     - run_dtests:
>         file_tag: j8_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         python_version: '3.8'
1013c1476,1479
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 50
1015,1026c1481,1492
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j11_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j11_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j11_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>     - run_dtests:
>         file_tag: j11_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
1028c1494,1497
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 50
1030,1044c1499,1513
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j11_with_vnodes
<           run_dtests_extra_args: "--use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j11_with_vnodes
<           pytest_extra_args: '--use-vnodes --num-tokens=16 --skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j11_with_vnodes
>         run_dtests_extra_args: --use-vnodes --skip-resource-intensive-tests --pytest-options
>           '-k cql'
>         python_version: '3.8'
>     - run_dtests:
>         file_tag: j11_with_vnodes
>         pytest_extra_args: --use-vnodes --num-tokens=16 --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         python_version: '3.8'
1046c1515,1518
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 50
1048,1059c1520,1531
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - create_dtest_containers:
<           file_tag: j11_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<       - run_dtests:
<           file_tag: j11_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.6'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - create_dtest_containers:
>         file_tag: j11_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>     - run_dtests:
>         file_tag: j11_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.6
1061c1533,1536
<     <<: *j11_par_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 50
1063,1077c1538,1552
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv:
<           python_version: '3.8'
<       - create_dtest_containers:
<           file_tag: j11_without_vnodes
<           run_dtests_extra_args: "--skip-resource-intensive-tests --pytest-options '-k cql'"
<           python_version: '3.8'
<       - run_dtests:
<           file_tag: j11_without_vnodes
<           pytest_extra_args: '--skip-resource-intensive-tests'
<           extra_env_args: 'CQLSH_PYTHON=/usr/bin/python3.8'
<           python_version: '3.8'
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv:
>         python_version: '3.8'
>     - create_dtest_containers:
>         file_tag: j11_without_vnodes
>         run_dtests_extra_args: --skip-resource-intensive-tests --pytest-options '-k
>           cql'
>         python_version: '3.8'
>     - run_dtests:
>         file_tag: j11_without_vnodes
>         pytest_extra_args: --skip-resource-intensive-tests
>         extra_env_args: CQLSH_PYTHON=/usr/bin/python3.8
>         python_version: '3.8'
1079c1554,1557
<     <<: *j8_repeated_utest_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: medium
>     parallelism: 25
1081,1090c1559,1567
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - run_repeated_utest:
<           target: ${REPEATED_UTEST_TARGET}
<           class: ${REPEATED_UTEST_CLASS}
<           methods: ${REPEATED_UTEST_METHODS}
<           count: ${REPEATED_UTEST_COUNT}
<           stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - run_repeated_utest:
>         target: ${REPEATED_UTEST_TARGET}
>         class: ${REPEATED_UTEST_CLASS}
>         methods: ${REPEATED_UTEST_METHODS}
>         count: ${REPEATED_UTEST_COUNT}
>         stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
1092c1569,1572
<     <<: *j11_repeated_utest_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: medium
>     parallelism: 25
1094,1103c1574,1582
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - run_repeated_utest:
<           target: ${REPEATED_UTEST_TARGET}
<           class: ${REPEATED_UTEST_CLASS}
<           methods: ${REPEATED_UTEST_METHODS}
<           count: ${REPEATED_UTEST_COUNT}
<           stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - run_repeated_utest:
>         target: ${REPEATED_UTEST_TARGET}
>         class: ${REPEATED_UTEST_CLASS}
>         methods: ${REPEATED_UTEST_METHODS}
>         count: ${REPEATED_UTEST_COUNT}
>         stop_on_failure: ${REPEATED_UTEST_STOP_ON_FAILURE}
1105c1584,1587
<     <<: *j8_repeated_dtest_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 25
1107,1117c1589,1598
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - run_repeated_dtest:
<           tests: ${REPEATED_DTEST_NAME}
<           vnodes: ${REPEATED_DTEST_VNODES}
<           upgrade: "false"
<           count: ${REPEATED_DTEST_COUNT}
<           stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - run_repeated_dtest:
>         tests: ${REPEATED_DTEST_NAME}
>         vnodes: ${REPEATED_DTEST_VNODES}
>         upgrade: 'false'
>         count: ${REPEATED_DTEST_COUNT}
>         stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
1119c1600,1603
<     <<: *j11_repeated_dtest_executor
---
>     executor:
>       name: java11-executor
>       exec_resource_class: large
>     parallelism: 25
1121,1132c1605,1615
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - clone_dtest
<       - create_venv
<       - run_repeated_dtest:
<           tests: ${REPEATED_DTEST_NAME}
<           vnodes: ${REPEATED_DTEST_VNODES}
<           upgrade: "false"
<           count: ${REPEATED_DTEST_COUNT}
<           stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - clone_dtest
>     - create_venv
>     - run_repeated_dtest:
>         tests: ${REPEATED_DTEST_NAME}
>         vnodes: ${REPEATED_DTEST_VNODES}
>         upgrade: 'false'
>         count: ${REPEATED_DTEST_COUNT}
>         stop_on_failure: ${REPEATED_DTEST_STOP_ON_FAILURE}
1134c1617,1620
<     <<: *j8_repeated_jvm_upgrade_dtest_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: large
>     parallelism: 25
1136,1145c1622,1630
<       - attach_workspace:
<           at: /home/cassandra
<       - log_environment
<       - run_repeated_utest:
<           target: test-jvm-dtest-some
<           class: ${REPEATED_JVM_UPGRADE_DTEST_CLASS}
<           methods: ${REPEATED_JVM_UPGRADE_DTEST_METHODS}
<           count: ${REPEATED_JVM_UPGRADE_DTEST_COUNT}
<           stop_on_failure: ${REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE}
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - log_environment
>     - run_repeated_utest:
>         target: test-jvm-dtest-some
>         class: ${REPEATED_JVM_UPGRADE_DTEST_CLASS}
>         methods: ${REPEATED_JVM_UPGRADE_DTEST_METHODS}
>         count: ${REPEATED_JVM_UPGRADE_DTEST_COUNT}
>         stop_on_failure: ${REPEATED_JVM_UPGRADE_DTEST_STOP_ON_FAILURE}
1147c1632,1635
<     <<: *j8_repeated_upgrade_dtest_executor
---
>     executor:
>       name: java8-executor
>       exec_resource_class: xlarge
>     parallelism: 25
1149,1159c1637,1646
<       - attach_workspace:
<           at: /home/cassandra
<       - clone_dtest
<       - create_venv
<       - run_repeated_dtest:
<           tests: ${REPEATED_UPGRADE_DTEST_NAME}
<           vnodes: "false"
<           upgrade: "true"
<           stop_on_failure: ${REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE}
<           count: ${REPEATED_UPGRADE_DTEST_COUNT}
< 
---
>     - attach_workspace:
>         at: /home/cassandra
>     - clone_dtest
>     - create_venv
>     - run_repeated_dtest:
>         tests: ${REPEATED_UPGRADE_DTEST_NAME}
>         vnodes: 'false'
>         upgrade: 'true'
>         stop_on_failure: ${REPEATED_UPGRADE_DTEST_STOP_ON_FAILURE}
>         count: ${REPEATED_UPGRADE_DTEST_COUNT}
1165,1166c1652,1653
<         command: |
<           echo '*** id ***'
---
>         command: 'echo ''*** id ***''
> 
1168c1655,1657
<           echo '*** cat /proc/cpuinfo ***'
---
> 
>           echo ''*** cat /proc/cpuinfo ***''
> 
1170c1659,1661
<           echo '*** free -m ***'
---
> 
>           echo ''*** free -m ***''
> 
1172c1663,1665
<           echo '*** df -m ***'
---
> 
>           echo ''*** df -m ***''
> 
1174c1667,1669
<           echo '*** ifconfig -a ***'
---
> 
>           echo ''*** ifconfig -a ***''
> 
1176c1671,1673
<           echo '*** uname -a ***'
---
> 
>           echo ''*** uname -a ***''
> 
1178c1675,1677
<           echo '*** mount ***'
---
> 
>           echo ''*** mount ***''
> 
1180c1679,1681
<           echo '*** env ***'
---
> 
>           echo ''*** env ***''
> 
1182c1683,1685
<           echo '*** java ***'
---
> 
>           echo ''*** java ***''
> 
1183a1687
> 
1185a1690
>           '
1190,1191c1695,1696
<         command: |
<           git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git ~/cassandra
---
>         command: 'git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
>           ~/cassandra
1192a1698
>           '
1197,1198c1703,1704
<         command: |
<           git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO ~/cassandra-dtest
---
>         command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
>           ~/cassandra-dtest
1199a1706
>           '
1204,1219c1711,1716
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           cd ~/cassandra
<           # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
<           for x in $(seq 1 3); do
<               ${ANT_HOME}/bin/ant clean realclean jar
<               RETURN="$?"
<               if [ "${RETURN}" -eq "0" ]; then
<                   break
<               fi
<           done
<           # Exit, if we didn't build successfully
<           if [ "${RETURN}" -ne "0" ]; then
<               echo "Build failed with exit code: ${RETURN}"
<               exit ${RETURN}
<           fi
---
>         command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\n# Loop to prevent
>           failure due to maven-ant-tasks not downloading a jar..\nfor x in $(seq 1
>           3); do\n    ${ANT_HOME}/bin/ant clean realclean jar\n    RETURN=\"$?\"\n
>           \   if [ \"${RETURN}\" -eq \"0\" ]; then\n        break\n    fi\ndone\n#
>           Exit, if we didn't build successfully\nif [ \"${RETURN}\" -ne \"0\" ]; then\n
>           \   echo \"Build failed with exit code: ${RETURN}\"\n    exit ${RETURN}\nfi\n"
1221d1717
< 
1226,1269c1722,1740
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           cd ~/cassandra
<           mkdir ~/dtest_jars
<           git remote add apache https://github.com/apache/cassandra.git
<           for branch in cassandra-2.2 cassandra-3.0 cassandra-3.11 cassandra-4.0 trunk; do
<             # check out the correct cassandra version:
<             git remote set-branches --add apache '$branch'
<             git fetch --depth 1 apache $branch
<             git checkout $branch
<             git clean -fd
<             # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
<             for x in $(seq 1 3); do
<                 ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar
<                 RETURN="$?"
<                 if [ "${RETURN}" -eq "0" ]; then
<                     cp build/dtest*.jar ~/dtest_jars
<                     break
<                 fi
<             done
<             # Exit, if we didn't build successfully
<             if [ "${RETURN}" -ne "0" ]; then
<                 echo "Build failed with exit code: ${RETURN}"
<                 exit ${RETURN}
<             fi
<           done
<           # and build the dtest-jar for the branch under test
<           ${ANT_HOME}/bin/ant realclean
<           git checkout origin/$CIRCLE_BRANCH
<           git clean -fd
<           for x in $(seq 1 3); do
<               ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar
<               RETURN="$?"
<               if [ "${RETURN}" -eq "0" ]; then
<                   cp build/dtest*.jar ~/dtest_jars
<                   break
<               fi
<           done
<           # Exit, if we didn't build successfully
<           if [ "${RETURN}" -ne "0" ]; then
<               echo "Build failed with exit code: ${RETURN}"
<               exit ${RETURN}
<           fi
<           ls -l ~/dtest_jars
---
>         command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\nmkdir ~/dtest_jars\ngit
>           remote add apache https://github.com/apache/cassandra.git\nfor branch in
>           cassandra-2.2 cassandra-3.0 cassandra-3.11 cassandra-4.0 trunk; do\n  #
>           check out the correct cassandra version:\n  git remote set-branches --add
>           apache '$branch'\n  git fetch --depth 1 apache $branch\n  git checkout $branch\n
>           \ git clean -fd\n  # Loop to prevent failure due to maven-ant-tasks not
>           downloading a jar..\n  for x in $(seq 1 3); do\n      ${ANT_HOME}/bin/ant
>           realclean; ${ANT_HOME}/bin/ant jar dtest-jar\n      RETURN=\"$?\"\n      if
>           [ \"${RETURN}\" -eq \"0\" ]; then\n          cp build/dtest*.jar ~/dtest_jars\n
>           \         break\n      fi\n  done\n  # Exit, if we didn't build successfully\n
>           \ if [ \"${RETURN}\" -ne \"0\" ]; then\n      echo \"Build failed with exit
>           code: ${RETURN}\"\n      exit ${RETURN}\n  fi\ndone\n# and build the dtest-jar
>           for the branch under test\n${ANT_HOME}/bin/ant realclean\ngit checkout origin/$CIRCLE_BRANCH\ngit
>           clean -fd\nfor x in $(seq 1 3); do\n    ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant
>           jar dtest-jar\n    RETURN=\"$?\"\n    if [ \"${RETURN}\" -eq \"0\" ]; then\n
>           \       cp build/dtest*.jar ~/dtest_jars\n        break\n    fi\ndone\n#
>           Exit, if we didn't build successfully\nif [ \"${RETURN}\" -ne \"0\" ]; then\n
>           \   echo \"Build failed with exit code: ${RETURN}\"\n    exit ${RETURN}\nfi\nls
>           -l ~/dtest_jars\n"
1271d1741
< 
1276,1277c1746,1747
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
---
>         command: 'export PATH=$JAVA_HOME/bin:$PATH
> 
1278a1749
> 
1280a1752
>           '
1288c1760
<         default: ""
---
>         default: ''
1292,1294c1764,1769
<         command: |
<           # reminder: this code (along with all the steps) is independently executed on every circle container
<           # so the goal here is to get the circleci script to return the tests *this* container will run
---
>         command: '# reminder: this code (along with all the steps) is independently
>           executed on every circle container
> 
>           # so the goal here is to get the circleci script to return the tests *this*
>           container will run
> 
1296a1772
> 
1297a1774
> 
1299a1777
> 
1301d1778
<           set -eo pipefail && circleci tests glob "$HOME/cassandra/test/<<parameters.classlistprefix>>/**/*.java" > /tmp/all_java_unit_tests.txt
1303,1305c1780,1793
<           # split up the unit tests into groups based on the number of containers we have
<           set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt
<           set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/<<parameters.classlistprefix>>/;;g" | grep "Test\.java$" <<parameters.extra_filters>> > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
---
>           set -eo pipefail && circleci tests glob "$HOME/cassandra/test/<<parameters.classlistprefix>>/**/*.java"
>           > /tmp/all_java_unit_tests.txt
> 
> 
>           # split up the unit tests into groups based on the number of containers
>           we have
> 
>           set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
>           --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
>           > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt
> 
>           set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/<<parameters.classlistprefix>>/;;g"
>           | grep "Test\.java$" <<parameters.extra_filters>> > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
> 
1306a1795
> 
1308a1798
>           '
1310d1799
< 
1321,1328c1810,1812
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
<           time mv ~/cassandra /tmp
<           cd /tmp/cassandra
<           if [ -d ~/dtest_jars ]; then
<             cp ~/dtest_jars/dtest* /tmp/cassandra/build/
<           fi
<           ant <<parameters.target>>
---
>         command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\nif
>           [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\nfi\nant
>           <<parameters.target>>\n"
1338d1821
< 
1347,1348c1830,1831
<         command: |
<           export PATH=$JAVA_HOME/bin:$PATH
---
>         command: 'export PATH=$JAVA_HOME/bin:$PATH
> 
1349a1833
> 
1350a1835
> 
1351a1837,1838
> 
>           '
1355d1841
< 
1369c1855
<         default: " "
---
>         default: ' '
1373,1385c1859,1865
<         command: |
<           set -x
<           export PATH=$JAVA_HOME/bin:$PATH
<           time mv ~/cassandra /tmp
<           cd /tmp/cassandra
<           if [ -d ~/dtest_jars ]; then
<             cp ~/dtest_jars/dtest* /tmp/cassandra/build/
<           fi
<           test_timeout=$(grep 'name="test.<<parameters.classlistprefix>>.timeout"' build.xml | awk -F'"' '{print $4}' || true)
<           if [ -z "$test_timeout" ]; then
<             test_timeout=$(grep 'name="test.timeout"' build.xml | awk -F'"' '{print $4}')
<           fi
<           ant <<parameters.target>> <<parameters.arguments>> -Dtest.timeout="$test_timeout" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt  -Dtest.classlistprefix=<<parameters.classlistprefix>>
---
>         command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd
>           /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\nfi\ntest_timeout=$(grep
>           'name=\"test.<<parameters.classlistprefix>>.timeout\"' build.xml | awk -F'\"'
>           '{print $4}' || true)\nif [ -z \"$test_timeout\" ]; then\n  test_timeout=$(grep
>           'name=\"test.timeout\"' build.xml | awk -F'\"' '{print $4}')\nfi\nant <<parameters.target>>
>           <<parameters.arguments>> -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
>           \ -Dtest.classlistprefix=<<parameters.classlistprefix>>\n"
1395d1874
< 
1400,1401c1879,1883
<         default: "3.6"
<         enum: ["3.6", "3.7", "3.8"]
---
>         default: '3.6'
>         enum:
>         - '3.6'
>         - '3.7'
>         - '3.8'
1405,1409c1887,1898
<         command: |
<           # note, this should be super quick as all dependencies should be pre-installed in the docker image
<           # if additional dependencies were added to requirmeents.txt and the docker image hasn't been updated
<           # we'd have to install it here at runtime -- which will make things slow, so do yourself a favor and
<           # rebuild the docker image! (it automatically pulls the latest requirements.txt on build)
---
>         command: '# note, this should be super quick as all dependencies should be
>           pre-installed in the docker image
> 
>           # if additional dependencies were added to requirmeents.txt and the docker
>           image hasn''t been updated
> 
>           # we''d have to install it here at runtime -- which will make things slow,
>           so do yourself a favor and
> 
>           # rebuild the docker image! (it automatically pulls the latest requirements.txt
>           on build)
> 
1410a1900
> 
1411a1902
> 
1412a1904
> 
1413a1906
> 
1415a1909
>           '
1431,1432c1925,1929
<         default: "3.6"
<         enum: ["3.6", "3.7", "3.8"]
---
>         default: '3.6'
>         enum:
>         - '3.6'
>         - '3.7'
>         - '3.8'
1437,1460c1934,1950
<         command: |
<           # reminder: this code (along with all the steps) is independently executed on every circle container
<           # so the goal here is to get the circleci script to return the tests *this* container will run
<           # which we do via the `circleci` cli tool.
< 
<           cd cassandra-dtest
<           source ~/env<<parameters.python_version>>/bin/activate
<           export PATH=$JAVA_HOME/bin:$PATH
< 
<           if [ -n '<<parameters.extra_env_args>>' ]; then
<             export <<parameters.extra_env_args>>
<           fi
< 
<           echo "***Collected DTests (<<parameters.file_tag>>)***"
<           set -eo pipefail && ./run_dtests.py <<parameters.run_dtests_extra_args>> --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_<<parameters.file_tag>>_raw --cassandra-dir=../cassandra
<           if [ -z '<<parameters.tests_filter_pattern>>' ]; then
<             mv /tmp/all_dtest_tests_<<parameters.file_tag>>_raw /tmp/all_dtest_tests_<<parameters.file_tag>>
<           else
<             grep -e '<<parameters.tests_filter_pattern>>' /tmp/all_dtest_tests_<<parameters.file_tag>>_raw > /tmp/all_dtest_tests_<<parameters.file_tag>> || { echo "Filter did not match any tests! Exiting build."; exit 0; }
<           fi
<           set -eo pipefail && circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_<<parameters.file_tag>> > /tmp/split_dtest_tests_<<parameters.file_tag>>.txt
<           cat /tmp/split_dtest_tests_<<parameters.file_tag>>.txt | tr '\n' ' ' > /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
<           cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
< 
---
>         command: "# reminder: this code (along with all the steps) is independently
>           executed on every circle container\n# so the goal here is to get the circleci
>           script to return the tests *this* container will run\n# which we do via
>           the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env<<parameters.python_version>>/bin/activate\nexport
>           PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '<<parameters.extra_env_args>>' ];
>           then\n  export <<parameters.extra_env_args>>\nfi\n\necho \"***Collected
>           DTests (<<parameters.file_tag>>)***\"\nset -eo pipefail && ./run_dtests.py
>           <<parameters.run_dtests_extra_args>> --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_<<parameters.file_tag>>_raw
>           --cassandra-dir=../cassandra\nif [ -z '<<parameters.tests_filter_pattern>>'
>           ]; then\n  mv /tmp/all_dtest_tests_<<parameters.file_tag>>_raw /tmp/all_dtest_tests_<<parameters.file_tag>>\nelse\n
>           \ grep -e '<<parameters.tests_filter_pattern>>' /tmp/all_dtest_tests_<<parameters.file_tag>>_raw
>           > /tmp/all_dtest_tests_<<parameters.file_tag>> || { echo \"Filter did not
>           match any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci
>           tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_<<parameters.file_tag>>
>           > /tmp/split_dtest_tests_<<parameters.file_tag>>.txt\ncat /tmp/split_dtest_tests_<<parameters.file_tag>>.txt
>           | tr '\\n' ' ' > /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\ncat
>           /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\n"
1473,1474c1963,1967
<         default: "3.6"
<         enum: ["3.6", "3.7", "3.8"]
---
>         default: '3.6'
>         enum:
>         - '3.6'
>         - '3.7'
>         - '3.8'
1476,1507c1969,1991
<       - run:
<           name: Run dtests (<<parameters.file_tag>>)
<           no_output_timeout: 15m
<           command: |
<             echo "cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt"
<             cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt
< 
<             source ~/env<<parameters.python_version>>/bin/activate
<             export PATH=$JAVA_HOME/bin:$PATH
<             if [ -n '<<parameters.extra_env_args>>' ]; then
<               export <<parameters.extra_env_args>>
<             fi
< 
<             java -version
<             cd ~/cassandra-dtest
<             mkdir -p /tmp/dtest
< 
<             echo "env: $(env)"
<             echo "** done env"
<             mkdir -p /tmp/results/dtests
<             # we need the "set -o pipefail" here so that the exit code that circleci will actually use is from pytest and not the exit code from tee
<             export SPLIT_TESTS=`cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt`
<             set -o pipefail && cd ~/cassandra-dtest && pytest <<parameters.pytest_extra_args>> --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result_<<parameters.file_tag>>.xml -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt
<       - store_test_results:
<           path: /tmp/results
<       - store_artifacts:
<           path: /tmp/dtest
<           destination: dtest_<<parameters.file_tag>>
<       - store_artifacts:
<           path: ~/cassandra-dtest/logs
<           destination: dtest_<<parameters.file_tag>>_logs
< 
---
>     - run:
>         name: Run dtests (<<parameters.file_tag>>)
>         no_output_timeout: 15m
>         command: "echo \"cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\"\ncat
>           /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt\n\nsource ~/env<<parameters.python_version>>/bin/activate\nexport
>           PATH=$JAVA_HOME/bin:$PATH\nif [ -n '<<parameters.extra_env_args>>' ]; then\n
>           \ export <<parameters.extra_env_args>>\nfi\n\njava -version\ncd ~/cassandra-dtest\nmkdir
>           -p /tmp/dtest\n\necho \"env: $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n#
>           we need the \"set -o pipefail\" here so that the exit code that circleci
>           will actually use is from pytest and not the exit code from tee\nexport
>           SPLIT_TESTS=`cat /tmp/split_dtest_tests_<<parameters.file_tag>>_final.txt`\nset
>           -o pipefail && cd ~/cassandra-dtest && pytest <<parameters.pytest_extra_args>>
>           --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result_<<parameters.file_tag>>.xml
>           -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS
>           2>&1 | tee /tmp/dtest/stdout.txt\n"
>     - store_test_results:
>         path: /tmp/results
>     - store_artifacts:
>         path: /tmp/dtest
>         destination: dtest_<<parameters.file_tag>>
>     - store_artifacts:
>         path: ~/cassandra-dtest/logs
>         destination: dtest_<<parameters.file_tag>>_logs
1521,1630c2005,2060
<       - run:
<           name: Run repeated JUnit test
<           no_output_timeout: 15m
<           command: |
<             if [ "<<parameters.class>>" == "<nil>" ]; then
<               echo "Repeated utest class name hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" == "<nil>" ]; then
<               echo "Repeated utest count hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" -le 0 ]; then
<               echo "Repeated utest count is lesser or equals than zero, exiting without running any test"
<             else
<             
<               # Calculate the number of test iterations to be run by the current parallel runner.
<               # Since we are running the same test multiple times there is no need to use `circleci tests split`.
<               count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))
<               if (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then
<                 count=$((count+1))
<               fi
< 
<               if (($count <= 0)); then
<                 echo "No tests to run in this runner"
<               else
<                 echo "Running <<parameters.target>> <<parameters.class>> <<parameters.methods>> <<parameters.count>> times"
< 
<                 set -x
<                 export PATH=$JAVA_HOME/bin:$PATH
<                 time mv ~/cassandra /tmp
<                 cd /tmp/cassandra
<                 if [ -d ~/dtest_jars ]; then
<                   cp ~/dtest_jars/dtest* /tmp/cassandra/build/
<                 fi
< 
<                 target=<<parameters.target>>
<                 class_path=<<parameters.class>>
<                 class_name="${class_path##*.}"
< 
<                 # Prepare the -Dtest.name argument.
<                 # It can be the fully qualified class name or the short class name, depending on the target.
<                 if [[ $target == "test" || \
<                       $target == "test-cdc" || \
<                       $target == "test-compression" || \
<                       $target == "test-system-keyspace-directory" ]]; then
<                   name="-Dtest.name=$class_name"
<                 else
<                   name="-Dtest.name=$class_path"
<                 fi
< 
<                 # Prepare the -Dtest.methods argument, which is optional
<                 if [ "<<parameters.methods>>" == "<nil>" ]; then
<                   methods=""
<                 else
<                   methods="-Dtest.methods=<<parameters.methods>>"
<                 fi
< 
<                 # Run the test target as many times as requested collecting the exit code,
<                 # stopping the iteration only if stop_on_failure is set.
<                 exit_code="$?"
<                 for i in $(seq -w 1 $count); do
< 
<                   echo "Running test iteration $i of $count"
< 
<                   # run the test
<                   status="passes"
<                   if !( set -o pipefail && ant $target $name $methods -Dno-build-test=true | tee stdout.txt ); then
<                     status="fails"
<                     exit_code=1
<                   fi
< 
<                   # move the stdout output file
<                   dest=/tmp/results/repeated_utest/stdout/${status}/${i}
<                   mkdir -p $dest
<                   mv stdout.txt $dest/<<parameters.target>>-<<parameters.class>>.txt
< 
<                   # move the XML output files
<                   source=build/test/output
<                   dest=/tmp/results/repeated_utest/output/${status}/${i}
<                   mkdir -p $dest
<                   if [[ -d $source && -n "$(ls $source)" ]]; then
<                     mv $source/* $dest/
<                   fi
< 
<                   # move the log files
<                   source=build/test/logs
<                   dest=/tmp/results/repeated_utest/logs/${status}/${i}
<                   mkdir -p $dest
<                   if [[ -d $source && -n "$(ls $source)" ]]; then
<                     mv $source/* $dest/
<                   fi
< 
<                   # maybe stop iterations on test failure
<                   if [[ <<parameters.stop_on_failure>> = true ]] && (( $exit_code > 0 )); then
<                     break
<                   fi
<                 done
< 
<                 (exit ${exit_code})
<               fi
<             fi
<       - store_test_results:
<           path: /tmp/results/repeated_utest/output
<       - store_artifacts:
<           path: /tmp/results/repeated_utest/stdout
<           destination: stdout
<       - store_artifacts:
<           path: /tmp/results/repeated_utest/output
<           destination: junitxml
<       - store_artifacts:
<           path: /tmp/results/repeated_utest/logs
<           destination: logs
< 
---
>     - run:
>         name: Run repeated JUnit test
>         no_output_timeout: 15m
>         command: "if [ \"<<parameters.class>>\" == \"<nil>\" ]; then\n  echo \"Repeated
>           utest class name hasn't been defined, exiting without running any test\"\nelif
>           [ \"<<parameters.count>>\" == \"<nil>\" ]; then\n  echo \"Repeated utest
>           count hasn't been defined, exiting without running any test\"\nelif [ \"<<parameters.count>>\"
>           -le 0 ]; then\n  echo \"Repeated utest count is lesser or equals than zero,
>           exiting without running any test\"\nelse\n\n  # Calculate the number of
>           test iterations to be run by the current parallel runner.\n  # Since we
>           are running the same test multiple times there is no need to use `circleci
>           tests split`.\n  count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))\n  if
>           (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then\n
>           \   count=$((count+1))\n  fi\n\n  if (($count <= 0)); then\n    echo \"No
>           tests to run in this runner\"\n  else\n    echo \"Running <<parameters.target>>
>           <<parameters.class>> <<parameters.methods>> <<parameters.count>> times\"\n\n
>           \   set -x\n    export PATH=$JAVA_HOME/bin:$PATH\n    time mv ~/cassandra
>           /tmp\n    cd /tmp/cassandra\n    if [ -d ~/dtest_jars ]; then\n      cp
>           ~/dtest_jars/dtest* /tmp/cassandra/build/\n    fi\n\n    target=<<parameters.target>>\n
>           \   class_path=<<parameters.class>>\n    class_name=\"${class_path##*.}\"\n\n
>           \   # Prepare the -Dtest.name argument.\n    # It can be the fully qualified
>           class name or the short class name, depending on the target.\n    if [[
>           $target == \"test\" || \\\n          $target == \"test-cdc\" || \\\n          $target
>           == \"test-compression\" || \\\n          $target == \"test-system-keyspace-directory\"
>           ]]; then\n      name=\"-Dtest.name=$class_name\"\n    else\n      name=\"-Dtest.name=$class_path\"\n
>           \   fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n
>           \   if [ \"<<parameters.methods>>\" == \"<nil>\" ]; then\n      methods=\"\"\n
>           \   else\n      methods=\"-Dtest.methods=<<parameters.methods>>\"\n    fi\n\n
>           \   # Run the test target as many times as requested collecting the exit
>           code,\n    # stopping the iteration only if stop_on_failure is set.\n    exit_code=\"$?\"\n
>           \   for i in $(seq -w 1 $count); do\n\n      echo \"Running test iteration
>           $i of $count\"\n\n      # run the test\n      status=\"passes\"\n      if
>           !( set -o pipefail && ant $target $name $methods -Dno-build-test=true |
>           tee stdout.txt ); then\n        status=\"fails\"\n        exit_code=1\n
>           \     fi\n\n      # move the stdout output file\n      dest=/tmp/results/repeated_utest/stdout/${status}/${i}\n
>           \     mkdir -p $dest\n      mv stdout.txt $dest/<<parameters.target>>-<<parameters.class>>.txt\n\n
>           \     # move the XML output files\n      source=build/test/output\n      dest=/tmp/results/repeated_utest/output/${status}/${i}\n
>           \     mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];
>           then\n        mv $source/* $dest/\n      fi\n\n      # move the log files\n
>           \     source=build/test/logs\n      dest=/tmp/results/repeated_utest/logs/${status}/${i}\n
>           \     mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];
>           then\n        mv $source/* $dest/\n      fi\n\n      # maybe stop iterations
>           on test failure\n      if [[ <<parameters.stop_on_failure>> = true ]] &&
>           (( $exit_code > 0 )); then\n        break\n      fi\n    done\n\n    (exit
>           ${exit_code})\n  fi\nfi\n"
>     - store_test_results:
>         path: /tmp/results/repeated_utest/output
>     - store_artifacts:
>         path: /tmp/results/repeated_utest/stdout
>         destination: stdout
>     - store_artifacts:
>         path: /tmp/results/repeated_utest/output
>         destination: junitxml
>     - store_artifacts:
>         path: /tmp/results/repeated_utest/logs
>         destination: logs
1644,1705c2074,2109
<       - run:
<           name: Run repeated Python dtest
<           no_output_timeout: 15m
<           command: |
<             if [ "<<parameters.tests>>" == "<nil>" ]; then
<               echo "Repeated dtest name hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" == "<nil>" ]; then
<               echo "Repeated dtest count hasn't been defined, exiting without running any test"
<             elif [ "<<parameters.count>>" -le 0 ]; then
<               echo "Repeated dtest count is lesser or equals than zero, exiting without running any test"
<             else
< 
<               # Calculate the number of test iterations to be run by the current parallel runner.
<               # Since we are running the same test multiple times there is no need to use `circleci tests split`.
<               count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))
<               if (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then
<                 count=$((count+1))
<               fi
< 
<               if (($count <= 0)); then
<                 echo "No tests to run in this runner"
<               else
<                 echo "Running <<parameters.tests>> $count times"
<             
<                 source ~/env3.6/bin/activate
<                 export PATH=$JAVA_HOME/bin:$PATH
< 
<                 java -version
<                 cd ~/cassandra-dtest
<                 mkdir -p /tmp/dtest
< 
<                 echo "env: $(env)"
<                 echo "** done env"
<                 mkdir -p /tmp/results/dtests
< 
<                 stop_on_failure_arg=""
<                 if <<parameters.stop_on_failure>>; then
<                   stop_on_failure_arg="-x"
<                 fi
< 
<                 vnodes_args=""
<                 if <<parameters.vnodes>>; then
<                   vnodes_args="--use-vnodes --num-tokens=16"
<                 fi
< 
<                 upgrade_arg=""
<                 if <<parameters.upgrade>>; then
<                   upgrade_arg="--execute-upgrade-tests"
<                 fi
< 
<                 # we need the "set -o pipefail" here so that the exit code that circleci will actually use is from pytest and not the exit code from tee
<                 set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir <<parameters.tests>> | tee /tmp/dtest/stdout.txt
<               fi
<             fi
<       - store_test_results:
<           path: /tmp/results
<       - store_artifacts:
<           path: /tmp/dtest
<           destination: dtest
<       - store_artifacts:
<           path: ~/cassandra-dtest/logs
<           destination: dtest_logs
---
>     - run:
>         name: Run repeated Python dtest
>         no_output_timeout: 15m
>         command: "if [ \"<<parameters.tests>>\" == \"<nil>\" ]; then\n  echo \"Repeated
>           dtest name hasn't been defined, exiting without running any test\"\nelif
>           [ \"<<parameters.count>>\" == \"<nil>\" ]; then\n  echo \"Repeated dtest
>           count hasn't been defined, exiting without running any test\"\nelif [ \"<<parameters.count>>\"
>           -le 0 ]; then\n  echo \"Repeated dtest count is lesser or equals than zero,
>           exiting without running any test\"\nelse\n\n  # Calculate the number of
>           test iterations to be run by the current parallel runner.\n  # Since we
>           are running the same test multiple times there is no need to use `circleci
>           tests split`.\n  count=$((<<parameters.count>> / CIRCLE_NODE_TOTAL))\n  if
>           (($CIRCLE_NODE_INDEX < (<<parameters.count>> % CIRCLE_NODE_TOTAL))); then\n
>           \   count=$((count+1))\n  fi\n\n  if (($count <= 0)); then\n    echo \"No
>           tests to run in this runner\"\n  else\n    echo \"Running <<parameters.tests>>
>           $count times\"\n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\n
>           \   java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\n
>           \   echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\n
>           \   stop_on_failure_arg=\"\"\n    if <<parameters.stop_on_failure>>; then\n
>           \     stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\n    if
>           <<parameters.vnodes>>; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n
>           \   fi\n\n    upgrade_arg=\"\"\n    if <<parameters.upgrade>>; then\n      upgrade_arg=\"--execute-upgrade-tests\"\n
>           \   fi\n\n    # we need the \"set -o pipefail\" here so that the exit code
>           that circleci will actually use is from pytest and not the exit code from
>           tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args
>           --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG --junit-xml=/tmp/results/dtests/pytest_result.xml
>           -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir <<parameters.tests>>
>           | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
>     - store_test_results:
>         path: /tmp/results
>     - store_artifacts:
>         path: /tmp/dtest
>         destination: dtest
>     - store_artifacts:
>         path: ~/cassandra-dtest/logs
>         destination: dtest_logs
