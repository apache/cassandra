#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

jobs:
  j11_build:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
          ~/cassandra

          '
        name: Clone Cassandra Repository (via git)
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\n# Loop to prevent\
          \ failure due to maven-ant-tasks not downloading a jar..\nfor x in $(seq\
          \ 1 3); do\n    ${ANT_HOME}/bin/ant clean realclean jar\n    RETURN=\"$?\"\
          \n    if [ \"${RETURN}\" -eq \"0\" ]; then\n        break\n    fi\ndone\n\
          # Exit, if we didn't build successfully\nif [ \"${RETURN}\" -ne \"0\" ];\
          \ then\n    echo \"Build failed with exit code: ${RETURN}\"\n    exit ${RETURN}\n\
          fi\n"
        name: Build Cassandra
        no_output_timeout: 15m
    - run:
        command: 'export PATH=$JAVA_HOME/bin:$PATH

          cd ~/cassandra

          ant eclipse-warnings

          '
        name: Run eclipse-warnings
    - persist_to_workspace:
        paths:
        - cassandra
        - .m2
        root: /home/cassandra
    working_directory: ~/
  j11_cqlsh_dtests_py3:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_without_vnodes\
          \ > /tmp/split_dtest_tests_j11_without_vnodes.txt\ncat /tmp/split_dtest_tests_j11_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.6'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.6\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py311:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.11/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_without_vnodes\
          \ > /tmp/split_dtest_tests_j11_without_vnodes.txt\ncat /tmp/split_dtest_tests_j11_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.11'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.11\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py311_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.11/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j11_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j11_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_dtests_offheap\
          \ > /tmp/split_dtest_tests_j11_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j11_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j11_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.11'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.11\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py311_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.11/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_with_vnodes\
          \ > /tmp/split_dtest_tests_j11_with_vnodes.txt\ncat /tmp/split_dtest_tests_j11_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.11'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.11\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j11_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j11_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py38:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.8/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_without_vnodes\
          \ > /tmp/split_dtest_tests_j11_without_vnodes.txt\ncat /tmp/split_dtest_tests_j11_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.8'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.8\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py38_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.8/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j11_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j11_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_dtests_offheap\
          \ > /tmp/split_dtest_tests_j11_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j11_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j11_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.8'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.8\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py38_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.8/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_with_vnodes\
          \ > /tmp/split_dtest_tests_j11_with_vnodes.txt\ncat /tmp/split_dtest_tests_j11_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.8'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.8\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j11_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j11_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py3_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j11_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j11_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_dtests_offheap\
          \ > /tmp/split_dtest_tests_j11_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j11_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j11_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.6'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.6\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlsh_dtests_py3_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_with_vnodes\
          \ > /tmp/split_dtest_tests_j11_with_vnodes.txt\ncat /tmp/split_dtest_tests_j11_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.6'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.6\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j11_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j11_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_cqlshlib_cython_tests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'export PATH=$JAVA_HOME/bin:$PATH

          export cython="yes"

          time mv ~/cassandra /tmp

          cd /tmp/cassandra/

          ./pylib/cassandra-cqlsh-tests.sh $(pwd)

          '
        name: Run cqlshlib Unit Tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/pylib
    working_directory: ~/
  j11_cqlshlib_tests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'export PATH=$JAVA_HOME/bin:$PATH

          time mv ~/cassandra /tmp

          cd /tmp/cassandra/

          ./pylib/cassandra-cqlsh-tests.sh $(pwd)

          '
        name: Run cqlshlib Unit Tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/pylib
    working_directory: ~/
  j11_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k not\
          \ cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_without_vnodes\
          \ > /tmp/split_dtest_tests_j11_without_vnodes.txt\ncat /tmp/split_dtest_tests_j11_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_without_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_large:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 4
    resource_class: xlarge
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_large_without_vnodes)***\"\nset -eo pipefail\
          \ && ./run_dtests.py --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_large_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_large_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_large_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_large_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_large_without_vnodes || { echo \"Filter did\
          \ not match any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail\
          \ && circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_large_without_vnodes\
          \ > /tmp/split_dtest_tests_j11_large_without_vnodes.txt\ncat /tmp/split_dtest_tests_j11_large_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_large_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j11_large_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_large_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_large_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_large_without_vnodes_final.txt\n\nsource\
          \ ~/env3.6/bin/activate\nexport PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ];\
          \ then\n  export \nfi\n\njava -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\
          \necho \"env: $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n\
          # we need the \"set -o pipefail\" here so that the exit code that circleci\
          \ will actually use is from pytest and not the exit code from tee\nexport\
          \ SPLIT_TESTS=`cat /tmp/split_dtest_tests_j11_large_without_vnodes_final.txt`\n\
          if [ ! -z \"$SPLIT_TESTS\" ]; then\n  set -o pipefail && cd ~/cassandra-dtest\
          \ && pytest --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_large_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_large_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_large_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_large_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_large_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_LARGE_DTESTS}\" == \"<nil>\" ]; then\n  echo \"\
          Repeated dtest name hasn't been defined, exiting without running any test\"\
          \nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated dtest count hasn't been defined, exiting without running any\
          \ test\"\nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" -le 0 ]; then\n  echo\
          \ \"Repeated dtest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_LARGE_DTESTS_COUNT} / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX\
          \ < (${REPEATED_LARGE_DTESTS_COUNT} % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n\
          \  fi\n\n  if (($count <= 0)); then\n    echo \"No tests to run in this\
          \ runner\"\n  else\n    echo \"Running ${REPEATED_LARGE_DTESTS} $count times\"\
          \n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\
          \n    java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\
          \n    echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\
          \n    tests_arg=$(echo ${REPEATED_LARGE_DTESTS} | sed -e \"s/,/ /g\")\n\n\
          \    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if false; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\
          \n    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir --only-resource-intensive-tests --force-resource-intensive-tests\
          \ $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_large_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 4
    resource_class: xlarge
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_large_with_vnodes)***\"\nset -eo pipefail\
          \ && ./run_dtests.py --use-vnodes --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_large_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_large_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_large_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_large_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_large_with_vnodes || { echo \"Filter did not\
          \ match any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail &&\
          \ circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_large_with_vnodes\
          \ > /tmp/split_dtest_tests_j11_large_with_vnodes.txt\ncat /tmp/split_dtest_tests_j11_large_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_large_with_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j11_large_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_large_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_large_with_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_large_with_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_large_with_vnodes_final.txt`\nif [ ! -z \"\
          $SPLIT_TESTS\" ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest\
          \ --use-vnodes --num-tokens=16 --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_large_with_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_large_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_large_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_large_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_large_vnode_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_LARGE_DTESTS}\" == \"<nil>\" ]; then\n  echo \"\
          Repeated dtest name hasn't been defined, exiting without running any test\"\
          \nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated dtest count hasn't been defined, exiting without running any\
          \ test\"\nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" -le 0 ]; then\n  echo\
          \ \"Repeated dtest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_LARGE_DTESTS_COUNT} / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX\
          \ < (${REPEATED_LARGE_DTESTS_COUNT} % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n\
          \  fi\n\n  if (($count <= 0)); then\n    echo \"No tests to run in this\
          \ runner\"\n  else\n    echo \"Running ${REPEATED_LARGE_DTESTS} $count times\"\
          \n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\
          \n    java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\
          \n    echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\
          \n    tests_arg=$(echo ${REPEATED_LARGE_DTESTS} | sed -e \"s/,/ /g\")\n\n\
          \    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if true; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n\
          \    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir --only-resource-intensive-tests --force-resource-intensive-tests\
          \ $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k not cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j11_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j11_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_dtests_offheap\
          \ > /tmp/split_dtest_tests_j11_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j11_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j11_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\"\
          \ncat /tmp/split_dtest_tests_j11_dtests_offheap_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j11_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j11_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_offheap_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_DTESTS}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest name hasn't been defined, exiting without running any test\"\nelif\
          \ [ \"${REPEATED_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest count hasn't been defined, exiting without running any test\"\n\
          elif [ \"${REPEATED_DTESTS_COUNT}\" -le 0 ]; then\n  echo \"Repeated dtest\
          \ count is lesser or equals than zero, exiting without running any test\"\
          \nelse\n\n  # Calculate the number of test iterations to be run by the current\
          \ parallel runner.\n  # Since we are running the same test multiple times\
          \ there is no need to use `circleci tests split`.\n  count=$((${REPEATED_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX < (${REPEATED_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n  fi\n\n  if (($count\
          \ <= 0)); then\n    echo \"No tests to run in this runner\"\n  else\n  \
          \  echo \"Running ${REPEATED_DTESTS} $count times\"\n\n    source ~/env3.6/bin/activate\n\
          \    export PATH=$JAVA_HOME/bin:$PATH\n\n    java -version\n    cd ~/cassandra-dtest\n\
          \    mkdir -p /tmp/dtest\n\n    echo \"env: $(env)\"\n    echo \"** done\
          \ env\"\n    mkdir -p /tmp/results/dtests\n\n    tests_arg=$(echo ${REPEATED_DTESTS}\
          \ | sed -e \"s/,/ /g\")\n\n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if true; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n\
          \    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir --use-off-heap-memtables --skip-resource-intensive-tests\
          \ $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_DTESTS}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest name hasn't been defined, exiting without running any test\"\nelif\
          \ [ \"${REPEATED_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest count hasn't been defined, exiting without running any test\"\n\
          elif [ \"${REPEATED_DTESTS_COUNT}\" -le 0 ]; then\n  echo \"Repeated dtest\
          \ count is lesser or equals than zero, exiting without running any test\"\
          \nelse\n\n  # Calculate the number of test iterations to be run by the current\
          \ parallel runner.\n  # Since we are running the same test multiple times\
          \ there is no need to use `circleci tests split`.\n  count=$((${REPEATED_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX < (${REPEATED_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n  fi\n\n  if (($count\
          \ <= 0)); then\n    echo \"No tests to run in this runner\"\n  else\n  \
          \  echo \"Running ${REPEATED_DTESTS} $count times\"\n\n    source ~/env3.6/bin/activate\n\
          \    export PATH=$JAVA_HOME/bin:$PATH\n\n    java -version\n    cd ~/cassandra-dtest\n\
          \    mkdir -p /tmp/dtest\n\n    echo \"env: $(env)\"\n    echo \"** done\
          \ env\"\n    mkdir -p /tmp/results/dtests\n\n    tests_arg=$(echo ${REPEATED_DTESTS}\
          \ | sed -e \"s/,/ /g\")\n\n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if false; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\
          \n    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir  $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j11_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k not\
          \ cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j11_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j11_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j11_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j11_with_vnodes\
          \ > /tmp/split_dtest_tests_j11_with_vnodes.txt\ncat /tmp/split_dtest_tests_j11_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j11_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j11_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j11_with_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j11_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j11_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j11_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j11_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j11_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_dtests_vnode_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_DTESTS}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest name hasn't been defined, exiting without running any test\"\nelif\
          \ [ \"${REPEATED_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest count hasn't been defined, exiting without running any test\"\n\
          elif [ \"${REPEATED_DTESTS_COUNT}\" -le 0 ]; then\n  echo \"Repeated dtest\
          \ count is lesser or equals than zero, exiting without running any test\"\
          \nelse\n\n  # Calculate the number of test iterations to be run by the current\
          \ parallel runner.\n  # Since we are running the same test multiple times\
          \ there is no need to use `circleci tests split`.\n  count=$((${REPEATED_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX < (${REPEATED_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n  fi\n\n  if (($count\
          \ <= 0)); then\n    echo \"No tests to run in this runner\"\n  else\n  \
          \  echo \"Running ${REPEATED_DTESTS} $count times\"\n\n    source ~/env3.6/bin/activate\n\
          \    export PATH=$JAVA_HOME/bin:$PATH\n\n    java -version\n    cd ~/cassandra-dtest\n\
          \    mkdir -p /tmp/dtest\n\n    echo \"env: $(env)\"\n    echo \"** done\
          \ env\"\n    mkdir -p /tmp/results/dtests\n\n    tests_arg=$(echo ${REPEATED_DTESTS}\
          \ | sed -e \"s/,/ /g\")\n\n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if true; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n\
          \    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir  $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j11_jvm_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 43
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/distributed/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/distributed/;;g"
          | grep "Test\.java$" | grep -v upgrade > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine distributed Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.distributed.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=distributed\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_jvm_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest,org.apache.cassandra.distributed.test.SSTableIdGenerationTest,org.apache.cassandra.distributed.test.accord.AccordCQLTest,org.apache.cassandra.distributed.test.accord.AccordFeatureFlagTest,org.apache.cassandra.distributed.test.accord.AccordIntegrationTest,org.apache.cassandra.distributed.test.accord.AccordMigrationTest,org.apache.cassandra.distributed.test.guardrails.GuardrailCollectionSizeOnSSTableWriteTest,org.apache.cassandra.distributed.test.guardrails.GuardrailItemsPerCollectionOnSSTableWriteTest
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 43
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_JVM_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_JVM_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_JVM_DTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/\
          \ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-jvm-dtest-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-jvm-dtest-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_jvm_dtests_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 43
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/distributed/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/distributed/;;g"
          | grep "Test\.java$" | grep -v upgrade > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine distributed Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.distributed.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\
          \ -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\
          \ -Dtest.classlistprefix=distributed -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_jvm_dtests_vnode_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest,org.apache.cassandra.distributed.test.SSTableIdGenerationTest,org.apache.cassandra.distributed.test.accord.AccordCQLTest,org.apache.cassandra.distributed.test.accord.AccordFeatureFlagTest,org.apache.cassandra.distributed.test.accord.AccordIntegrationTest,org.apache.cassandra.distributed.test.accord.AccordMigrationTest,org.apache.cassandra.distributed.test.guardrails.GuardrailCollectionSizeOnSSTableWriteTest,org.apache.cassandra.distributed.test.guardrails.GuardrailItemsPerCollectionOnSSTableWriteTest
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 43
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_JVM_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_JVM_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_JVM_DTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/\
          \ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=true\nvnodes_args=\"\"\nif [ \"$vnodes\"\
          \ = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-jvm-dtest-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-jvm-dtest-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_repeated_ant_test:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "if [ \"${REPEATED_ANT_TEST_CLASS}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated utest class name hasn't been defined, exiting without running\
          \ any test\"\nelif [ \"${REPEATED_ANT_TEST_COUNT}\" == \"<nil>\" ]; then\n\
          \  echo \"Repeated utest count hasn't been defined, exiting without running\
          \ any test\"\nelif [ \"${REPEATED_ANT_TEST_COUNT}\" -le 0 ]; then\n  echo\
          \ \"Repeated utest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_ANT_TEST_COUNT} / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX\
          \ < (${REPEATED_ANT_TEST_COUNT} % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n\
          \  fi\n\n  if (($count <= 0)); then\n    echo \"No tests to run in this\
          \ runner\"\n  else\n    echo \"Running ${REPEATED_ANT_TEST_TARGET} ${REPEATED_ANT_TEST_CLASS}\
          \ ${REPEATED_ANT_TEST_METHODS} ${REPEATED_ANT_TEST_COUNT} times\"\n\n  \
          \  set -x\n    export PATH=$JAVA_HOME/bin:$PATH\n    time mv ~/cassandra\
          \ /tmp\n    cd /tmp/cassandra\n    if [ -d ~/dtest_jars ]; then\n      cp\
          \ ~/dtest_jars/dtest* /tmp/cassandra/build/\n    fi\n\n    target=${REPEATED_ANT_TEST_TARGET}\n\
          \    class_path=${REPEATED_ANT_TEST_CLASS}\n    class_name=\"${class_path##*.}\"\
          \n\n    # Prepare the -Dtest.name argument.\n    # It can be the fully qualified\
          \ class name or the short class name, depending on the target.\n    if [[\
          \ $target == \"test\" || \\\n          $target == \"test-cdc\" || \\\n \
          \         $target == \"test-compression\" || \\\n          $target == \"\
          test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name=\"-Dtest.name=$class_name\"\
          \n    else\n      name=\"-Dtest.name=$class_path\"\n    fi\n\n    # Prepare\
          \ the -Dtest.methods argument, which is optional\n    if [ \"${REPEATED_ANT_TEST_METHODS}\"\
          \ == \"<nil>\" ]; then\n      methods=\"\"\n    else\n      methods=\"-Dtest.methods=${REPEATED_ANT_TEST_METHODS}\"\
          \n    fi\n\n    # Prepare the JVM dtests vnodes argument, which is optional\n\
          \    vnodes_args=\"\"\n    if ${REPEATED_ANT_TEST_VNODES}; then\n      vnodes_args=\"\
          -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\n    fi\n\n    # Run\
          \ the test target as many times as requested collecting the exit code,\n\
          \    # stopping the iteration only if stop_on_failure is set.\n    exit_code=\"\
          $?\"\n    for i in $(seq -w 1 $count); do\n\n      echo \"Running test iteration\
          \ $i of $count\"\n\n      # run the test\n      status=\"passes\"\n    \
          \  if !( set -o pipefail && ant $target $name $methods $vnodes_args -Dno-build-test=true\
          \ | tee stdout.txt ); then\n        status=\"fails\"\n        exit_code=1\n\
          \      fi\n\n      # move the stdout output file\n      dest=/tmp/results/repeated_utest/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${REPEATED_ANT_TEST_TARGET}-${REPEATED_ANT_TEST_CLASS}.txt\n\
          \n      # move the XML output files\n      source=build/test/output\n  \
          \    dest=/tmp/results/repeated_utest/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs\n      dest=/tmp/results/repeated_utest/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n\n      # maybe stop iterations\
          \ on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE} = true\
          \ ]] && (( $exit_code > 0 )); then\n        break\n      fi\n    done\n\n\
          \    (exit ${exit_code})\n  fi\nfi\n"
        name: Run repeated JUnit test
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utest/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utest/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utest/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utest/logs
    working_directory: ~/
  j11_simulator_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\nant test-simulator-dtest -Dno-build-test=true\n"
        name: Run Simulator Tests
        no_output_timeout: 30m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_simulator_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: org.apache.cassandra.simulator.test.ShortAccordSimulationTest,org.apache.cassandra.simulator.test.ShortPaxosSimulationTest
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_SIMULATOR_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_SIMULATOR_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_SIMULATOR_DTESTS} | sed -e \"s/<nil>//\" | sed -e\
          \ \"s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\n\
          echo \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-simulator-dtest\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-simulator-dtest $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_unit_tests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 45
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=unit\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_unit_tests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 45
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=testsome\ntesttag=\"\"\nif\
          \ [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant testsome $name_arg $methods_arg $vnodes_args -Dno-build-test=true\
          \ | \\\n            tee stdout.txt \\\n          ); then\n        status=\"\
          fails\"\n        exit_code=1\n      fi\n\n      # move the stdout output\
          \ file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_cdc:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-cdc   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=unit\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-cdc)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_cdc_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-cdc\ntesttag=\"\"\nif\
          \ [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-cdc $name_arg $methods_arg $vnodes_args -Dno-build-test=true\
          \ | \\\n            tee stdout.txt \\\n          ); then\n        status=\"\
          fails\"\n        exit_code=1\n      fi\n\n      # move the stdout output\
          \ file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_compression:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-compression   -Dtest.timeout=\"\
          $test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\
          \ -Dtest.classlistprefix=unit -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-compression)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_compression_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-compression\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-compression $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_fqltool:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\n\
          if [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n\
          fi\nant fqltool-test -Dno-build-test=true\n"
        name: Run Unit Tests (fqltool-test)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_fqltool_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_FQLTOOL_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_FQLTOOL_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS_FQLTOOL} | sed -e \"s/<nil>//\" | sed -e\
          \ \"s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\n\
          echo \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=fqltool-test\ntesttag=\"\"\
          \nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant fqltool-test $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_long:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\n\
          if [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n\
          fi\nant long-test -Dno-build-test=true\n"
        name: Run Unit Tests (long-test)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_long_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: org.apache.cassandra.dht.tokenallocator.Murmur3ReplicationAwareTokenAllocatorTest,org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocatorTest,org.apache.cassandra.dht.tokenallocator.RandomReplicationAwareTokenAllocatorTest
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_LONG_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_LONG_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS_LONG} | sed -e \"s/<nil>//\" | sed -e \"\
          s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=long-testsome\ntesttag=\"\"\
          \nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant long-testsome $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_stress:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\n\
          if [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n\
          fi\nant stress-test -Dno-build-test=true\n"
        name: Run Unit Tests (stress-test)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_stress_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_STRESS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_STRESS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS_STRESS} | sed -e \"s/<nil>//\" | sed -e \"\
          s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=stress-test-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant stress-test-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_system_keyspace_directory:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-system-keyspace-directory\
          \   -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\
          \ -Dtest.classlistprefix=unit -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-system-keyspace-directory)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_system_keyspace_directory_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-system-keyspace-directory\n\
          testtag=\"\"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\n\
          elif [[ $target == \"test-compression\" ]]; then\n  testtag=\"compression\"\
          \nelif [[ $target == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"\
          system_keyspace_directory\"\nelif [[ $target == \"test-trie\" ]]; then\n\
          \  testtag=\"trie\"\nfi\n\n# Run each test class as many times as requested.\n\
          exit_code=\"$?\"\nfor test in $tests; do\n\n    # Split class and method\
          \ names from the test name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"\
          #\"*}\n      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-system-keyspace-directory $name_arg $methods_arg\
          \ $vnodes_args -Dno-build-test=true | \\\n            tee stdout.txt \\\n\
          \          ); then\n        status=\"fails\"\n        exit_code=1\n    \
          \  fi\n\n      # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j11_utests_trie:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-trie   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=unit\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-trie)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j11_utests_trie_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    - CASSANDRA_USE_JDK11: true
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-trie\ntesttag=\"\"\n\
          if [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-trie $name_arg $methods_arg $vnodes_args -Dno-build-test=true\
          \ | \\\n            tee stdout.txt \\\n          ); then\n        status=\"\
          fails\"\n        exit_code=1\n      fi\n\n      # move the stdout output\
          \ file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_build:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: 'git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
          ~/cassandra

          '
        name: Clone Cassandra Repository (via git)
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\n# Loop to prevent\
          \ failure due to maven-ant-tasks not downloading a jar..\nfor x in $(seq\
          \ 1 3); do\n    ${ANT_HOME}/bin/ant clean realclean jar\n    RETURN=\"$?\"\
          \n    if [ \"${RETURN}\" -eq \"0\" ]; then\n        break\n    fi\ndone\n\
          # Exit, if we didn't build successfully\nif [ \"${RETURN}\" -ne \"0\" ];\
          \ then\n    echo \"Build failed with exit code: ${RETURN}\"\n    exit ${RETURN}\n\
          fi\n"
        name: Build Cassandra
        no_output_timeout: 15m
    - run:
        command: 'export PATH=$JAVA_HOME/bin:$PATH

          cd ~/cassandra

          ant eclipse-warnings

          '
        name: Run eclipse-warnings
    - persist_to_workspace:
        paths:
        - cassandra
        - .m2
        root: /home/cassandra
    working_directory: ~/
  j8_cqlsh_dtests_py3:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_without_vnodes\
          \ > /tmp/split_dtest_tests_j8_without_vnodes.txt\ncat /tmp/split_dtest_tests_j8_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.6'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.6\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py311:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.11/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_without_vnodes\
          \ > /tmp/split_dtest_tests_j8_without_vnodes.txt\ncat /tmp/split_dtest_tests_j8_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.11'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.11\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py311_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.11/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j8_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j8_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_dtests_offheap\
          \ > /tmp/split_dtest_tests_j8_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j8_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j8_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.11'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.11\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py311_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.11/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_with_vnodes\
          \ > /tmp/split_dtest_tests_j8_with_vnodes.txt\ncat /tmp/split_dtest_tests_j8_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_with_vnodes_final.txt\"\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n\nsource ~/env3.11/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.11'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.11\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j8_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j8_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py38:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.8/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_without_vnodes\
          \ > /tmp/split_dtest_tests_j8_without_vnodes.txt\ncat /tmp/split_dtest_tests_j8_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.8'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.8\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py38_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.8/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j8_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j8_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_dtests_offheap\
          \ > /tmp/split_dtest_tests_j8_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j8_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j8_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.8'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.8\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py38_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.8/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_with_vnodes\
          \ > /tmp/split_dtest_tests_j8_with_vnodes.txt\ncat /tmp/split_dtest_tests_j8_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_with_vnodes_final.txt\"\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n\nsource ~/env3.8/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.8'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.8\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j8_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j8_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py3_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j8_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j8_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_dtests_offheap\
          \ > /tmp/split_dtest_tests_j8_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j8_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j8_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.6'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.6\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlsh_dtests_py3_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k cql'\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_with_vnodes\
          \ > /tmp/split_dtest_tests_j8_with_vnodes.txt\ncat /tmp/split_dtest_tests_j8_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_with_vnodes_final.txt\"\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n 'CQLSH_PYTHON=/usr/bin/python3.6'\
          \ ]; then\n  export CQLSH_PYTHON=/usr/bin/python3.6\nfi\n\njava -version\n\
          cd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env: $(env)\"\necho\
          \ \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need the \"set -o\
          \ pipefail\" here so that the exit code that circleci will actually use\
          \ is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j8_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j8_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_cqlshlib_cython_tests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'export PATH=$JAVA_HOME/bin:$PATH

          export cython="yes"

          time mv ~/cassandra /tmp

          cd /tmp/cassandra/

          ./pylib/cassandra-cqlsh-tests.sh $(pwd)

          '
        name: Run cqlshlib Unit Tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/pylib
    working_directory: ~/
  j8_cqlshlib_tests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'export PATH=$JAVA_HOME/bin:$PATH

          time mv ~/cassandra /tmp

          cd /tmp/cassandra/

          ./pylib/cassandra-cqlsh-tests.sh $(pwd)

          '
        name: Run cqlshlib Unit Tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/pylib
    working_directory: ~/
  j8_dtest_jars_build:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ncd ~/cassandra\nmkdir ~/dtest_jars\n\
          git remote add apache https://github.com/apache/cassandra.git\nfor branch\
          \ in cassandra-2.2 cassandra-3.0 cassandra-3.11 cassandra-4.0 cassandra-4.1\
          \ trunk; do\n  # check out the correct cassandra version:\n  git remote\
          \ set-branches --add apache '$branch'\n  git fetch --depth 1 apache $branch\n\
          \  git checkout $branch\n  git clean -fd\n  # Loop to prevent failure due\
          \ to maven-ant-tasks not downloading a jar..\n  for x in $(seq 1 3); do\n\
          \      ${ANT_HOME}/bin/ant realclean; ${ANT_HOME}/bin/ant jar dtest-jar\n\
          \      RETURN=\"$?\"\n      if [ \"${RETURN}\" -eq \"0\" ]; then\n     \
          \     cp build/dtest*.jar ~/dtest_jars\n          break\n      fi\n  done\n\
          \  # Exit, if we didn't build successfully\n  if [ \"${RETURN}\" -ne \"\
          0\" ]; then\n      echo \"Build failed with exit code: ${RETURN}\"\n   \
          \   exit ${RETURN}\n  fi\ndone\n# and build the dtest-jar for the branch\
          \ under test\n${ANT_HOME}/bin/ant realclean\ngit checkout origin/$CIRCLE_BRANCH\n\
          git clean -fd\nfor x in $(seq 1 3); do\n    ${ANT_HOME}/bin/ant realclean;\
          \ ${ANT_HOME}/bin/ant jar dtest-jar\n    RETURN=\"$?\"\n    if [ \"${RETURN}\"\
          \ -eq \"0\" ]; then\n        cp build/dtest*.jar ~/dtest_jars\n        break\n\
          \    fi\ndone\n# Exit, if we didn't build successfully\nif [ \"${RETURN}\"\
          \ -ne \"0\" ]; then\n    echo \"Build failed with exit code: ${RETURN}\"\
          \n    exit ${RETURN}\nfi\nls -l ~/dtest_jars\n"
        name: Build Cassandra DTest jars
        no_output_timeout: 15m
    - persist_to_workspace:
        paths:
        - dtest_jars
        root: /home/cassandra
    working_directory: ~/
  j8_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_without_vnodes)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --skip-resource-intensive-tests --pytest-options '-k not\
          \ cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_without_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_without_vnodes\
          \ > /tmp/split_dtest_tests_j8_without_vnodes.txt\ncat /tmp/split_dtest_tests_j8_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_without_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_without_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_large:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 4
    resource_class: xlarge
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_large_without_vnodes)***\"\nset -eo pipefail\
          \ && ./run_dtests.py --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_large_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_large_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_large_without_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_large_without_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_large_without_vnodes || { echo \"Filter did\
          \ not match any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail\
          \ && circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_large_without_vnodes\
          \ > /tmp/split_dtest_tests_j8_large_without_vnodes.txt\ncat /tmp/split_dtest_tests_j8_large_without_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_large_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_large_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_large_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_large_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j8_large_without_vnodes_final.txt\n\nsource\
          \ ~/env3.6/bin/activate\nexport PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ];\
          \ then\n  export \nfi\n\njava -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\
          \necho \"env: $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n\
          # we need the \"set -o pipefail\" here so that the exit code that circleci\
          \ will actually use is from pytest and not the exit code from tee\nexport\
          \ SPLIT_TESTS=`cat /tmp/split_dtest_tests_j8_large_without_vnodes_final.txt`\n\
          if [ ! -z \"$SPLIT_TESTS\" ]; then\n  set -o pipefail && cd ~/cassandra-dtest\
          \ && pytest --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_large_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_large_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_large_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_large_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_large_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_LARGE_DTESTS}\" == \"<nil>\" ]; then\n  echo \"\
          Repeated dtest name hasn't been defined, exiting without running any test\"\
          \nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated dtest count hasn't been defined, exiting without running any\
          \ test\"\nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" -le 0 ]; then\n  echo\
          \ \"Repeated dtest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_LARGE_DTESTS_COUNT} / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX\
          \ < (${REPEATED_LARGE_DTESTS_COUNT} % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n\
          \  fi\n\n  if (($count <= 0)); then\n    echo \"No tests to run in this\
          \ runner\"\n  else\n    echo \"Running ${REPEATED_LARGE_DTESTS} $count times\"\
          \n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\
          \n    java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\
          \n    echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\
          \n    tests_arg=$(echo ${REPEATED_LARGE_DTESTS} | sed -e \"s/,/ /g\")\n\n\
          \    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if false; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\
          \n    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir --only-resource-intensive-tests --force-resource-intensive-tests\
          \ $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_large_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 4
    resource_class: xlarge
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_large_with_vnodes)***\"\nset -eo pipefail\
          \ && ./run_dtests.py --use-vnodes --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_large_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_large_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_large_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_large_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_large_with_vnodes || { echo \"Filter did not\
          \ match any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail &&\
          \ circleci tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_large_with_vnodes\
          \ > /tmp/split_dtest_tests_j8_large_with_vnodes.txt\ncat /tmp/split_dtest_tests_j8_large_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_large_with_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_large_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_large_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_large_with_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j8_large_with_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_large_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --only-resource-intensive-tests --force-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_large_with_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_large_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_large_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_large_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_large_vnode_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_LARGE_DTESTS}\" == \"<nil>\" ]; then\n  echo \"\
          Repeated dtest name hasn't been defined, exiting without running any test\"\
          \nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated dtest count hasn't been defined, exiting without running any\
          \ test\"\nelif [ \"${REPEATED_LARGE_DTESTS_COUNT}\" -le 0 ]; then\n  echo\
          \ \"Repeated dtest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_LARGE_DTESTS_COUNT} / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX\
          \ < (${REPEATED_LARGE_DTESTS_COUNT} % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n\
          \  fi\n\n  if (($count <= 0)); then\n    echo \"No tests to run in this\
          \ runner\"\n  else\n    echo \"Running ${REPEATED_LARGE_DTESTS} $count times\"\
          \n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\
          \n    java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\
          \n    echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\
          \n    tests_arg=$(echo ${REPEATED_LARGE_DTESTS} | sed -e \"s/,/ /g\")\n\n\
          \    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if true; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n\
          \    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir --only-resource-intensive-tests --force-resource-intensive-tests\
          \ $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_offheap:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_dtests_offheap)***\"\nset -eo pipefail &&\
          \ ./run_dtests.py --use-vnodes --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --pytest-options '-k not cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ /tmp/all_dtest_tests_j8_dtests_offheap\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_dtests_offheap_raw\
          \ > /tmp/all_dtest_tests_j8_dtests_offheap || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_dtests_offheap\
          \ > /tmp/split_dtest_tests_j8_dtests_offheap.txt\ncat /tmp/split_dtest_tests_j8_dtests_offheap.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n"
        name: Determine Tests to Run (j8_dtests_offheap)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\"\n\
          cat /tmp/split_dtest_tests_j8_dtests_offheap_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_dtests_offheap_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --use-off-heap-memtables --skip-resource-intensive-tests\
          \ --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_dtests_offheap.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_dtests_offheap)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_dtests_offheap
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_dtests_offheap_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_offheap_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_DTESTS}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest name hasn't been defined, exiting without running any test\"\nelif\
          \ [ \"${REPEATED_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest count hasn't been defined, exiting without running any test\"\n\
          elif [ \"${REPEATED_DTESTS_COUNT}\" -le 0 ]; then\n  echo \"Repeated dtest\
          \ count is lesser or equals than zero, exiting without running any test\"\
          \nelse\n\n  # Calculate the number of test iterations to be run by the current\
          \ parallel runner.\n  # Since we are running the same test multiple times\
          \ there is no need to use `circleci tests split`.\n  count=$((${REPEATED_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX < (${REPEATED_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n  fi\n\n  if (($count\
          \ <= 0)); then\n    echo \"No tests to run in this runner\"\n  else\n  \
          \  echo \"Running ${REPEATED_DTESTS} $count times\"\n\n    source ~/env3.6/bin/activate\n\
          \    export PATH=$JAVA_HOME/bin:$PATH\n\n    java -version\n    cd ~/cassandra-dtest\n\
          \    mkdir -p /tmp/dtest\n\n    echo \"env: $(env)\"\n    echo \"** done\
          \ env\"\n    mkdir -p /tmp/results/dtests\n\n    tests_arg=$(echo ${REPEATED_DTESTS}\
          \ | sed -e \"s/,/ /g\")\n\n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if true; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n\
          \    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir --use-off-heap-memtables --skip-resource-intensive-tests\
          \ $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_DTESTS}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest name hasn't been defined, exiting without running any test\"\nelif\
          \ [ \"${REPEATED_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest count hasn't been defined, exiting without running any test\"\n\
          elif [ \"${REPEATED_DTESTS_COUNT}\" -le 0 ]; then\n  echo \"Repeated dtest\
          \ count is lesser or equals than zero, exiting without running any test\"\
          \nelse\n\n  # Calculate the number of test iterations to be run by the current\
          \ parallel runner.\n  # Since we are running the same test multiple times\
          \ there is no need to use `circleci tests split`.\n  count=$((${REPEATED_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX < (${REPEATED_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n  fi\n\n  if (($count\
          \ <= 0)); then\n    echo \"No tests to run in this runner\"\n  else\n  \
          \  echo \"Running ${REPEATED_DTESTS} $count times\"\n\n    source ~/env3.6/bin/activate\n\
          \    export PATH=$JAVA_HOME/bin:$PATH\n\n    java -version\n    cd ~/cassandra-dtest\n\
          \    mkdir -p /tmp/dtest\n\n    echo \"env: $(env)\"\n    echo \"** done\
          \ env\"\n    mkdir -p /tmp/results/dtests\n\n    tests_arg=$(echo ${REPEATED_DTESTS}\
          \ | sed -e \"s/,/ /g\")\n\n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if false; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\
          \n    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir  $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 50
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_with_vnodes)***\"\nset -eo pipefail && ./run_dtests.py\
          \ --use-vnodes --skip-resource-intensive-tests --pytest-options '-k not\
          \ cql' --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_with_vnodes\nelse\n  grep -e '' /tmp/all_dtest_tests_j8_with_vnodes_raw\
          \ > /tmp/all_dtest_tests_j8_with_vnodes || { echo \"Filter did not match\
          \ any tests! Exiting build.\"; exit 0; }\nfi\nset -eo pipefail && circleci\
          \ tests split --split-by=timings --timings-type=classname /tmp/all_dtest_tests_j8_with_vnodes\
          \ > /tmp/split_dtest_tests_j8_with_vnodes.txt\ncat /tmp/split_dtest_tests_j8_with_vnodes.txt\
          \ | tr '\\n' ' ' > /tmp/split_dtest_tests_j8_with_vnodes_final.txt\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_with_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_with_vnodes_final.txt\"\ncat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt\n\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\nif [ -n '' ]; then\n  export \nfi\n\n\
          java -version\ncd ~/cassandra-dtest\nmkdir -p /tmp/dtest\n\necho \"env:\
          \ $(env)\"\necho \"** done env\"\nmkdir -p /tmp/results/dtests\n# we need\
          \ the \"set -o pipefail\" here so that the exit code that circleci will\
          \ actually use is from pytest and not the exit code from tee\nexport SPLIT_TESTS=`cat\
          \ /tmp/split_dtest_tests_j8_with_vnodes_final.txt`\nif [ ! -z \"$SPLIT_TESTS\"\
          \ ]; then\n  set -o pipefail && cd ~/cassandra-dtest && pytest --use-vnodes\
          \ --num-tokens=16 --skip-resource-intensive-tests --log-level=\"DEBUG\"\
          \ --junit-xml=/tmp/results/dtests/pytest_result_j8_with_vnodes.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir $SPLIT_TESTS 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n\
          \  echo \"Tune your parallelism, there are more containers than test classes.\
          \ Nothing to do in this container\"\n  (exit 1)\nfi\n"
        name: Run dtests (j8_with_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_with_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_with_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_dtests_vnode_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_DTESTS}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest name hasn't been defined, exiting without running any test\"\nelif\
          \ [ \"${REPEATED_DTESTS_COUNT}\" == \"<nil>\" ]; then\n  echo \"Repeated\
          \ dtest count hasn't been defined, exiting without running any test\"\n\
          elif [ \"${REPEATED_DTESTS_COUNT}\" -le 0 ]; then\n  echo \"Repeated dtest\
          \ count is lesser or equals than zero, exiting without running any test\"\
          \nelse\n\n  # Calculate the number of test iterations to be run by the current\
          \ parallel runner.\n  # Since we are running the same test multiple times\
          \ there is no need to use `circleci tests split`.\n  count=$((${REPEATED_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX < (${REPEATED_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n  fi\n\n  if (($count\
          \ <= 0)); then\n    echo \"No tests to run in this runner\"\n  else\n  \
          \  echo \"Running ${REPEATED_DTESTS} $count times\"\n\n    source ~/env3.6/bin/activate\n\
          \    export PATH=$JAVA_HOME/bin:$PATH\n\n    java -version\n    cd ~/cassandra-dtest\n\
          \    mkdir -p /tmp/dtest\n\n    echo \"env: $(env)\"\n    echo \"** done\
          \ env\"\n    mkdir -p /tmp/results/dtests\n\n    tests_arg=$(echo ${REPEATED_DTESTS}\
          \ | sed -e \"s/,/ /g\")\n\n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if true; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\n\
          \    fi\n\n    upgrade_arg=\"\"\n    if false; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir  $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_jvm_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 43
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/distributed/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/distributed/;;g"
          | grep "Test\.java$" | grep -v upgrade > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine distributed Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.distributed.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=distributed\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_jvm_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest,org.apache.cassandra.distributed.test.SSTableIdGenerationTest,org.apache.cassandra.distributed.test.accord.AccordCQLTest,org.apache.cassandra.distributed.test.accord.AccordFeatureFlagTest,org.apache.cassandra.distributed.test.accord.AccordIntegrationTest,org.apache.cassandra.distributed.test.accord.AccordMigrationTest,org.apache.cassandra.distributed.test.guardrails.GuardrailCollectionSizeOnSSTableWriteTest,org.apache.cassandra.distributed.test.guardrails.GuardrailItemsPerCollectionOnSSTableWriteTest
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 43
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_JVM_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_JVM_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_JVM_DTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/\
          \ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-jvm-dtest-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-jvm-dtest-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_jvm_dtests_vnode:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 43
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/distributed/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/distributed/;;g"
          | grep "Test\.java$" | grep -v upgrade > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine distributed Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.distributed.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\
          \ -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\
          \ -Dtest.classlistprefix=distributed -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_jvm_dtests_vnode_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest,org.apache.cassandra.distributed.test.SSTableIdGenerationTest,org.apache.cassandra.distributed.test.accord.AccordCQLTest,org.apache.cassandra.distributed.test.accord.AccordFeatureFlagTest,org.apache.cassandra.distributed.test.accord.AccordIntegrationTest,org.apache.cassandra.distributed.test.accord.AccordMigrationTest,org.apache.cassandra.distributed.test.guardrails.GuardrailCollectionSizeOnSSTableWriteTest,org.apache.cassandra.distributed.test.guardrails.GuardrailItemsPerCollectionOnSSTableWriteTest
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 43
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_JVM_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_JVM_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_JVM_DTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/\
          \ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=true\nvnodes_args=\"\"\nif [ \"$vnodes\"\
          \ = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-jvm-dtest-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-jvm-dtest-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_jvm_upgrade_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 15
    resource_class: xlarge
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/distributed/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/distributed/;;g"
          | grep "Test\.java$" | grep upgrade > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine distributed Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.distributed.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=distributed\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_jvm_upgrade_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 15
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_JVM_UPGRADE_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_JVM_UPGRADE_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_JVM_UPGRADE_DTESTS} | sed -e \"s/<nil>//\" | sed\
          \ -e \"s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\n\
          echo \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-jvm-dtest-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-jvm-dtest-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_repeated_ant_test:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "if [ \"${REPEATED_ANT_TEST_CLASS}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated utest class name hasn't been defined, exiting without running\
          \ any test\"\nelif [ \"${REPEATED_ANT_TEST_COUNT}\" == \"<nil>\" ]; then\n\
          \  echo \"Repeated utest count hasn't been defined, exiting without running\
          \ any test\"\nelif [ \"${REPEATED_ANT_TEST_COUNT}\" -le 0 ]; then\n  echo\
          \ \"Repeated utest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_ANT_TEST_COUNT} / CIRCLE_NODE_TOTAL))\n  if (($CIRCLE_NODE_INDEX\
          \ < (${REPEATED_ANT_TEST_COUNT} % CIRCLE_NODE_TOTAL))); then\n    count=$((count+1))\n\
          \  fi\n\n  if (($count <= 0)); then\n    echo \"No tests to run in this\
          \ runner\"\n  else\n    echo \"Running ${REPEATED_ANT_TEST_TARGET} ${REPEATED_ANT_TEST_CLASS}\
          \ ${REPEATED_ANT_TEST_METHODS} ${REPEATED_ANT_TEST_COUNT} times\"\n\n  \
          \  set -x\n    export PATH=$JAVA_HOME/bin:$PATH\n    time mv ~/cassandra\
          \ /tmp\n    cd /tmp/cassandra\n    if [ -d ~/dtest_jars ]; then\n      cp\
          \ ~/dtest_jars/dtest* /tmp/cassandra/build/\n    fi\n\n    target=${REPEATED_ANT_TEST_TARGET}\n\
          \    class_path=${REPEATED_ANT_TEST_CLASS}\n    class_name=\"${class_path##*.}\"\
          \n\n    # Prepare the -Dtest.name argument.\n    # It can be the fully qualified\
          \ class name or the short class name, depending on the target.\n    if [[\
          \ $target == \"test\" || \\\n          $target == \"test-cdc\" || \\\n \
          \         $target == \"test-compression\" || \\\n          $target == \"\
          test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name=\"-Dtest.name=$class_name\"\
          \n    else\n      name=\"-Dtest.name=$class_path\"\n    fi\n\n    # Prepare\
          \ the -Dtest.methods argument, which is optional\n    if [ \"${REPEATED_ANT_TEST_METHODS}\"\
          \ == \"<nil>\" ]; then\n      methods=\"\"\n    else\n      methods=\"-Dtest.methods=${REPEATED_ANT_TEST_METHODS}\"\
          \n    fi\n\n    # Prepare the JVM dtests vnodes argument, which is optional\n\
          \    vnodes_args=\"\"\n    if ${REPEATED_ANT_TEST_VNODES}; then\n      vnodes_args=\"\
          -Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\n    fi\n\n    # Run\
          \ the test target as many times as requested collecting the exit code,\n\
          \    # stopping the iteration only if stop_on_failure is set.\n    exit_code=\"\
          $?\"\n    for i in $(seq -w 1 $count); do\n\n      echo \"Running test iteration\
          \ $i of $count\"\n\n      # run the test\n      status=\"passes\"\n    \
          \  if !( set -o pipefail && ant $target $name $methods $vnodes_args -Dno-build-test=true\
          \ | tee stdout.txt ); then\n        status=\"fails\"\n        exit_code=1\n\
          \      fi\n\n      # move the stdout output file\n      dest=/tmp/results/repeated_utest/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${REPEATED_ANT_TEST_TARGET}-${REPEATED_ANT_TEST_CLASS}.txt\n\
          \n      # move the XML output files\n      source=build/test/output\n  \
          \    dest=/tmp/results/repeated_utest/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs\n      dest=/tmp/results/repeated_utest/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n\n      # maybe stop iterations\
          \ on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE} = true\
          \ ]] && (( $exit_code > 0 )); then\n        break\n      fi\n    done\n\n\
          \    (exit ${exit_code})\n  fi\nfi\n"
        name: Run repeated JUnit test
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utest/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utest/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utest/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utest/logs
    working_directory: ~/
  j8_simulator_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\nant test-simulator-dtest -Dno-build-test=true\n"
        name: Run Simulator Tests
        no_output_timeout: 30m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_simulator_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: org.apache.cassandra.simulator.test.ShortAccordSimulationTest,org.apache.cassandra.simulator.test.ShortPaxosSimulationTest
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_SIMULATOR_DTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_SIMULATOR_DTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_SIMULATOR_DTESTS} | sed -e \"s/<nil>//\" | sed -e\
          \ \"s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\n\
          echo \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-simulator-dtest\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-simulator-dtest $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_unit_tests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 45
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=unit\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_unit_tests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 45
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=testsome\ntesttag=\"\"\nif\
          \ [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant testsome $name_arg $methods_arg $vnodes_args -Dno-build-test=true\
          \ | \\\n            tee stdout.txt \\\n          ); then\n        status=\"\
          fails\"\n        exit_code=1\n      fi\n\n      # move the stdout output\
          \ file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_upgrade_dtests:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 20
    resource_class: large
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "# reminder: this code (along with all the steps) is independently\
          \ executed on every circle container\n# so the goal here is to get the circleci\
          \ script to return the tests *this* container will run\n# which we do via\
          \ the `circleci` cli tool.\n\ncd cassandra-dtest\nsource ~/env3.6/bin/activate\n\
          export PATH=$JAVA_HOME/bin:$PATH\n\nif [ -n '' ]; then\n  export \nfi\n\n\
          echo \"***Collected DTests (j8_upgradetests_without_vnodes)***\"\nset -eo\
          \ pipefail && ./run_dtests.py --execute-upgrade-tests-only --upgrade-target-version-only\
          \ --upgrade-version-selection all --dtest-print-tests-only --dtest-print-tests-output=/tmp/all_dtest_tests_j8_upgradetests_without_vnodes_raw\
          \ --cassandra-dir=../cassandra\nif [ -z '' ]; then\n  mv /tmp/all_dtest_tests_j8_upgradetests_without_vnodes_raw\
          \ /tmp/all_dtest_tests_j8_upgradetests_without_vnodes\nelse\n  grep -e ''\
          \ /tmp/all_dtest_tests_j8_upgradetests_without_vnodes_raw > /tmp/all_dtest_tests_j8_upgradetests_without_vnodes\
          \ || { echo \"Filter did not match any tests! Exiting build.\"; exit 0;\
          \ }\nfi\nset -eo pipefail && circleci tests split --split-by=timings --timings-type=classname\
          \ /tmp/all_dtest_tests_j8_upgradetests_without_vnodes > /tmp/split_dtest_tests_j8_upgradetests_without_vnodes.txt\n\
          cat /tmp/split_dtest_tests_j8_upgradetests_without_vnodes.txt | tr '\\n'\
          \ ' ' > /tmp/split_dtest_tests_j8_upgradetests_without_vnodes_final.txt\n\
          cat /tmp/split_dtest_tests_j8_upgradetests_without_vnodes_final.txt\n"
        name: Determine Tests to Run (j8_upgradetests_without_vnodes)
        no_output_timeout: 5m
    - run:
        command: "echo \"cat /tmp/split_dtest_tests_j8_upgradetests_without_vnodes_final.txt\"\
          \ncat /tmp/split_dtest_tests_j8_upgradetests_without_vnodes_final.txt\n\n\
          source ~/env3.6/bin/activate\nexport PATH=$JAVA_HOME/bin:$PATH\nif [ -n\
          \ '' ]; then\n  export \nfi\n\njava -version\ncd ~/cassandra-dtest\nmkdir\
          \ -p /tmp/dtest\n\necho \"env: $(env)\"\necho \"** done env\"\nmkdir -p\
          \ /tmp/results/dtests\n# we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\nexport SPLIT_TESTS=`cat /tmp/split_dtest_tests_j8_upgradetests_without_vnodes_final.txt`\n\
          if [ ! -z \"$SPLIT_TESTS\" ]; then\n  set -o pipefail && cd ~/cassandra-dtest\
          \ && pytest --execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection\
          \ all --log-level=\"DEBUG\" --junit-xml=/tmp/results/dtests/pytest_result_j8_upgradetests_without_vnodes.xml\
          \ -s --cassandra-dir=/home/cassandra/cassandra --keep-test-dir $SPLIT_TESTS\
          \ 2>&1 | tee /tmp/dtest/stdout.txt\nelse\n  echo \"Tune your parallelism,\
          \ there are more containers than test classes. Nothing to do in this container\"\
          \n  (exit 1)\nfi\n"
        name: Run dtests (j8_upgradetests_without_vnodes)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest_j8_upgradetests_without_vnodes
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_j8_upgradetests_without_vnodes_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_upgrade_dtests_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: xlarge
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO
          ~/cassandra-dtest

          '
        name: Clone Cassandra dtest Repository (via git)
    - run:
        command: '# note, this should be super quick as all dependencies should be
          pre-installed in the docker image

          # if additional dependencies were added to requirmeents.txt and the docker
          image hasn''t been updated

          # we''d have to install it here at runtime -- which will make things slow,
          so do yourself a favor and

          # rebuild the docker image! (it automatically pulls the latest requirements.txt
          on build)

          source ~/env3.6/bin/activate

          export PATH=$JAVA_HOME/bin:$PATH

          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt

          pip3 uninstall -y cqlsh

          pip3 freeze

          '
        name: Configure virtualenv and python Dependencies
    - run:
        command: "if [ \"${REPEATED_UPGRADE_DTESTS}\" == \"<nil>\" ]; then\n  echo\
          \ \"Repeated dtest name hasn't been defined, exiting without running any\
          \ test\"\nelif [ \"${REPEATED_UPGRADE_DTESTS_COUNT}\" == \"<nil>\" ]; then\n\
          \  echo \"Repeated dtest count hasn't been defined, exiting without running\
          \ any test\"\nelif [ \"${REPEATED_UPGRADE_DTESTS_COUNT}\" -le 0 ]; then\n\
          \  echo \"Repeated dtest count is lesser or equals than zero, exiting without\
          \ running any test\"\nelse\n\n  # Calculate the number of test iterations\
          \ to be run by the current parallel runner.\n  # Since we are running the\
          \ same test multiple times there is no need to use `circleci tests split`.\n\
          \  count=$((${REPEATED_UPGRADE_DTESTS_COUNT} / CIRCLE_NODE_TOTAL))\n  if\
          \ (($CIRCLE_NODE_INDEX < (${REPEATED_UPGRADE_DTESTS_COUNT} % CIRCLE_NODE_TOTAL)));\
          \ then\n    count=$((count+1))\n  fi\n\n  if (($count <= 0)); then\n   \
          \ echo \"No tests to run in this runner\"\n  else\n    echo \"Running ${REPEATED_UPGRADE_DTESTS}\
          \ $count times\"\n\n    source ~/env3.6/bin/activate\n    export PATH=$JAVA_HOME/bin:$PATH\n\
          \n    java -version\n    cd ~/cassandra-dtest\n    mkdir -p /tmp/dtest\n\
          \n    echo \"env: $(env)\"\n    echo \"** done env\"\n    mkdir -p /tmp/results/dtests\n\
          \n    tests_arg=$(echo ${REPEATED_UPGRADE_DTESTS} | sed -e \"s/,/ /g\")\n\
          \n    stop_on_failure_arg=\"\"\n    if ${REPEATED_TESTS_STOP_ON_FAILURE};\
          \ then\n      stop_on_failure_arg=\"-x\"\n    fi\n\n    vnodes_args=\"\"\
          \n    if false; then\n      vnodes_args=\"--use-vnodes --num-tokens=16\"\
          \n    fi\n\n    upgrade_arg=\"\"\n    if true; then\n      upgrade_arg=\"\
          --execute-upgrade-tests --upgrade-target-version-only --upgrade-version-selection\
          \ all\"\n    fi\n\n    # we need the \"set -o pipefail\" here so that the\
          \ exit code that circleci will actually use is from pytest and not the exit\
          \ code from tee\n    set -o pipefail && cd ~/cassandra-dtest && pytest $vnodes_args\
          \ --count=$count $stop_on_failure_arg $upgrade_arg --log-cli-level=DEBUG\
          \ --junit-xml=/tmp/results/dtests/pytest_result.xml -s --cassandra-dir=/home/cassandra/cassandra\
          \ --keep-test-dir  $tests_arg | tee /tmp/dtest/stdout.txt\n  fi\nfi\n"
        name: Run repeated Python DTests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results
    - store_artifacts:
        destination: dtest
        path: /tmp/dtest
    - store_artifacts:
        destination: dtest_logs
        path: ~/cassandra-dtest/logs
    working_directory: ~/
  j8_utests_cdc:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-cdc   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=unit\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-cdc)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_cdc_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-cdc\ntesttag=\"\"\nif\
          \ [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-cdc $name_arg $methods_arg $vnodes_args -Dno-build-test=true\
          \ | \\\n            tee stdout.txt \\\n          ); then\n        status=\"\
          fails\"\n        exit_code=1\n      fi\n\n      # move the stdout output\
          \ file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_utests_compression:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-compression   -Dtest.timeout=\"\
          $test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\
          \ -Dtest.classlistprefix=unit -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-compression)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_compression_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-compression\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-compression $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_utests_fqltool:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\n\
          if [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n\
          fi\nant fqltool-test -Dno-build-test=true\n"
        name: Run Unit Tests (fqltool-test)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_fqltool_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_FQLTOOL_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_FQLTOOL_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS_FQLTOOL} | sed -e \"s/<nil>//\" | sed -e\
          \ \"s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\n\
          echo \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=fqltool-test\ntesttag=\"\"\
          \nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant fqltool-test $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_utests_long:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\n\
          if [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n\
          fi\nant long-test -Dno-build-test=true\n"
        name: Run Unit Tests (long-test)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_long_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: org.apache.cassandra.dht.tokenallocator.Murmur3ReplicationAwareTokenAllocatorTest,org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocatorTest,org.apache.cassandra.dht.tokenallocator.RandomReplicationAwareTokenAllocatorTest
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_LONG_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_LONG_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS_LONG} | sed -e \"s/<nil>//\" | sed -e \"\
          s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=long-testsome\ntesttag=\"\"\
          \nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant long-testsome $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_utests_stress:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 1
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: "export PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\ncd /tmp/cassandra\n\
          if [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n\
          fi\nant stress-test -Dno-build-test=true\n"
        name: Run Unit Tests (stress-test)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_stress_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_STRESS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_STRESS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS_STRESS} | sed -e \"s/<nil>//\" | sed -e \"\
          s/ //\" | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho\
          \ \"Tests to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes\
          \ argument, which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"\
          $vnodes\" = true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=stress-test-some\ntesttag=\"\
          \"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant stress-test-some $name_arg $methods_arg $vnodes_args\
          \ -Dno-build-test=true | \\\n            tee stdout.txt \\\n          );\
          \ then\n        status=\"fails\"\n        exit_code=1\n      fi\n\n    \
          \  # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_utests_system_keyspace_directory:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-system-keyspace-directory\
          \   -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\
          \ -Dtest.classlistprefix=unit -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-system-keyspace-directory)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_system_keyspace_directory_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-system-keyspace-directory\n\
          testtag=\"\"\nif [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\n\
          elif [[ $target == \"test-compression\" ]]; then\n  testtag=\"compression\"\
          \nelif [[ $target == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"\
          system_keyspace_directory\"\nelif [[ $target == \"test-trie\" ]]; then\n\
          \  testtag=\"trie\"\nfi\n\n# Run each test class as many times as requested.\n\
          exit_code=\"$?\"\nfor test in $tests; do\n\n    # Split class and method\
          \ names from the test name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"\
          #\"*}\n      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-system-keyspace-directory $name_arg $methods_arg\
          \ $vnodes_args -Dno-build-test=true | \\\n            tee stdout.txt \\\n\
          \          ); then\n        status=\"fails\"\n        exit_code=1\n    \
          \  fi\n\n      # move the stdout output file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
  j8_utests_trie:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: null
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: '# reminder: this code (along with all the steps) is independently
          executed on every circle container

          # so the goal here is to get the circleci script to return the tests *this*
          container will run

          # which we do via the `circleci` cli tool.


          rm -fr ~/cassandra-dtest/upgrade_tests

          echo "***java tests***"


          # get all of our unit test filenames

          set -eo pipefail && circleci tests glob "$HOME/cassandra/test/unit/**/*.java"
          > /tmp/all_java_unit_tests.txt


          # split up the unit tests into groups based on the number of containers
          we have

          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename
          --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt
          > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt

          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed "s;^/home/cassandra/cassandra/test/unit/;;g"
          | grep "Test\.java$"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          echo "** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt"

          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt

          '
        name: Determine unit Tests to Run
        no_output_timeout: 15m
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\ntest_timeout=$(grep 'name=\"test.unit.timeout\"\
          ' build.xml | awk -F'\"' '{print $4}' || true)\nif [ -z \"$test_timeout\"\
          \ ]; then\n  test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk\
          \ -F'\"' '{print $4}')\nfi\nant testclasslist-trie   -Dtest.timeout=\"$test_timeout\"\
          \ -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt -Dtest.classlistprefix=unit\
          \ -Dno-build-test=true\n"
        name: Run Unit Tests (testclasslist-trie)
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/cassandra/build/test/output/
    - store_artifacts:
        destination: junitxml
        path: /tmp/cassandra/build/test/output
    - store_artifacts:
        destination: logs
        path: /tmp/cassandra/build/test/logs
    working_directory: ~/
  j8_utests_trie_repeat:
    docker:
    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:latest
    environment:
    - ANT_HOME: /usr/share/ant
    - LANG: en_US.UTF-8
    - KEEP_TEST_DIR: true
    - DEFAULT_DIR: /home/cassandra/cassandra-dtest
    - PYTHONIOENCODING: utf-8
    - PYTHONUNBUFFERED: true
    - CASS_DRIVER_NO_EXTENSIONS: true
    - CASS_DRIVER_NO_CYTHON: true
    - CASSANDRA_SKIP_SYNC: true
    - DTEST_REPO: https://github.com/apache/cassandra-dtest.git
    - DTEST_BRANCH: trunk
    - CCM_MAX_HEAP_SIZE: 1024M
    - CCM_HEAP_NEWSIZE: 256M
    - REPEATED_TESTS_STOP_ON_FAILURE: false
    - REPEATED_UTESTS: org.apache.cassandra.auth.CassandraAuthorizerTest,org.apache.cassandra.batchlog.BatchlogManagerTest,org.apache.cassandra.db.CleanupTransientTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest,org.apache.cassandra.db.compaction.CompactionStrategyManagerTest,org.apache.cassandra.db.filter.ColumnFilterTest,org.apache.cassandra.db.memtable.MemtableQuickTest,org.apache.cassandra.db.view.ViewUtilsTest,org.apache.cassandra.db.virtual.JmxPermissionsCacheKeysTableTest,org.apache.cassandra.db.virtual.LocalRepairTablesTest,org.apache.cassandra.db.virtual.LogMessagesTableTest,org.apache.cassandra.db.virtual.StreamingVirtualTableTest,org.apache.cassandra.dht.BootStrapperTest,org.apache.cassandra.dht.KeyCollisionTest,org.apache.cassandra.dht.RangeTest,org.apache.cassandra.dht.SplitterTest,org.apache.cassandra.dht.StreamStateStoreTest,org.apache.cassandra.dht.tokenallocator.TokenAllocationTest,org.apache.cassandra.gms.FailureDetectorTest,org.apache.cassandra.gms.GossiperTest,org.apache.cassandra.io.sstable.CQLSSTableWriterTest,org.apache.cassandra.io.sstable.ScrubTest,org.apache.cassandra.io.sstable.indexsummary.IndexSummaryTest,org.apache.cassandra.locator.AssureSufficientLiveNodesTest,org.apache.cassandra.locator.NetworkTopologyStrategyTest,org.apache.cassandra.locator.PendingRangesTest,org.apache.cassandra.locator.PropertyFileSnitchTest,org.apache.cassandra.locator.ReplicationStrategyEndpointCacheTest,org.apache.cassandra.locator.SimpleStrategyTest,org.apache.cassandra.repair.RepairJobTest,org.apache.cassandra.repair.RepairSessionTest,org.apache.cassandra.repair.messages.RepairMessageSerializationsTest,org.apache.cassandra.service.BootstrapTransientTest,org.apache.cassandra.service.LeaveAndBootstrapTest,org.apache.cassandra.service.MoveTest,org.apache.cassandra.service.MoveTransientTest,org.apache.cassandra.service.RemoveTest,org.apache.cassandra.service.StorageServiceServerTest,org.apache.cassandra.service.StorageServiceTest,org.apache.cassandra.service.paxos.AbstractPaxosRepairTest,org.apache.cassandra.service.paxos.PaxosStateTest,org.apache.cassandra.service.paxos.cleanup.PaxosTableRepairsTest,org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTrackerTest,org.apache.cassandra.service.paxos.uncommitted.PaxosUncommittedTrackerIntegrationTest,org.apache.cassandra.service.reads.AbstractReadResponseTest,org.apache.cassandra.tools.nodetool.GetAuthCacheConfigTest,org.apache.cassandra.tools.nodetool.InvalidateCredentialsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateJmxPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateNetworkPermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidatePermissionsCacheTest,org.apache.cassandra.tools.nodetool.InvalidateRolesCacheTest,org.apache.cassandra.tools.nodetool.SetAuthCacheConfigTest,org.apache.cassandra.utils.BloomFilterTest,org.apache.cassandra.utils.SerializationsTest
    - REPEATED_UTESTS_COUNT: 500
    - REPEATED_UTESTS_FQLTOOL: null
    - REPEATED_UTESTS_FQLTOOL_COUNT: 500
    - REPEATED_UTESTS_LONG: null
    - REPEATED_UTESTS_LONG_COUNT: 100
    - REPEATED_UTESTS_STRESS: null
    - REPEATED_UTESTS_STRESS_COUNT: 500
    - REPEATED_SIMULATOR_DTESTS: null
    - REPEATED_SIMULATOR_DTESTS_COUNT: 500
    - REPEATED_JVM_DTESTS: null
    - REPEATED_JVM_DTESTS_COUNT: 500
    - REPEATED_JVM_UPGRADE_DTESTS: null
    - REPEATED_JVM_UPGRADE_DTESTS_COUNT: 500
    - REPEATED_DTESTS: null
    - REPEATED_DTESTS_COUNT: 500
    - REPEATED_LARGE_DTESTS: null
    - REPEATED_LARGE_DTESTS_COUNT: 100
    - REPEATED_UPGRADE_DTESTS: null
    - REPEATED_UPGRADE_DTESTS_COUNT: 25
    - REPEATED_ANT_TEST_TARGET: testsome
    - REPEATED_ANT_TEST_CLASS: null
    - REPEATED_ANT_TEST_METHODS: null
    - REPEATED_ANT_TEST_VNODES: false
    - REPEATED_ANT_TEST_COUNT: 500
    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    parallelism: 25
    resource_class: medium
    shell: /bin/bash -eo pipefail -l
    steps:
    - attach_workspace:
        at: /home/cassandra
    - run:
        command: 'echo ''*** id ***''

          id

          echo ''*** cat /proc/cpuinfo ***''

          cat /proc/cpuinfo

          echo ''*** free -m ***''

          free -m

          echo ''*** df -m ***''

          df -m

          echo ''*** ifconfig -a ***''

          ifconfig -a

          echo ''*** uname -a ***''

          uname -a

          echo ''*** mount ***''

          mount

          echo ''*** env ***''

          env

          echo ''*** java ***''

          which java

          java -version

          '
        name: Log Environment Information
    - run:
        command: "set -x\nexport PATH=$JAVA_HOME/bin:$PATH\ntime mv ~/cassandra /tmp\n\
          cd /tmp/cassandra\nif [ -d ~/dtest_jars ]; then\n  cp ~/dtest_jars/dtest*\
          \ /tmp/cassandra/build/\nfi\n\n# Calculate the number of test iterations\
          \ to be run by the current parallel runner.\ncount=$((${REPEATED_UTESTS_COUNT}\
          \ / CIRCLE_NODE_TOTAL))\nif (($CIRCLE_NODE_INDEX < (${REPEATED_UTESTS_COUNT}\
          \ % CIRCLE_NODE_TOTAL))); then\n  count=$((count+1))\nfi\n\n# Put manually\
          \ specified tests and automatically detected tests together, removing duplicates\n\
          tests=$(echo ${REPEATED_UTESTS} | sed -e \"s/<nil>//\" | sed -e \"s/ //\"\
          \ | tr \",\" \"\\n\" | tr \" \" \"\\n\" | sort -n | uniq -u)\necho \"Tests\
          \ to be repeated: ${tests}\"\n\n# Prepare the JVM dtests vnodes argument,\
          \ which is optional.\nvnodes=false\nvnodes_args=\"\"\nif [ \"$vnodes\" =\
          \ true ] ; then\n  vnodes_args=\"-Dtest.jvm.args='-Dcassandra.dtest.num_tokens=16'\"\
          \nfi\n\n# Prepare the testtag for the target, used by the test macro in\
          \ build.xml to group the output files\ntarget=test-trie\ntesttag=\"\"\n\
          if [[ $target == \"test-cdc\" ]]; then\n  testtag=\"cdc\"\nelif [[ $target\
          \ == \"test-compression\" ]]; then\n  testtag=\"compression\"\nelif [[ $target\
          \ == \"test-system-keyspace-directory\" ]]; then\n  testtag=\"system_keyspace_directory\"\
          \nelif [[ $target == \"test-trie\" ]]; then\n  testtag=\"trie\"\nfi\n\n\
          # Run each test class as many times as requested.\nexit_code=\"$?\"\nfor\
          \ test in $tests; do\n\n    # Split class and method names from the test\
          \ name\n    if [[ $test =~ \"#\" ]]; then\n      class=${test%\"#\"*}\n\
          \      method=${test#*\"#\"}\n    else\n      class=$test\n      method=\"\
          \"\n    fi\n\n    # Prepare the -Dtest.name argument.\n    # It can be the\
          \ fully qualified class name or the short class name, depending on the target.\n\
          \    if [[ $target == \"test\" || \\\n          $target == \"test-cdc\"\
          \ || \\\n          $target == \"test-compression\" || \\\n          $target\
          \ == \"test-trie\" || \\\n          $target == \"test-system-keyspace-directory\"\
          \ || \\\n          $target == \"fqltool-test\" || \\\n          $target\
          \ == \"long-test\" || \\\n          $target == \"stress-test\" || \\\n \
          \         $target == \"test-simulator-dtest\" ]]; then\n      name_arg=\"\
          -Dtest.name=${class##*.}\"\n    else\n      name_arg=\"-Dtest.name=$class\"\
          \n    fi\n\n    # Prepare the -Dtest.methods argument, which is optional\n\
          \    if [[ $method == \"\" ]]; then\n      methods_arg=\"\"\n    else\n\
          \      methods_arg=\"-Dtest.methods=$method\"\n    fi\n\n    for i in $(seq\
          \ -w 1 $count); do\n      echo \"Running test $test, iteration $i of $count\"\
          \n\n      # run the test\n      status=\"passes\"\n      if !( set -o pipefail\
          \ && \\\n            ant test-trie $name_arg $methods_arg $vnodes_args -Dno-build-test=true\
          \ | \\\n            tee stdout.txt \\\n          ); then\n        status=\"\
          fails\"\n        exit_code=1\n      fi\n\n      # move the stdout output\
          \ file\n      dest=/tmp/results/repeated_utests/stdout/${status}/${i}\n\
          \      mkdir -p $dest\n      mv stdout.txt $dest/${test}.txt\n\n      #\
          \ move the XML output files\n      source=build/test/output/${testtag}\n\
          \      dest=/tmp/results/repeated_utests/output/${status}/${i}\n      mkdir\
          \ -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]]; then\n  \
          \      mv $source/* $dest/\n      fi\n\n      # move the log files\n   \
          \   source=build/test/logs/${testtag}\n      dest=/tmp/results/repeated_utests/logs/${status}/${i}\n\
          \      mkdir -p $dest\n      if [[ -d $source && -n \"$(ls $source)\" ]];\
          \ then\n        mv $source/* $dest/\n      fi\n      \n      # maybe stop\
          \ iterations on test failure\n      if [[ ${REPEATED_TESTS_STOP_ON_FAILURE}\
          \ = true ]] && (( $exit_code > 0 )); then\n        break\n      fi\n   \
          \ done\ndone\n(exit ${exit_code})\n"
        name: Repeatedly run new or modifed JUnit tests
        no_output_timeout: 15m
    - store_test_results:
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: stdout
        path: /tmp/results/repeated_utests/stdout
    - store_artifacts:
        destination: junitxml
        path: /tmp/results/repeated_utests/output
    - store_artifacts:
        destination: logs
        path: /tmp/results/repeated_utests/logs
    working_directory: ~/
version: 2
workflows:
  java11_tests:
    jobs:
    - j11_build: {}
    - j11_unit_tests:
        requires:
        - j11_build
    - j11_jvm_dtests:
        requires:
        - j11_build
    - j11_jvm_dtests_vnode:
        requires:
        - j11_build
    - j11_simulator_dtests:
        requires:
        - j11_build
    - j11_cqlshlib_tests:
        requires:
        - j11_build
    - start_j11_cqlshlib_cython_tests:
        type: approval
    - j11_cqlshlib_cython_tests:
        requires:
        - start_j11_cqlshlib_cython_tests
        - j11_build
    - j11_dtests:
        requires:
        - j11_build
    - j11_dtests_vnode:
        requires:
        - j11_build
    - start_j11_dtests_offheap:
        type: approval
    - j11_dtests_offheap:
        requires:
        - start_j11_dtests_offheap
        - j11_build
    - start_j11_dtests_large:
        type: approval
    - j11_dtests_large:
        requires:
        - start_j11_dtests_large
        - j11_build
    - start_j11_dtests_large_vnode:
        type: approval
    - j11_dtests_large_vnode:
        requires:
        - start_j11_dtests_large_vnode
        - j11_build
    - j11_cqlsh_dtests_py3:
        requires:
        - j11_build
    - j11_cqlsh_dtests_py3_vnode:
        requires:
        - j11_build
    - j11_cqlsh_dtests_py38:
        requires:
        - j11_build
    - j11_cqlsh_dtests_py311:
        requires:
        - j11_build
    - j11_cqlsh_dtests_py38_vnode:
        requires:
        - j11_build
    - j11_cqlsh_dtests_py311_vnode:
        requires:
        - j11_build
    - start_j11_cqlsh-dtests-offheap:
        type: approval
    - j11_cqlsh_dtests_py3_offheap:
        requires:
        - start_j11_cqlsh-dtests-offheap
        - j11_build
    - j11_cqlsh_dtests_py38_offheap:
        requires:
        - start_j11_cqlsh-dtests-offheap
        - j11_build
    - j11_cqlsh_dtests_py311_offheap:
        requires:
        - start_j11_cqlsh-dtests-offheap
        - j11_build
    - j11_utests_long:
        requires:
        - j11_build
    - j11_utests_cdc:
        requires:
        - j11_build
    - j11_utests_compression:
        requires:
        - j11_build
    - j11_utests_trie:
        requires:
        - j11_build
    - j11_utests_stress:
        requires:
        - j11_build
    - j11_utests_fqltool:
        requires:
        - j11_build
    - j11_utests_system_keyspace_directory:
        requires:
        - j11_build
    - j11_unit_tests_repeat:
        requires:
        - j11_build
    - j11_utests_compression_repeat:
        requires:
        - j11_build
    - j11_utests_trie_repeat:
        requires:
        - j11_build
    - j11_utests_cdc_repeat:
        requires:
        - j11_build
    - j11_utests_system_keyspace_directory_repeat:
        requires:
        - j11_build
    - j11_jvm_dtests_repeat:
        requires:
        - j11_build
    - j11_jvm_dtests_vnode_repeat:
        requires:
        - j11_build
    - j11_utests_long_repeat:
        requires:
        - j11_build
    - j11_simulator_dtests_repeat:
        requires:
        - j11_build
  java8_tests:
    jobs:
    - j8_build: {}
    - j8_unit_tests:
        requires:
        - j8_build
    - j8_jvm_dtests:
        requires:
        - j8_build
    - j8_jvm_dtests_vnode:
        requires:
        - j8_build
    - j8_simulator_dtests:
        requires:
        - j8_build
    - j8_cqlshlib_tests:
        requires:
        - j8_build
    - start_j8_cqlshlib_cython_tests:
        type: approval
    - j8_cqlshlib_cython_tests:
        requires:
        - start_j8_cqlshlib_cython_tests
        - j8_build
    - j8_utests_long:
        requires:
        - j8_build
    - j8_utests_cdc:
        requires:
        - j8_build
    - j8_utests_compression:
        requires:
        - j8_build
    - j8_utests_trie:
        requires:
        - j8_build
    - j8_utests_stress:
        requires:
        - j8_build
    - j8_utests_fqltool:
        requires:
        - j8_build
    - j8_utests_system_keyspace_directory:
        requires:
        - j8_build
    - j8_dtest_jars_build:
        requires:
        - j8_build
    - j8_jvm_upgrade_dtests:
        requires:
        - j8_dtest_jars_build
    - j8_dtests:
        requires:
        - j8_build
    - j8_dtests_vnode:
        requires:
        - j8_build
    - start_j8_dtests_offheap:
        type: approval
    - j8_dtests_offheap:
        requires:
        - start_j8_dtests_offheap
        - j8_build
    - start_j8_dtests_large:
        type: approval
    - j8_dtests_large:
        requires:
        - start_j8_dtests_large
        - j8_build
    - start_j8_dtests_large_vnode:
        type: approval
    - j8_dtests_large_vnode:
        requires:
        - start_j8_dtests_large_vnode
        - j8_build
    - j8_upgrade_dtests:
        requires:
        - j8_build
    - j8_cqlsh_dtests_py3:
        requires:
        - j8_build
    - j8_cqlsh_dtests_py3_vnode:
        requires:
        - j8_build
    - j8_cqlsh_dtests_py38:
        requires:
        - j8_build
    - j8_cqlsh_dtests_py311:
        requires:
        - j8_build
    - j8_cqlsh_dtests_py38_vnode:
        requires:
        - j8_build
    - j8_cqlsh_dtests_py311_vnode:
        requires:
        - j8_build
    - start_j8_cqlsh_tests_offheap:
        type: approval
    - j8_cqlsh_dtests_py3_offheap:
        requires:
        - start_j8_cqlsh_tests_offheap
        - j8_build
    - j8_cqlsh_dtests_py38_offheap:
        requires:
        - start_j8_cqlsh_tests_offheap
        - j8_build
    - j8_cqlsh_dtests_py311_offheap:
        requires:
        - start_j8_cqlsh_tests_offheap
        - j8_build
    - j8_unit_tests_repeat:
        requires:
        - j8_build
    - j8_utests_compression_repeat:
        requires:
        - j8_build
    - j8_utests_trie_repeat:
        requires:
        - j8_build
    - j8_utests_cdc_repeat:
        requires:
        - j8_build
    - j8_utests_system_keyspace_directory_repeat:
        requires:
        - j8_build
    - j8_jvm_dtests_repeat:
        requires:
        - j8_build
    - j8_jvm_dtests_vnode_repeat:
        requires:
        - j8_build
    - j8_utests_long_repeat:
        requires:
        - j8_build
    - j8_simulator_dtests_repeat:
        requires:
        - j8_build
  version: 2
